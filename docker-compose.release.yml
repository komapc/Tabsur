# Production/Release environment - for AWS deployment
version: '3.8'

services:
  # Server (Node.js/Express)
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: tabsur-server-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL:-true}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - FIREBASE_SERVER_KEY=${FIREBASE_SERVER_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - /tmp:/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - tabsur-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Client (React/Nginx)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: tabsur-client-prod
    restart: unless-stopped
    environment:
      - REACT_APP_SERVER_HOST=${REACT_APP_SERVER_HOST}
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - REACT_APP_FIREBASE_CONFIG=${REACT_APP_FIREBASE_CONFIG}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      server:
        condition: service_healthy
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - tabsur-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Load Balancer (if scaling server instances)
  loadbalancer:
    image: nginx:alpine
    container_name: tabsur-lb-prod
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - server
    networks:
      - tabsur-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

networks:
  tabsur-network:
    driver: bridge
    name: tabsur-prod-network