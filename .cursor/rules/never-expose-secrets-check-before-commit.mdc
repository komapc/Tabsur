# Never Expose Secrets - Check Before Every Commit

## 🚨 Critical Security Rule: No Secrets in Commits

**NEVER commit code with hardcoded secrets, API keys, passwords, or sensitive credentials.** This rule is mandatory for all commits.

## 🔍 Secret Detection Checklist

Before every commit, check for these common secret patterns:

### 1. **Database Credentials**
- [ ] No hardcoded `DB_PASSWORD` values
- [ ] No hardcoded `POSTGRES_PASSWORD` values
- [ ] No hardcoded database connection strings
- [ ] All passwords use environment variables only

### 2. **JWT & Authentication Secrets**
- [ ] No hardcoded `JWT_SECRET` values
- [ ] No hardcoded `SECRET_OR_KEY` values
- [ ] No hardcoded API keys
- [ ] All secrets use environment variables only

### 3. **Admin & Service Passwords**
- [ ] No hardcoded `PGADMIN_PASSWORD` values
- [ ] No hardcoded `admin123` or similar passwords
- [ ] No hardcoded service account credentials
- [ ] All passwords use environment variables only

### 4. **External API Keys**
- [ ] No hardcoded Google Maps API keys
- [ ] No hardcoded Firebase credentials
- [ ] No hardcoded AWS credentials
- [ ] All API keys use environment variables only

## 🚫 Forbidden Patterns

**NEVER commit these patterns:**

```bash
# ❌ WRONG - Hardcoded secrets
DB_PASSWORD=your_secure_database_password_here
JWT_SECRET=your-super-secret-jwt-key-change-this
PGADMIN_PASSWORD=admin123
API_KEY=sk-1234567890abcdef

# ✅ CORRECT - Environment variables only
DB_PASSWORD=${DB_PASSWORD}
JWT_SECRET=${JWT_SECRET}
PGADMIN_PASSWORD=${PGADMIN_PASSWORD}
API_KEY=${API_KEY}
```

## 🔧 Pre-Commit Security Check

Run these commands before every commit:

```bash
# 1. Search for hardcoded secrets
grep -r "your_secure_database_password_here" .
grep -r "your-super-secret-jwt-key-change-this" .
grep -r "admin123" .
grep -r "sk-" .

# 2. Check for environment variable usage
grep -r "DB_PASSWORD=" . | grep -v "DB_PASSWORD=\${"
grep -r "JWT_SECRET=" . | grep -v "JWT_SECRET=\${"

# 3. Security audit
npm run security:audit

# 4. If clean, then commit
git add .
git commit -m "Your commit message"
```

## 📁 Files to Always Check

These files are high-risk for secrets:

- [docker-compose*.yml](mdc:docker-compose*.yml) - Docker configurations
- [docker.env](mdc:docker.env) - Docker environment variables
- [env.*](mdc:env.*) - Environment files
- [server.js](mdc:server.js) - Server configuration
- [terraform/](mdc:terraform/) - Infrastructure code
- [scripts/](mdc:scripts/) - Deployment scripts

## 🛡️ Security Best Practices

### Environment Variables
```bash
# Use .env files (never committed)
DB_PASSWORD=actual_password_here

# Reference in code
process.env.DB_PASSWORD
```

### Docker Compose
```yaml
# ❌ WRONG
environment:
  DB_PASSWORD: hardcoded_password

# ✅ CORRECT
environment:
  DB_PASSWORD: ${DB_PASSWORD}
```

### Configuration Files
```javascript
// ❌ WRONG
const jwtSecret = 'hardcoded-secret';

// ✅ CORRECT
const jwtSecret = process.env.JWT_SECRET;
```

## 🚨 Emergency Procedures

If you accidentally commit secrets:

1. **IMMEDIATELY** revoke/rotate the exposed secrets
2. **NEVER** push to remote if secrets are in local commits
3. **Use** `git reset --soft HEAD~1` to undo the commit
4. **Fix** the secret exposure
5. **Re-commit** without secrets
6. **Verify** no secrets remain before pushing

## 🔍 Secret Detection Tools

Install and use these tools:

```bash
# GitGuardian pre-commit hook
pip install gitguardian

# TruffleHog for secret scanning
pip install trufflehog

# Pre-commit hooks
pip install pre-commit
```

## 📋 Commit Security Checklist

Before every commit, verify:

- [ ] No hardcoded passwords ✅
- [ ] No hardcoded API keys ✅
- [ ] No hardcoded JWT secrets ✅
- [ ] No hardcoded database credentials ✅
- [ ] All secrets use environment variables ✅
- [ ] Security audit passes ✅
- [ ] No secrets in commit message ✅

## 🎯 Why This Rule Exists

- **Protects sensitive data** from exposure
- **Prevents security breaches** and data leaks
- **Maintains compliance** with security standards
- **Protects users** and their information
- **Avoids costly** security incidents

## 🚫 Zero Tolerance Policy

**No exceptions allowed.** Even for:
- "Quick fixes"
- "Local development only"
- "Temporary testing"
- "Just this once"

**ALL commits must be free of secrets.**

---

*This rule is enforced by the security team and applies to all contributors. Violations may result in immediate access revocation.*
