# Secret Check Rule

**CRITICAL**: ALWAYS check for leaked secrets before committing any code.

## What to Check:
- API keys (Google Maps, AWS, OpenAI, etc.)
- Database passwords and connection strings
- JWT secrets and tokens
- Private keys (SSH, SSL, encryption)
- Access tokens (OAuth, JWT, etc.)
- Any hardcoded credentials

## Common Patterns to Search:
- `AIzaSyB...` (Google Maps API keys)
- `AKIA...` (AWS access keys)
- `sk-...` or `sk_...` (OpenAI, Stripe, other API keys)
- `ghp_...` (GitHub tokens)
- `Bearer eyJ...` (JWT tokens)
- `password=`, `secret=`, `key=`
- `mongodb://`, `postgresql://` with credentials
- `ssh-rsa`, `-----BEGIN PRIVATE KEY-----`

## Before Every Commit:
1. **Search for secrets** in changed files
2. **Check git diff** for any hardcoded values
3. **Use environment variables** instead of hardcoded secrets
4. **Add files with secrets to .gitignore**

## Commands to Run:
```bash
# Search for common secret patterns
grep -r "AIzaSyB\|AKIA\|sk-\|ghp_" .
grep -r "password.*=" .
grep -r "secret.*=" .
grep -r "Bearer eyJ" .

# Check what's being committed
git diff --cached
```

## If Secrets Found:
1. **IMMEDIATELY** remove from commit
2. **Rotate the exposed secrets**
3. **Use environment variables**
4. **Add to .gitignore**

## Pre-Commit Checklist:
- ✅ Scan commit message for secrets
- ✅ Scan staged files for secrets
- ✅ Use `git diff --cached` to review changes
- ✅ Check for hardcoded environment variables
- ✅ Verify no credentials in logs or configs

**Remember**: Once secrets are in git history, they're compromised! One leaked secret can compromise the entire application!
