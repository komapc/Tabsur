# Multi-stage React client Dockerfile - Production & Debug modes
# Build with: docker build --target production -t tabsur-client:prod .
# Build with: docker build --target debug -t tabsur-client:debug .

# Base stage with common dependencies
FROM node:24.4.1-alpine AS base
WORKDIR /app

# Copy package files for dependency installation
COPY client/package*.json ./

# Install dependencies based on target
FROM base AS deps-prod
RUN npm ci --cache /tmp/.npm && \
    rm -rf /tmp/.npm

FROM base AS deps-debug
RUN npm ci --cache /tmp/.npm && \
    rm -rf /tmp/.npm

# Build stage
FROM base AS build-prod
# Copy production dependencies
COPY --from=deps-prod /app/node_modules ./node_modules

# Copy source code
COPY client/ ./

# Build the application
RUN npm run build

FROM base AS build-debug
# Copy debug dependencies
COPY --from=deps-debug /app/node_modules ./node_modules

# Copy source code
COPY client/ ./

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:alpine AS production
# Copy custom nginx config
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copy built app from build stage
COPY --from=build-prod /app/build /usr/share/nginx/html

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:80/ || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# Debug stage with development server
FROM node:24.4.1-alpine AS debug
# Copy debug dependencies
COPY --from=deps-debug /app/node_modules ./node_modules

# Copy source code
COPY client/ ./

# Expose port
EXPOSE 3000

# Start development server
CMD ["npm", "start"]
