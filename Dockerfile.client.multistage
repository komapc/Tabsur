# Multi-stage Dockerfile for Tabsur Client - Optimized for Speed
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache curl

# Create app directory and user
WORKDIR /app
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files first for better caching
COPY client/package*.json ./

# Install dependencies
FROM base AS deps
RUN npm ci --cache .npm --prefer-offline --no-audit --no-fund --include=dev

# Build stage
FROM base AS build
COPY --from=deps /app/node_modules ./node_modules
COPY client/package*.json ./
COPY client/ ./

# Build-time configuration
ARG REACT_APP_SERVER_HOST
ARG REACT_APP_API_URL
ARG REACT_APP_GOOGLE_MAPS_API_KEY
ARG REACT_APP_GOOGLE_CLIENT_ID
ARG APP_BUILD_ID

ENV REACT_APP_SERVER_HOST=${REACT_APP_SERVER_HOST}
ENV REACT_APP_API_URL=${REACT_APP_API_URL}
ENV REACT_APP_GOOGLE_MAPS_API_KEY=${REACT_APP_GOOGLE_MAPS_API_KEY}
ENV REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
ENV APP_BUILD_ID=${APP_BUILD_ID}

# Build the app with env baked in
RUN echo "Building client with API host: ${REACT_APP_SERVER_HOST} (build ${APP_BUILD_ID})" && npm run build

# Production stage with nginx
FROM nginx:alpine AS production

# Copy built app
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx-client-simple.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
