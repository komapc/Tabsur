events {
    worker_connections 1024;
}

http {
    upstream backend {
        server tabsur-server:5000;
    }

    server {
        listen 80;
        server_name _;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Admin interface
        location / {
            return 200 '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabsur Admin Panel</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .nav { display: flex; gap: 20px; margin-bottom: 30px; justify-content: center; }
        .nav a { padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        .nav a:hover { background: #0056b3; }
        .section { margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .section h2 { color: #555; margin-top: 0; }
        .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
        .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .status.warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { padding: 20px; border: 1px solid #ddd; border-radius: 5px; background: #f9f9f9; }
        .metric { font-size: 24px; font-weight: bold; color: #007bff; }
        .refresh-btn { background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px; }
        .refresh-btn:hover { background: #218838; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Tabsur Admin Panel</h1>
        
        <div class="nav">
            <a href="#overview">Overview</a>
            <a href="#system">System</a>
            <a href="#users">Users</a>
            <a href="#meals">Meals</a>
            <a href="#api">API</a>
        </div>

        <div id="overview" class="section">
            <h2>üìä System Overview</h2>
            <div class="grid">
                <div class="card">
                    <h3>Server Status</h3>
                    <div id="server-status" class="status">Checking...</div>
                    <button class="refresh-btn" onclick="checkServerStatus()">Refresh</button>
                </div>
                <div class="card">
                    <h3>Database Status</h3>
                    <div id="db-status" class="status">Checking...</div>
                    <button class="refresh-btn" onclick="checkDBStatus()">Refresh</button>
                </div>
                <div class="card">
                    <h3>Active Users</h3>
                    <div class="metric" id="active-users">-</div>
                </div>
                <div class="card">
                    <h3>Active Meals</h3>
                    <div class="metric" id="active-meals">-</div>
                </div>
            </div>
        </div>

        <div id="system" class="section">
            <h2>‚öôÔ∏è System Health</h2>
            <div id="system-health" class="status">Loading...</div>
            <button class="refresh-btn" onclick="checkSystemHealth()">Refresh</button>
        </div>

        <div id="users" class="section">
            <h2>üë• User Management</h2>
            <div class="grid">
                <div class="card">
                    <h3>User Statistics</h3>
                    <div id="user-stats">Loading...</div>
                    <button class="refresh-btn" onclick="loadUserStats()">Refresh</button>
                </div>
                <div class="card">
                    <h3>User Details</h3>
                    <input type="number" id="user-id" placeholder="User ID" value="1" style="padding: 8px; margin: 10px 0;">
                    <button class="refresh-btn" onclick="loadUserDetails()">Load User</button>
                    <div id="user-details" style="margin-top: 10px;">Enter user ID and click Load</div>
                </div>
            </div>
        </div>

        <div id="meals" class="section">
            <h2>üçΩÔ∏è Meal Management</h2>
            <div id="meal-stats">Loading...</div>
            <button class="refresh-btn" onclick="loadMealStats()">Refresh</button>
        </div>

        <div id="api" class="section">
            <h2>üîå API Endpoints</h2>
            <div class="grid">
                <div class="card">
                    <h3>Available Endpoints</h3>
                    <ul>
                        <li><code>/api/system/health</code> - System health check</li>
                        <li><code>/api/users/:id</code> - User information</li>
                        <li><code>/api/meals</code> - Meal management</li>
                        <li><code>/api/attends</code> - Attendance management</li>
                    </ul>
                </div>
                <div class="card">
                    <h3>Test API</h3>
                    <button class="refresh-btn" onclick="testAPI()">Test All Endpoints</button>
                    <div id="api-test-results" style="margin-top: 10px;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize on page load
        document.addEventListener("DOMContentLoaded", function() {
            checkServerStatus();
            checkDBStatus();
            checkSystemHealth();
            loadUserStats();
            loadMealStats();
        });

        async function checkServerStatus() {
            try {
                const response = await fetch("/health");
                const status = document.getElementById("server-status");
                if (response.ok) {
                    status.textContent = "‚úÖ Server is running and healthy";
                    status.className = "status success";
                } else {
                    status.textContent = "‚ùå Server error";
                    status.className = "status error";
                }
            } catch (error) {
                document.getElementById("server-status").textContent = "‚ùå Server unreachable";
                document.getElementById("server-status").className = "status error";
            }
        }

        async function checkDBStatus() {
            try {
                const response = await fetch("/api/system/health");
                const data = await response.json();
                const status = document.getElementById("db-status");
                
                if (data.DB === "connected") {
                    status.textContent = "‚úÖ Database connected";
                    status.className = "status success";
                    document.getElementById("active-users").textContent = data.onlineUsers || 0;
                    document.getElementById("active-meals").textContent = data.activeMeals || 0;
                } else if (data.DB === "checking") {
                    status.textContent = "‚ö†Ô∏è Database checking connection";
                    status.className = "status warning";
                } else {
                    status.textContent = "‚ùå Database disconnected";
                    status.className = "status error";
                }
            } catch (error) {
                document.getElementById("db-status").textContent = "‚ùå Cannot check database";
                document.getElementById("db-status").className = "status error";
            }
        }

        async function checkSystemHealth() {
            try {
                const response = await fetch("/api/system/health");
                const data = await response.json();
                const healthDiv = document.getElementById("system-health");
                
                let healthHtml = "<strong>System Status:</strong><br>";
                healthHtml += `‚úÖ Server: ${data.server ? "Running" : "Stopped"}<br>`;
                healthHtml += `üìä Users: ${data.users || 0}<br>`;
                healthHtml += `üçΩÔ∏è Meals Created Today: ${data.mealsCreatedToday || 0}<br>`;
                healthHtml += `üë• Online Users: ${data.onlineUsers || 0}<br>`;
                healthHtml += `üéØ Active Meals: ${data.activeMeals || 0}<br>`;
                
                healthDiv.innerHTML = healthHtml;
                healthDiv.className = "status success";
            } catch (error) {
                document.getElementById("system-health").textContent = "‚ùå Cannot load system health";
                document.getElementById("system-health").className = "status error";
            }
        }

        async function loadUserStats() {
            try {
                const response = await fetch("/api/users/1");
                const data = await response.json();
                const statsDiv = document.getElementById("user-stats");
                
                if (data && Object.keys(data).length > 0) {
                    let statsHtml = "<strong>User Statistics:</strong><br>";
                    for (const [key, value] of Object.entries(data)) {
                        statsHtml += `${key}: ${value}<br>`;
                    }
                    statsDiv.innerHTML = statsHtml;
                } else {
                    statsDiv.textContent = "No user data available";
                }
            } catch (error) {
                document.getElementById("user-stats").textContent = "‚ùå Cannot load user stats";
            }
        }

        async function loadUserDetails() {
            const userId = document.getElementById("user-id").value;
            try {
                const response = await fetch(`/api/users/${userId}`);
                const data = await response.json();
                const detailsDiv = document.getElementById("user-details");
                
                if (data && Object.keys(data).length > 0) {
                    let detailsHtml = "<strong>User Details:</strong><br>";
                    for (const [key, value] of Object.entries(data)) {
                        detailsHtml += `${key}: ${value}<br>`;
                    }
                    detailsDiv.innerHTML = detailsHtml;
                } else {
                    detailsDiv.textContent = "No user found with this ID";
                }
            } catch (error) {
                document.getElementById("user-details").textContent = "‚ùå Cannot load user details";
            }
        }

        async function loadMealStats() {
            try {
                const response = await fetch("/api/meals");
                const data = await response.json();
                const statsDiv = document.getElementById("meal-stats");
                
                if (data && Array.isArray(data)) {
                    statsDiv.innerHTML = `<strong>Total Meals:</strong> ${data.length}<br><strong>Recent Meals:</strong><br>${data.slice(0, 5).map(meal => \`‚Ä¢ \${meal.name || "Unnamed"} (\${meal.date || "No date"})\`).join("<br>")}`;
                } else {
                    statsDiv.textContent = "No meal data available";
                }
            } catch (error) {
                document.getElementById("meal-stats").textContent = "‚ùå Cannot load meal stats";
            }
        }

        async function testAPI() {
            const resultsDiv = document.getElementById("api-test-results");
            resultsDiv.innerHTML = "Testing API endpoints...";
            
            const endpoints = [
                "/health",
                "/api/system/health",
                "/api/users/1",
                "/api/meals"
            ];
            
            let results = "";
            for (const endpoint of endpoints) {
                try {
                    const response = await fetch(endpoint);
                    const status = response.ok ? "‚úÖ" : "‚ùå";
                    results += `${status} ${endpoint}: ${response.status}<br>`;
                } catch (error) {
                    results += `‚ùå ${endpoint}: Error<br>`;
                }
            }
            
            resultsDiv.innerHTML = results;
        }
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}
