53d4d19bda14850a5abd4f873bd69063
"use strict";

require("@testing-library/jest-dom");
// ðŸš€ Fast Test Setup for Tabsur
// Optimized for 2-3 minute execution time

// Mock console methods to reduce noise
global.console = {
  ...console,
  log: jest.fn(),
  warn: jest.fn(),
  info: jest.fn(),
  debug: jest.fn(),
  // Keep errors for debugging
  error: console.error
};

// Mock performance API
global.performance = {
  now: jest.fn(() => Date.now())
};

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// Mock window.scrollTo
Object.defineProperty(window, 'scrollTo', {
  writable: true,
  value: jest.fn()
});

// Mock fetch
global.fetch = jest.fn(() => Promise.resolve({
  ok: true,
  json: () => Promise.resolve({}),
  text: () => Promise.resolve('')
}));

// Mock WebSocket
global.WebSocket = class WebSocket {
  constructor() {
    setTimeout(() => this.onopen(), 0);
  }
  send() {}
  close() {}
  addEventListener() {}
  removeEventListener() {}
};

// Fast test environment setup
beforeEach(() => {
  // Clear all mocks
  jest.clearAllMocks();

  // Reset DOM
  document.body.innerHTML = '';

  // Reset localStorage
  localStorage.clear();

  // Reset sessionStorage
  sessionStorage.clear();
});

// Global test timeout
jest.setTimeout(5000);

// Suppress specific warnings that slow down tests
const originalError = console.error;
beforeAll(() => {
  console.error = (...args) => {
    if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
      return;
    }
    if (typeof args[0] === 'string' && args[0].includes('Warning: componentWillReceiveProps has been renamed')) {
      return;
    }
    originalError.call(console, ...args);
  };
});
afterAll(() => {
  console.error = originalError;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiZ2xvYmFsIiwiY29uc29sZSIsImxvZyIsImplc3QiLCJmbiIsIndhcm4iLCJpbmZvIiwiZGVidWciLCJlcnJvciIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiZGlzY29ubmVjdCIsIlJlc2l6ZU9ic2VydmVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJmZXRjaCIsIlByb21pc2UiLCJyZXNvbHZlIiwib2siLCJqc29uIiwidGV4dCIsIldlYlNvY2tldCIsInNldFRpbWVvdXQiLCJvbm9wZW4iLCJzZW5kIiwiY2xvc2UiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImxvY2FsU3RvcmFnZSIsImNsZWFyIiwic2Vzc2lvblN0b3JhZ2UiLCJvcmlnaW5hbEVycm9yIiwiYmVmb3JlQWxsIiwiYXJncyIsImluY2x1ZGVzIiwiY2FsbCIsImFmdGVyQWxsIl0sInNvdXJjZXMiOlsic2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g8J+agCBGYXN0IFRlc3QgU2V0dXAgZm9yIFRhYnN1clxuLy8gT3B0aW1pemVkIGZvciAyLTMgbWludXRlIGV4ZWN1dGlvbiB0aW1lXG5cbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIHJlZHVjZSBub2lzZVxuZ2xvYmFsLmNvbnNvbGUgPSB7XG4gIC4uLmNvbnNvbGUsXG4gIGxvZzogamVzdC5mbigpLFxuICB3YXJuOiBqZXN0LmZuKCksXG4gIGluZm86IGplc3QuZm4oKSxcbiAgZGVidWc6IGplc3QuZm4oKSxcbiAgLy8gS2VlcCBlcnJvcnMgZm9yIGRlYnVnZ2luZ1xuICBlcnJvcjogY29uc29sZS5lcnJvclxufTtcblxuLy8gTW9jayBwZXJmb3JtYW5jZSBBUElcbmdsb2JhbC5wZXJmb3JtYW5jZSA9IHtcbiAgbm93OiBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpXG59O1xuXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgb2JzZXJ2ZSgpIHt9XG4gIHVub2JzZXJ2ZSgpIHt9XG4gIGRpc2Nvbm5lY3QoKSB7fVxufTtcblxuLy8gTW9jayBSZXNpemVPYnNlcnZlclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gY2xhc3MgUmVzaXplT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIG9ic2VydmUoKSB7fVxuICB1bm9ic2VydmUoKSB7fVxuICBkaXNjb25uZWN0KCkge31cbn07XG5cbi8vIE1vY2sgbWF0Y2hNZWRpYVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pO1xuXG4vLyBNb2NrIHdpbmRvdy5zY3JvbGxUb1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3Njcm9sbFRvJywge1xuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IGplc3QuZm4oKSxcbn0pO1xuXG4vLyBNb2NrIGZldGNoXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCgpID0+XG4gIFByb21pc2UucmVzb2x2ZSh7XG4gICAgb2s6IHRydWUsXG4gICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSxcbiAgICB0ZXh0OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoJycpLFxuICB9KVxuKTtcblxuLy8gTW9jayBXZWJTb2NrZXRcbmdsb2JhbC5XZWJTb2NrZXQgPSBjbGFzcyBXZWJTb2NrZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25vcGVuKCksIDApO1xuICB9XG4gIHNlbmQoKSB7fVxuICBjbG9zZSgpIHt9XG4gIGFkZEV2ZW50TGlzdGVuZXIoKSB7fVxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge31cbn07XG5cbi8vIEZhc3QgdGVzdCBlbnZpcm9ubWVudCBzZXR1cFxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIC8vIENsZWFyIGFsbCBtb2Nrc1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgXG4gIC8vIFJlc2V0IERPTVxuICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICBcbiAgLy8gUmVzZXQgbG9jYWxTdG9yYWdlXG4gIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICBcbiAgLy8gUmVzZXQgc2Vzc2lvblN0b3JhZ2VcbiAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbn0pO1xuXG4vLyBHbG9iYWwgdGVzdCB0aW1lb3V0XG5qZXN0LnNldFRpbWVvdXQoNTAwMCk7XG5cbi8vIFN1cHByZXNzIHNwZWNpZmljIHdhcm5pbmdzIHRoYXQgc2xvdyBkb3duIHRlc3RzXG5jb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcbmJlZm9yZUFsbCgoKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgYXJnc1swXS5pbmNsdWRlcygnV2FybmluZzogUmVhY3RET00ucmVuZGVyIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgaGFzIGJlZW4gcmVuYW1lZCcpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9yaWdpbmFsRXJyb3IuY2FsbChjb25zb2xlLCAuLi5hcmdzKTtcbiAgfTtcbn0pO1xuXG5hZnRlckFsbCgoKSA9PiB7XG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBR0FBLE9BQUE7QUFIQTtBQUNBOztBQUlBO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2YsR0FBR0EsT0FBTztFQUNWQyxHQUFHLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDZEMsSUFBSSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2ZFLElBQUksRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNmRyxLQUFLLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDaEI7RUFDQUksS0FBSyxFQUFFUCxPQUFPLENBQUNPO0FBQ2pCLENBQUM7O0FBRUQ7QUFDQVIsTUFBTSxDQUFDUyxXQUFXLEdBQUc7RUFDbkJDLEdBQUcsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMs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