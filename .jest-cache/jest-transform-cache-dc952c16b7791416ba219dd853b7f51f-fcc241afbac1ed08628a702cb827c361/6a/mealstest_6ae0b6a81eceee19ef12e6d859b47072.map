{"version":3,"names":["_getJestObj","mock","connect","jest","fn","mockResolvedValue","query","release","authenticateJWT","req","res","next","user","id","name","email","tryAuthenticateJWT","require","request","express","bodyParser","meals","app","use","urlencoded","extended","json","describe","testMeal","beforeEach","description","date","Date","now","address","location","lng","lat","host_id","guest_count","image_id","type","visibility","it","pool","mockClient","mockResolvedValueOnce","rows","response","post","send","expect","status","toBe","body","toHaveBeenCalledWith","stringContaining","arrayContaining","any","String","toBeDefined","host_name","get","Array","isArray","toHaveLength","put","delete","meal_id"],"sources":["meals.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// Import routes\nconst meals = require('../routes/api/meals');\n\n// Mock the database\njest.mock('../routes/db.js', () => ({\n  connect: jest.fn().mockResolvedValue({\n    query: jest.fn(),\n    release: jest.fn()\n  })\n}));\n\n// Mock authentication middleware\njest.mock('../routes/authenticateJWT.js', () => ({\n  authenticateJWT: jest.fn((req, res, next) => {\n    req.user = { id: 1, name: 'Test User', email: 'test@example.com' };\n    next();\n  }),\n  tryAuthenticateJWT: jest.fn((req, res, next) => {\n    req.user = { id: 1, name: 'Test User', email: 'test@example.com' };\n    next();\n  })\n}));\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use('/api/meals', meals);\n\ndescribe('Meals API', () => {\n  let testMeal;\n\n  beforeEach(() => {\n    testMeal = {\n      name: 'Test Meal',\n      description: 'A delicious test meal for testing',\n      date: Date.now() + 86400000, // Tomorrow\n      address: '456 Test Avenue, Tel Aviv, Israel',\n      location: { lng: 34.808, lat: 32.09 },\n      host_id: 1,\n      guest_count: 3,\n      image_id: -1,\n      type: 1,\n      visibility: 1\n    };\n  });\n\n  describe('POST /api/meals', () => {\n    it('should create a new meal with valid data', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful meal creation\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, ...testMeal }]\n      });\n\n      const response = await request(app)\n        .post('/api/meals')\n        .send(testMeal);\n\n      expect(response.status).toBe(200);\n      expect(response.body.id).toBe(1);\n\n      expect(mockClient.query).toHaveBeenCalledWith(\n        expect.stringContaining('INSERT INTO meals'),\n        expect.arrayContaining([\n          testMeal.name,\n          testMeal.type,\n          expect.any(String), // location\n          testMeal.address,\n          testMeal.guest_count,\n          expect.any(String), // host_id (converted to string)\n          expect.any(String), // date (converted to string)\n          testMeal.visibility,\n          testMeal.description\n        ])\n      );\n    });\n\n    it('should reject meal creation with missing required fields', async () => {\n      delete testMeal.name;\n\n      const response = await request(app)\n        .post('/api/meals')\n        .send(testMeal);\n\n      expect(response.status).toBe(400);\n      expect(response.body.name).toBeDefined();\n    });\n\n    it('should reject meal creation with invalid guest count', async () => {\n      testMeal.guest_count = -1;\n\n      const response = await request(app)\n        .post('/api/meals')\n        .send(testMeal);\n\n      expect(response.status).toBe(400);\n      expect(response.body.guest_count).toBeDefined();\n    });\n  });\n\n  describe('GET /api/meals/:id', () => {\n    it('should return meals for a specific user', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful query\n      mockClient.query.mockResolvedValueOnce({\n        rows: [\n          { id: 1, name: 'Meal 1', host_name: 'User 1' },\n          { id: 2, name: 'Meal 2', host_name: 'User 1' }\n        ]\n      });\n\n      const response = await request(app)\n        .get('/api/meals/1');\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body).toHaveLength(2);\n    });\n  });\n\n  describe('GET /api/meals/info/:id/:userId', () => {\n    it('should return info about a specific meal', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful query\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, name: 'Test Meal', host_name: 'User 1' }]\n      });\n\n      const response = await request(app)\n        .get('/api/meals/info/1/1');\n\n      expect(response.status).toBe(200);\n      expect(response.body[0].id).toBe(1);\n      expect(response.body[0].name).toBe('Test Meal');\n    });\n  });\n\n  describe('PUT /api/meals', () => {\n    it('should update a meal', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful update\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, name: 'Updated Meal', guest_count: 5 }]\n      });\n\n      const response = await request(app)\n        .put('/api/meals')\n        .send({ name: 'Updated Meal', guest_count: 5, id: 1 });\n\n      expect(response.status).toBe(200);\n      expect(response.body.name).toBe('Updated Meal');\n    });\n  });\n\n  describe('DELETE /api/meals/:meal_id', () => {\n    it('should delete a meal', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful deletion\n      mockClient.query.mockResolvedValueOnce({\n        rows: []\n      });\n\n      const response = await request(app)\n        .delete('/api/meals/1')\n        .send({ meal_id: 1 });\n\n      expect(response.status).toBe(201);\n    });\n\n    it('should reject deletion with invalid meal ID', async () => {\n      const response = await request(app)\n        .delete('/api/meals/invalid')\n        .send({ meal_id: 'invalid' });\n\n      expect(response.status).toBe(400);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}