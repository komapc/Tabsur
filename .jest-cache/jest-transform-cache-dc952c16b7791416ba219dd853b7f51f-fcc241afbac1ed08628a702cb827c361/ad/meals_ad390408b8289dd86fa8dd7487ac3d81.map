{"version":3,"names":["pool","require","authenticateJWT","tryAuthenticateJWT","addNotification","express","router","Router","validateMealInput","get","req","response","console","log","SQLquery","client","connect","query","then","resp","json","rows","catch","err","error","status","finally","release","userId","params","id","isNaN","JSON","stringify","meal_id","post","body","image_path","image_id","res","path","meal","errors","isValid","name","type","location","lng","lat","address","guest_count","host_id","date","visibility","description","message","title","icon","click_action","sender","e","put","validateMealUpdate","delete","mealId","stringfy","module","exports"],"sources":["meals.js"],"sourcesContent":["const pool = require('../db.js');\nconst { authenticateJWT, tryAuthenticateJWT } = require('../authenticateJWT.js');\nconst addNotification = require('./notificationsPush');\nconst express = require('express');\nconst router = express.Router();\n// Load input validation;\nconst validateMealInput = require('../../validation/meal');\n// @route GET api/meals/public\n// @desc get public meals for unauthenticated users;\n// @access Public;\nrouter.get('/public', async (req, response) => {\n  console.log('get public meals for unauthenticated users');\n  const SQLquery = `\n  SELECT \n    m.*, \n    u.name AS host_name, \n    u.id AS host_id,\n    0 AS attend_status,\n    (SELECT COUNT(user_id) FROM attends WHERE meal_id=m.id AND status>0) AS Atendee_count\n  FROM meals AS m \n  JOIN users AS u ON m.host_id = u.id\n  WHERE m.date > now()`;\n  console.log(`get public meals, SQLquery: [${SQLquery}]`);\n  const client = await pool.connect();\n  client.query(SQLquery, [])\n    .then(resp => {\n      response.json(resp.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      response.status(500).json(err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n\n// @route GET api/meals/:id\n// @desc get a meal list for a specific user;\n// @access Public;\nrouter.get('/:id', async (req, response) => {\n  const userId = req.params.id;\n  console.log(`get meals for user ${userId}`);\n  if (isNaN(userId)) {\n    console.error('Invalid user ID provided');\n    return response.status(400).json('Invalid user ID');\n  }\n  const SQLquery = `\n  SELECT\n  (SELECT images.path\n    FROM meal_images AS mi, images\n    WHERE mi.meal_id=m.id and images.id=image_id and images.status>=0 limit 1),\n  (((SELECT status AS attend_status FROM attends\n     WHERE  meal_id=m.id AND attends.user_id=$1) UNION\n    (SELECT 0 AS attend_status) ORDER BY attend_status DESC) LIMIT 1),\n    (SELECT count (user_id) AS Atendee_count FROM attends\n    WHERE meal_id=m.id AND status>0),\n  m.*, u.name AS host_name, u.id AS host_id FROM meals AS m JOIN users AS u ON m.host_id = u.id\n  WHERE m.date>now()`;\n  console.log(`get meals for user, SQLquery: [${SQLquery}]`);\n  const client = await pool.connect();\n  client.query(SQLquery, [userId])\n    .then(resp => {\n      response.json(resp.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      response.status(500).json(err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route GET api/meals/info/id;\n// @desc get info about specific meal;\n// @access Public;\nrouter.get('/info/:id/:userId', tryAuthenticateJWT, async (req, response) => {\n  const id = req.params.id;\n  console.log(`get info params ${JSON.stringify(req.params)}.`);\n  const userId = req.params.userId ?? -1;\n  console.log(`get info for meal ${id}, user: ${userId}.`);\n  if (isNaN(id)) {\n    console.error(`Bad meal id: ${id}`);\n    return response.status(500).json('Bad meal id');\n  }\n  const SQLquery = `\n  SELECT meals.*, images.path, users.name AS host_name,\n  (SELECT status AS attend_status FROM attends\n    WHERE  meal_id=$1 AND attends.user_id=$2),\n  (SELECT count (user_id) AS Atendee_count FROM attends\n      WHERE meal_id=$1 AND status>0)\n  FROM meals\n  JOIN meal_images ON meal_images.meal_id = meals.id\n  JOIN images ON meal_images.image_id = images.id\n  JOIN users ON meals.host_id=users.id\n  WHERE   meals.id=$1`;\n  console.log(`get, SQLquery: [${SQLquery}]`);\n  const client = await pool.connect();\n  return client.query(SQLquery, [id, userId])\n    .then(resp => {\n      console.log(`INFO about ${id}: ${JSON.stringify(resp.rows)}.`);\n      return response.json(resp.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      return response.status(500).json(err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route GET api/meals/my;\n// @desc get a list of meals created by me;\n// @access Public;\nrouter.get('/my/:id', authenticateJWT, async (req, response) => {\n  console.log('get my meals by user id: ' + JSON.stringify(req.params));\n  const userId = req.params.id;\n  if (isNaN(userId)) {\n    console.error('error, empty id');\n    response.status(400).json('Error in geting my meals: empty');\n    return;\n  }\n  const SQLquery = `SELECT\n  (SELECT images.path\n    FROM meal_images as mi, images\n    WHERE mi.meal_id=m.id and images.id=image_id and images.status>=0 limit 1),\n  (SELECT count (user_id) AS Atendee_count FROM attends\n    WHERE meal_id=m.id AND status>0),\n  0 as attend_status, m.*, u.name  AS host_name FROM meals AS m JOIN users AS u on m.host_id = u.id\n  WHERE  host_id=$1`;\n  const client = await pool.connect();\n  client.query(SQLquery, [userId])\n    .then(resp => {\n      return response.json(resp.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      return response.status(500).json(err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route GET api/meals/attends;\n// @desc get a list of meals where the user attends;\n// @access Public;\nrouter.get('/attends/:id', authenticateJWT, async (req, response) => {\n  console.log('get meals where user attends: ' + JSON.stringify(req.params));\n  if (isNaN(req.params.id)) {\n    console.log('error, empty id');\n    response.status(400).json('Error in geting attended meals: empty');\n    return;\n  }\n  const SQLquery = `SELECT * FROM (\n  SELECT\n  (SELECT images.path\n    FROM meal_images as mi, images\n    WHERE mi.meal_id=m.id and images.id=image_id and images.status>=0 limit 1),\n      (SELECT count (user_id) AS Atendee_count FROM attends WHERE meal_id=m.id AND status>0),\n      (SELECT status AS attend_status FROM attends\n         WHERE  meal_id=m.id AND attends.user_id=$1),\n      m.*, u.name AS host_name, u.id AS host_id FROM meals AS m JOIN users AS u ON m.host_id = u.id\n    ) AS sel WHERE attend_status > 0`;\n  const client = await pool.connect();\n  client.query(SQLquery, [req.params.id])\n    .then(resp => {\n      return response.json(resp.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      return response.status(500).json(err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route GET api/meals/guests;\n// @desc get a list of users attending a meal;\n// @access Public;\nrouter.get('/guests/:meal_id',\n  //authenticateJWT,  //Paker's request: show guests even when not logged-in;\n  async (req, response) => {\n    console.log(`Get users by meal_id:  ${JSON.stringify(req.params)}`);\n    const meal_id = req.params.meal_id;\n    if (isNaN(meal_id)) {\n      console.error('error, empty id');\n      response.status(400).json('Error in getting my meal: empty id');\n      return;\n    }\n    const SQLquery = `SELECT a.user_id, u.name, a.status FROM attends AS a\n   INNER JOIN users as u ON a.user_id=u.id WHERE meal_id=$1 AND status>0`;\n    console.log(SQLquery);\n    const client = await pool.connect();\n    client.query(SQLquery, [meal_id])\n      .then(resp => {\n        console.error(`Query result: ${JSON.stringify(resp.rows)}`);\n        return response.json(resp.rows);\n      })\n      .catch(err => {\n        console.error(`Failed query: ${err}`);\n        return response.status(500).json(err);\n      })\n      .finally(() => {\n        client.release();\n      });\n  });\n// @route POST api/meals/image;\nrouter.post('/image', authenticateJWT, async (req, response) => {\n  console.log(`query: ${JSON.stringify(req.body)}`);\n  if (!req.body.meal_id) {\n    return response.status(500).json(`Empty input.`);\n  }\n  const meal_id = req.body.meal_id;\n  let image_path = req.body.image_path;\n  const image_id = req.body.image_id;\n  const client = await pool.connect();\n  if (isNaN(image_id) || isNaN(meal_id)) {\n    return response.status(500).json('Bad params: image_id');\n  }\n  const query = `INSERT INTO meal_images (meal_id, image_id) VALUES ($1, $2) RETURNING id`;\n  client.query(query, [meal_id, image_id])\n    .then((res) => {\n      console.log(`insert query done: ${JSON.stringify(res.rows)}`);\n      image_path = res.rows[0].path;\n      return response.status(200).json(res.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      return response.status(500).json('failed to select random image: ' + err);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route POST api/meals/ - create a meal;\nrouter.post('/', authenticateJWT, async (req, response) => {\n  // Form validation;\n  const meal = req.body;\n  const { errors, isValid } = validateMealInput(meal);\n  // Check validation;\n  if (!isValid) {\n    return response.status(400).json(errors);\n  }\n  console.log(`add meal - start, ${JSON.stringify(req.body)}`);\n  const client = await pool.connect();\n  //todo: insert image;\n  const query = `INSERT INTO meals (\n  name, type, location, address, guest_count, host_id, date, visibility, description)\n  VALUES($1, $2, $3, $4, $5, $6, (to_timestamp($7/ 1000.0)), $8, $9) RETURNING id`;\n  console.log(`connected running [${query}]`);\n  return client.query(query,\n    [meal.name, meal.type, `(${meal.location.lng}, ${meal.location.lat})`,\n      meal.address, meal.guest_count, meal.host_id, meal.date, meal.visibility, meal.description])\n    .then(res => {\n      console.log(`query done.`);\n      const message =\n      {\n        title: 'New meal',\n        body: 'A new meal in your areas',\n        icon: 'resources/Message-Bubble-icon.png',\n        click_action: '/Meals/',\n        sender: -1,\n        type: 5\n      };\n      return response.json(res.rows[0]);\n      //TODO: add notification to all followers + people in the area;\n    })\n    .catch(e => {\n      console.error(`Exception catched in creating meal: ${JSON.stringify(e)}`);\n      response.status(500).json(e);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\nrouter.put('/', authenticateJWT, async (req, response) => {\n  // console.error(`Editing meal is not implemented yet ${JSON.stringify(req.body)}`);\n  const meal = req.body;\n\n  // Use the flexible update validation\n  const { validateMealUpdate } = require('../../validation/meal');\n  const { errors, isValid } = validateMealUpdate(meal);\n\n  // Check validation;\n  if (!isValid) {\n    return response.status(400).json(errors);\n  }\n\n  const client = await pool.connect();\n  //todo: insert image;\n  const query = `UPDATE meals\n SET name=$1,  guest_count=$2\n WHERE id=$3`;\n  console.log(`connected running [${query}]`);\n  return client.query(query,\n    [meal.name, meal.guest_count, meal.id])\n    .then(res => {\n      console.log(`query done.`);\n      return response.json(res.rows[0]);\n      //TODO: add notification to all followers + people in the area;\n    })\n    .catch(e => {\n      console.error(`Exception catched in creating meal: ${JSON.stringify(e)}`);\n      response.status(500).json(e);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\n// @route DELETE api/meals/id;\n// @desc delete a meal;\n// @access Public (?);\nrouter.delete('/:meal_id', authenticateJWT, async (req, response) => {\n  const meal = req.body;\n  const mealId = req.params.meal_id;\n  if (isNaN(mealId)) {\n    return response.status(400).json(`mealId: wrong meal id format: ${mealId}.`);\n  }\n  console.log(`delete ${mealId}`);\n  const client = await pool.connect();\n  client.query('DELETE FROM meals WHERE id=$1',\n    [mealId])\n    .then(() => {\n      console.log('deleted.');\n      return response.status(201).json(req.body);\n    })\n    .catch(e => {\n      console.error(`Exception catched: ${JSON.stringfy(e)}`);\n      response.status(500).json(e);\n    })\n    .finally(() => {\n      client.release();\n    });\n});\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}