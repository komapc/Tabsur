fc491566225c14aa904d02776d82ba4b
"use strict";

const Validator = require('validator');
const isEmpty = require('is-empty');
module.exports = function validateRegisterInput(data) {
  const errors = {};

  // Convert empty fields to an empty string so we can use validator functions
  data.name = !isEmpty(data.name) ? data.name : '';
  data.email = !isEmpty(data.email) ? data.email : '';
  data.password = !isEmpty(data.password) ? data.password : '';
  data.password2 = !isEmpty(data.password2) ? data.password2 : '';

  // Name checks
  if (Validator.isEmpty(data.name)) {
    errors.name = 'Name field is required';
  }

  // Email checks
  if (Validator.isEmpty(data.email)) {
    errors.email = 'Email field is required';
  } else if (!Validator.isEmail(data.email)) {
    errors.email = 'Email is invalid';
  }

  // Password checks
  if (Validator.isEmpty(data.password)) {
    errors.password = 'Password field is required';
  }
  if (Validator.isEmpty(data.password2)) {
    errors.password2 = 'Confirm password field is required';
  }
  if (!Validator.isLength(data.password, {
    min: 6,
    max: 30
  })) {
    errors.password = 'Password must be at least 6 characters';
  }
  if (!Validator.equals(data.password, data.password2)) {
    errors.password2 = 'Passwords must match';
  }
  return {
    errors,
    isValid: isEmpty(errors)
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0b3IiLCJyZXF1aXJlIiwiaXNFbXB0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWxpZGF0ZVJlZ2lzdGVySW5wdXQiLCJkYXRhIiwiZXJyb3JzIiwibmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJwYXNzd29yZDIiLCJpc0VtYWlsIiwiaXNMZW5ndGgiLCJtaW4iLCJtYXgiLCJlcXVhbHMiLCJpc1ZhbGlkIl0sInNvdXJjZXMiOlsicmVnaXN0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVmFsaWRhdG9yID0gcmVxdWlyZSgndmFsaWRhdG9yJyk7XG5jb25zdCBpc0VtcHR5ID0gcmVxdWlyZSgnaXMtZW1wdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWxpZGF0ZVJlZ2lzdGVySW5wdXQoZGF0YSkge1xuICBjb25zdCBlcnJvcnMgPSB7fTtcblxuICAvLyBDb252ZXJ0IGVtcHR5IGZpZWxkcyB0byBhbiBlbXB0eSBzdHJpbmcgc28gd2UgY2FuIHVzZSB2YWxpZGF0b3IgZnVuY3Rpb25zXG4gIGRhdGEubmFtZSA9ICFpc0VtcHR5KGRhdGEubmFtZSkgPyBkYXRhLm5hbWUgOiAnJztcbiAgZGF0YS5lbWFpbCA9ICFpc0VtcHR5KGRhdGEuZW1haWwpID8gZGF0YS5lbWFpbCA6ICcnO1xuICBkYXRhLnBhc3N3b3JkID0gIWlzRW1wdHkoZGF0YS5wYXNzd29yZCkgPyBkYXRhLnBhc3N3b3JkIDogJyc7XG4gIGRhdGEucGFzc3dvcmQyID0gIWlzRW1wdHkoZGF0YS5wYXNzd29yZDIpID8gZGF0YS5wYXNzd29yZDIgOiAnJztcblxuICAvLyBOYW1lIGNoZWNrc1xuICBpZiAoVmFsaWRhdG9yLmlzRW1wdHkoZGF0YS5uYW1lKSkge1xuICAgIGVycm9ycy5uYW1lID0gJ05hbWUgZmllbGQgaXMgcmVxdWlyZWQnO1xuICB9XG5cbiAgLy8gRW1haWwgY2hlY2tzXG4gIGlmIChWYWxpZGF0b3IuaXNFbXB0eShkYXRhLmVtYWlsKSkge1xuICAgIGVycm9ycy5lbWFpbCA9ICdFbWFpbCBmaWVsZCBpcyByZXF1aXJlZCc7XG4gIH0gZWxzZSBpZiAoIVZhbGlkYXRvci5pc0VtYWlsKGRhdGEuZW1haWwpKSB7XG4gICAgZXJyb3JzLmVtYWlsID0gJ0VtYWlsIGlzIGludmFsaWQnO1xuICB9XG5cbiAgLy8gUGFzc3dvcmQgY2hlY2tzXG4gIGlmIChWYWxpZGF0b3IuaXNFbXB0eShkYXRhLnBhc3N3b3JkKSkge1xuICAgIGVycm9ycy5wYXNzd29yZCA9ICdQYXNzd29yZCBmaWVsZCBpcyByZXF1aXJlZCc7XG4gIH1cblxuICBpZiAoVmFsaWRhdG9yLmlzRW1wdHkoZGF0YS5wYXNzd29yZDIpKSB7XG4gICAgZXJyb3JzLnBhc3N3b3JkMiA9ICdDb25maXJtIHBhc3N3b3JkIGZpZWxkIGlzIHJlcXVpcmVkJztcbiAgfVxuXG4gIGlmICghVmFsaWRhdG9yLmlzTGVuZ3RoKGRhdGEucGFzc3dvcmQsIHsgbWluOiA2LCBtYXg6IDMwIH0pKSB7XG4gICAgZXJyb3JzLnBhc3N3b3JkID0gJ1Bhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzJztcbiAgfVxuXG4gIGlmICghVmFsaWRhdG9yLmVxdWFscyhkYXRhLnBhc3N3b3JkLCBkYXRhLnBhc3N3b3JkMikpIHtcbiAgICBlcnJvcnMucGFzc3dvcmQyID0gJ1Bhc3N3b3JkcyBtdXN0IG1hdGNoJztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JzLFxuICAgIGlzVmFsaWQ6IGlzRW1wdHkoZXJyb3JzKVxuICB9O1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDdEMsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRW5DRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxxQkFBcUJBLENBQUNDLElBQUksRUFBRTtFQUNwRCxNQUFNQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOztFQUVqQjtFQUNBRCxJQUFJLENBQUNFLElBQUksR0FBRyxDQUFDTixPQUFPLENBQUNJLElBQUksQ0FBQ0UsSUFBSSxDQUFDLEdBQUdGLElBQUksQ0FBQ0UsSUFBSSxHQUFHLEVBQUU7RUFDaERGLElBQUksQ0FBQ0csS0FBSyxHQUFHLENBQUNQLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDRyxLQUFLLENBQUMsR0FBR0gsSUFBSSxDQUFDRyxLQUFLLEdBQUcsRUFBRTtFQUNuREgsSUFBSSxDQUFDSSxRQUFRLEdBQUcsQ0FBQ1IsT0FBTyxDQUFDSSxJQUFJLENBQUNJLFFBQVEsQ0FBQyxHQUFHSixJQUFJLENBQUNJLFFBQVEsR0FBRyxFQUFFO0VBQzVESixJQUFJLENBQUNLLFNBQVMsR0FBRyxDQUFDVCxPQUFPLENBQUNJLElBQUksQ0FBQ0ssU0FBUyxDQUFDLEdBQUdMLElBQUksQ0FBQ0ssU0FBUyxHQUFHLEVBQUU7O0VBRS9EO0VBQ0EsSUFBSVgsU0FBUyxDQUFDRSxPQUFPLENBQUNJLElBQUksQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDaENELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHLHdCQUF3QjtFQUN4Qzs7RUFFQTtFQUNBLElBQUlSLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDSSxJQUFJLENBQUNHLEtBQUssQ0FBQyxFQUFFO0lBQ2pDRixNQUFNLENBQUNFLEtBQUssR0FBRyx5QkFBeUI7RUFDMUMsQ0FBQyxNQUFNLElBQUksQ0FBQ1QsU0FBUyxDQUFDWSxPQUFPLENBQUNOLElBQUksQ0FBQ0csS0FBSyxDQUFDLEVBQUU7SUFDekNGLE1BQU0sQ0FBQ0UsS0FBSyxHQUFHLGtCQUFrQjtFQUNuQzs7RUFFQTtFQUNBLElBQUlULFNBQVMsQ0FBQ0UsT0FBTyxDQUFDSSxJQUFJLENBQUNJLFFBQVEsQ0FBQyxFQUFFO0lBQ3BDSCxNQUFNLENBQUNHLFFBQVEsR0FBRyw0QkFBNEI7RUFDaEQ7RUFFQSxJQUFJVixTQUFTLENBQUNFLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDSyxTQUFTLENBQUMsRUFBRTtJQUNyQ0osTUFBTSxDQUFDSSxTQUFTLEdBQUcsb0NBQW9DO0VBQ3pEO0VBRUEsSUFBSSxDQUFDWCxTQUFTLENBQUNhLFFBQVEsQ0FBQ1AsSUFBSSxDQUFDSSxRQUFRLEVBQUU7SUFBRUksR0FBRyxFQUFFLENBQUM7SUFBRUMsR0FBRyxFQUFFO0VBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDM0RSLE1BQU0sQ0FBQ0csUUFBUSxHQUFHLHdDQUF3QztFQUM1RDtFQUVBLElBQUksQ0FBQ1YsU0FBUyxDQUFDZ0IsTUFBTSxDQUFDVixJQUFJLENBQUNJLFFBQVEsRUFBRUosSUFBSSxDQUFDSyxTQUFTLENBQUMsRUFBRTtJQUNwREosTUFBTSxDQUFDSSxTQUFTLEdBQUcsc0JBQXNCO0VBQzNDO0VBRUEsT0FBTztJQUNMSixNQUFNO0lBQ05VLE9BQU8sRUFBRWYsT0FBTyxDQUFDSyxNQUFNO0VBQ3pCLENBQUM7QUFDSCxDQUFDIiwiaWdub3JlTGlzdCI6W119