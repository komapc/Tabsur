1a6535d8a68975dd3d774c2ba6874c5b
"use strict";

const fcm = require('../firebaseCloudMessages');
const pool = require('../db.js');
const pushNotification = (notification, registration_ids) => {
  return fcm.sendNotification(JSON.stringify({
    notification: notification,
    'registration_ids': registration_ids !== null && registration_ids.length > 0 ? registration_ids.split(';') : ''
  })).then(response => {
    console.log(JSON.stringify(`Got a response from fcm: ${JSON.stringify(response)}`));
    return response;
  }).catch(error => {
    console.error(`Error in sendNotification: ${JSON.stringify(error)}`);
    return error;
  }).finally(() => {
    console.log('pushNotification done.');
  });
};
const addNotificationToDB = async message => {
  //example of param:
  // const message =
  // {
  //   title: 'Attend',
  //   body:  'A user wants to join your meal',
  //   icon: 'resources/Message-Bubble-icon.png',
  //   click_action: '/Meals/',
  //   receiver: attend.user_id,
  //   meal_id:  attend.meal_id,
  //   sender: -1,
  //   type: 5
  // }

  const query = `
  INSERT INTO notifications (meal_id, receiver, message_text, sender, note_type, 
        click_action, icon, title) 
      VALUES (
       $1, $2, $3, $4, $5, $6, $7, $8)

    RETURNING (
            SELECT array_to_string(array_agg(token),';') 
            AS tokens 
            FROM user_tokens
            WHERE user_id=$2 
          )
    `;
  const client = await pool.connect();
  console.log(`Connected.`);
  return client.query(query, [message.meal_id, message.receiver, message.body, message.sender, message.type, message.click_action, message.icon, message.title]).then(resp => {
    console.log(`Message inserted successfully.`);
    console.log(`tokens: ${JSON.stringify(resp.rows)}`);
    return resp;
  }).catch(error => {
    console.error(`error: ${JSON.stringify(error)}`);
    return error;
  }).finally(() => {
    client.release();
  });
};

//add notificatin/message to the DB + push
const addNotification = async notification => {
  return addNotificationToDB(notification).then(resp => {
    const tokens = resp.rows[0].tokens;
    console.log(`Resp tokens: ${JSON.stringify(tokens)}.`);
    return pushNotification(notification, tokens).then(answer => {
      console.log(`Answer: ${JSON.stringify(answer)}.`);
      return answer;
    }).catch(error => {
      console.error(`pushNotification failed: ${JSON.stringify(error)}.`);
    });
  }).catch(error => {
    console.error(`addNotificationToDB failed: ${JSON.stringify(error)}.`);
  });
};
module.exports = addNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmY20iLCJyZXF1aXJlIiwicG9vbCIsInB1c2hOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb24iLCJyZWdpc3RyYXRpb25faWRzIiwic2VuZE5vdGlmaWNhdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZW5ndGgiLCJzcGxpdCIsInRoZW4iLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVycm9yIiwiZmluYWxseSIsImFkZE5vdGlmaWNhdGlvblRvREIiLCJtZXNzYWdlIiwicXVlcnkiLCJjbGllbnQiLCJjb25uZWN0IiwibWVhbF9pZCIsInJlY2VpdmVyIiwiYm9keSIsInNlbmRlciIsInR5cGUiLCJjbGlja19hY3Rpb24iLCJpY29uIiwidGl0bGUiLCJyZXNwIiwicm93cyIsInJlbGVhc2UiLCJhZGROb3RpZmljYXRpb24iLCJ0b2tlbnMiLCJhbnN3ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibm90aWZpY2F0aW9uc1B1c2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmNtID0gcmVxdWlyZSgnLi4vZmlyZWJhc2VDbG91ZE1lc3NhZ2VzJyk7XG5jb25zdCBwb29sID0gcmVxdWlyZSgnLi4vZGIuanMnKTtcblxuY29uc3QgcHVzaE5vdGlmaWNhdGlvbiA9IChub3RpZmljYXRpb24sIHJlZ2lzdHJhdGlvbl9pZHMpID0+IHtcbiAgcmV0dXJuIGZjbS5zZW5kTm90aWZpY2F0aW9uKEpTT04uc3RyaW5naWZ5KHtcbiAgICBub3RpZmljYXRpb246IG5vdGlmaWNhdGlvbixcbiAgICAncmVnaXN0cmF0aW9uX2lkcyc6IHJlZ2lzdHJhdGlvbl9pZHMgIT09IG51bGwgJiYgcmVnaXN0cmF0aW9uX2lkcy5sZW5ndGggPiAwID8gcmVnaXN0cmF0aW9uX2lkcy5zcGxpdCgnOycpIDogJydcbiAgfSkpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYEdvdCBhIHJlc3BvbnNlIGZyb20gZmNtOiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX1gKSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gc2VuZE5vdGlmaWNhdGlvbjogJHtKU09OLnN0cmluZ2lmeShlcnJvcil9YCk7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncHVzaE5vdGlmaWNhdGlvbiBkb25lLicpO1xuICAgIH0pO1xufTtcblxuY29uc3QgYWRkTm90aWZpY2F0aW9uVG9EQiA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG5cbiAgLy9leGFtcGxlIG9mIHBhcmFtOlxuICAvLyBjb25zdCBtZXNzYWdlID1cbiAgLy8ge1xuICAvLyAgIHRpdGxlOiAnQXR0ZW5kJyxcbiAgLy8gICBib2R5OiAgJ0EgdXNlciB3YW50cyB0byBqb2luIHlvdXIgbWVhbCcsXG4gIC8vICAgaWNvbjogJ3Jlc291cmNlcy9NZXNzYWdlLUJ1YmJsZS1pY29uLnBuZycsXG4gIC8vICAgY2xpY2tfYWN0aW9uOiAnL01lYWxzLycsXG4gIC8vICAgcmVjZWl2ZXI6IGF0dGVuZC51c2VyX2lkLFxuICAvLyAgIG1lYWxfaWQ6ICBhdHRlbmQubWVhbF9pZCxcbiAgLy8gICBzZW5kZXI6IC0xLFxuICAvLyAgIHR5cGU6IDVcbiAgLy8gfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gYFxuICBJTlNFUlQgSU5UTyBub3RpZmljYXRpb25zIChtZWFsX2lkLCByZWNlaXZlciwgbWVzc2FnZV90ZXh0LCBzZW5kZXIsIG5vdGVfdHlwZSwgXG4gICAgICAgIGNsaWNrX2FjdGlvbiwgaWNvbiwgdGl0bGUpIFxuICAgICAgVkFMVUVTIChcbiAgICAgICAkMSwgJDIsICQzLCAkNCwgJDUsICQ2LCAkNywgJDgpXG5cbiAgICBSRVRVUk5JTkcgKFxuICAgICAgICAgICAgU0VMRUNUIGFycmF5X3RvX3N0cmluZyhhcnJheV9hZ2codG9rZW4pLCc7JykgXG4gICAgICAgICAgICBBUyB0b2tlbnMgXG4gICAgICAgICAgICBGUk9NIHVzZXJfdG9rZW5zXG4gICAgICAgICAgICBXSEVSRSB1c2VyX2lkPSQyIFxuICAgICAgICAgIClcbiAgICBgO1xuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcbiAgY29uc29sZS5sb2coYENvbm5lY3RlZC5gKTtcbiAgcmV0dXJuIGNsaWVudC5xdWVyeShxdWVyeSxcbiAgICBbbWVzc2FnZS5tZWFsX2lkLFxuICAgICAgbWVzc2FnZS5yZWNlaXZlcixcbiAgICAgIG1lc3NhZ2UuYm9keSxcbiAgICAgIG1lc3NhZ2Uuc2VuZGVyLFxuICAgICAgbWVzc2FnZS50eXBlLFxuICAgICAgbWVzc2FnZS5jbGlja19hY3Rpb24sXG4gICAgICBtZXNzYWdlLmljb24sXG4gICAgICBtZXNzYWdlLnRpdGxlXG4gICAgXSlcbiAgICAudGhlbihyZXNwID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBNZXNzYWdlIGluc2VydGVkIHN1Y2Nlc3NmdWxseS5gKTtcbiAgICAgIGNvbnNvbGUubG9nKGB0b2tlbnM6ICR7SlNPTi5zdHJpbmdpZnkocmVzcC5yb3dzKX1gKTtcbiAgICAgIHJldHVybiByZXNwO1xuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYGVycm9yOiAke0pTT04uc3RyaW5naWZ5KGVycm9yKX1gKTtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNsaWVudC5yZWxlYXNlKCk7XG4gICAgfSk7XG59O1xuXG4vL2FkZCBub3RpZmljYXRpbi9tZXNzYWdlIHRvIHRoZSBEQiArIHB1c2hcbmNvbnN0IGFkZE5vdGlmaWNhdGlvbiA9IGFzeW5jIChub3RpZmljYXRpb24pID0+IHtcbiAgcmV0dXJuIGFkZE5vdGlmaWNhdGlvblRvREIobm90aWZpY2F0aW9uKVxuICAgIC50aGVuKHJlc3AgPT4ge1xuICAgICAgY29uc3QgdG9rZW5zID0gcmVzcC5yb3dzWzBdLnRva2VucztcbiAgICAgIGNvbnNvbGUubG9nKGBSZXNwIHRva2VuczogJHtKU09OLnN0cmluZ2lmeSh0b2tlbnMpfS5gKTtcbiAgICAgIHJldHVybiBwdXNoTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgdG9rZW5zKVxuICAgICAgICAudGhlbihhbnN3ZXIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBBbnN3ZXI6ICR7SlNPTi5zdHJpbmdpZnkoYW5zd2VyKX0uYCk7XG4gICAgICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBwdXNoTm90aWZpY2F0aW9uIGZhaWxlZDogJHtKU09OLnN0cmluZ2lmeShlcnJvcil9LmApO1xuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBhZGROb3RpZmljYXRpb25Ub0RCIGZhaWxlZDogJHtKU09OLnN0cmluZ2lmeShlcnJvcil9LmApO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZGROb3RpZmljYXRpb247Il0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBQy9DLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVoQyxNQUFNRSxnQkFBZ0IsR0FBR0EsQ0FBQ0MsWUFBWSxFQUFFQyxnQkFBZ0IsS0FBSztFQUMzRCxPQUFPTCxHQUFHLENBQUNNLGdCQUFnQixDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztJQUN6Q0osWUFBWSxFQUFFQSxZQUFZO0lBQzFCLGtCQUFrQixFQUFFQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUlBLGdCQUFnQixDQUFDSSxNQUFN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