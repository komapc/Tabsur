{"version":3,"names":["express","require","router","Router","bcrypt","jwt","keys","insertImageIntoDB","pool","validateRegisterInput","validateLoginInput","post","req","response","errors","isValid","body","input","console","error","JSON","stringify","status","json","log","newUser","client","connect","genSalt","err","salt","hash","password","query","name","email","location","address","then","user","catch","code","constraint","finally","release","e","newReq","id","res","rows","undefined","length","row","compare","isMatch","payload","sign","secretOrKey","expiresIn","token","success","passwordincorrect","addAvatar","userId","picture","url","data","newImageId","newUserId","newUserName","addUserQuery","accessToken","get","params","module","exports"],"sources":["users.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst keys = require('../../config/keys');\n//const passport = require('passport');\nconst insertImageIntoDB = require('./utility.js');\nconst pool = require('../db.js');\n// Load input validation;\nconst validateRegisterInput = require('../../validation/register');\nconst validateLoginInput = require('../../validation/login');\n// Load User model;\n//const User = require('../../models/User');\n// @route POST api/users/register;\n// @desc Register user;\n// @access Public;\nrouter.post('/register', async (req, response) => {\n  const { errors, isValid } = validateRegisterInput(req.body);\n  const input = req.body;\n  // Check validation;\n  if (!isValid) {\n    console.error(`Invalid input: ${JSON.stringify(errors)}`);\n    return response.status(400).json(errors);\n  }\n  try {\n    console.log('register.');\n    const newUser = req.body;\n    const client = await pool.connect();\n    console.log('connected');\n    bcrypt.genSalt(10, async (err, salt) => {\n      bcrypt.hash(input.password, salt, async (err, hash) => {\n        if (err) {\n          console.error(`bcrypt failed: ${JSON.stringify(err)}.`);\n          throw err;\n        }\n        client.query(`INSERT INTO users (name, email, password, location, address)\n        VALUES ($1, $2, $3, $4, $5)`,\n        [newUser.name, newUser.email, hash, newUser.location, newUser.address])\n          .then(user => {\n            return response.status(201).json(user);\n          })\n          .catch(err => {\n            console.error(`Insert query failed: ${JSON.stringify(err)}`);\n            // Check if it's a duplicate email error\n            if (err.code === '23505' && err.constraint === 'unique_user_email') {\n              return response.status(400).json({ email: 'Email already exists' });\n            }\n            return response.status(500).json({ error: 'Registration failed' });\n          })\n          .finally(() => {\n            client.release();\n          });\n      });\n    });\n  }\n  catch (e) {\n    console.log('exception catched: ' + e);\n    return response.status(500).json(req.body);\n  }\n});\n// @route POST api/users/login;\n// @desc Login user and return JWT token;\n// @access Public;\nrouter.post('/login', async (req, response) => {\n  // Form validation;\n  const newReq = req.body;\n  const { errors, isValid } = validateLoginInput(req.body);\n  if (!isValid) {\n    console.log(`Invalid input: ${JSON.stringify(errors)}.`);\n    return response.status(400).json(errors);\n  }\n  console.log(`Login: ${newReq.email}.`);\n  const client = await pool.connect();\n  client.query('SELECT id, name, password FROM users WHERE email = $1 OR id = $2 LIMIT 1',\n    [newReq.email, newReq.id])\n    .then(res => {\n    // no record found\n      if (res.rows === undefined || res.rows.length === 0) {\n        console.error(`error: user [${newReq.email}] doesn't exist.`);\n        errors.email = 'email not found';\n        return response.status(500).json(errors);\n      }\n      // Check password;\n      const row = res.rows[0];\n      console.log('res: ' + JSON.stringify(res));\n      console.log('row: ' + JSON.stringify(row));\n      bcrypt.compare(newReq.password, row.password).then(isMatch => {\n        if (isMatch) {\n        // User matched;\n        // Create JWT Payload;\n          const payload = {\n            id: row.id,\n            name: row.name\n          };\n          // Sign token;\n          jwt.sign(\n            payload,\n            keys.secretOrKey,\n            {\n              expiresIn: 31556926 // 1 year in seconds\n            },\n            (err, token) => {\n              response.json({\n                success: true,\n                token: 'Bearer ' + token\n              });\n            }\n          );\n        } else {\n          return response\n            .status(400)\n            .json({ passwordincorrect: 'Password incorrect' });\n        }\n      })\n        .catch(err => {\n          console.error('bcrypt error:' + err);\n          return response.status(500).json(newReq);\n        })\n        .finally(() => client.release());\n    });\n});\n//add avatar path to images and update user_images table;\nconst addAvatar = async (client, userId, picture) => {\n  console.log(`Add avatar: ${JSON.stringify(picture)}`);\n  const query = `\n  INSERT INTO user_images\n  (image_id, user_id)\n  SELECT $1, $2\n  WHERE\n  NOT EXISTS (\n  SELECT id FROM user_images WHERE image_id = $1 and user_id=$2\n  )`;\n  const url = picture.data.url;\n  return insertImageIntoDB(url, userId)\n    .then((newImageId) => {\n      console.log(`Add avatar got a image id ${newImageId}.`);\n      if (newImageId > 0) {\n        return client.query(query, [newImageId, userId]).finally(() => {\n          client.release();\n        });\n      }\n      else {\n        console.error(`Add avatar got a negative image id ${newImageId}.`);\n      }\n    })\n    .catch((err) => {\n      console.error(`Add avatar error: ${err}.`);\n    });\n};\n// @route POST api/users/loginFB;\n// @desc Login user and return JWT token;\n// @access Public;\nrouter.post('/loginFB', async (req, response) => {\n  // Form validation;\n  const newReq = req.body;\n  if (!newReq || !newReq.name) {\n    console.error(`Bad request to login with facebook: ${JSON.stringify(newReq)}`);\n    return response.status(403);\n  }\n  let newUserId = -1;\n  const newUserName = newReq.name;\n  console.log(`Login with facebook: ${JSON.stringify(newReq)}`);\n  const client = await pool.connect();\n  client.query('SELECT * FROM users WHERE email = $1 LIMIT 1', [newReq.email])\n    .then(res => {\n    // no record found, new FB user\n      if (res.rows === undefined || res.rows.length === 0) {\n        console.log(`fb user doesn't exist (${newReq.email}), adding to the DB`);\n        const addUserQuery = `INSERT INTO users (name, email, password, location, address)\n      VALUES ($1, $2, $3, $4, $5) RETURNING id`;\n        return client.query(addUserQuery,\n          [newReq.name, newReq.email, newReq.accessToken, '(0,0)', ''])\n          .then(user => {\n          // return response.status(201).json(user);\n            console.log(`New record created: ${JSON.stringify(user)}`);\n            newUserId = user;\n          })\n          .catch(err => {\n            console.error(`Inserting user failed:  ${err}`);\n            return response.status(500).json(err);\n          })\n          .finally(() => {\n          // client.release();\n          });\n      }\n      else {\n        newUserId = res.rows[0].id;\n        console.log(`Known user logged-in via fb: ${newReq.email}`);\n      }\n      // Check password;\n      // const row = res.rows[0];\n      const payload = {\n        id: newUserId,\n        name: newUserName\n      };\n      // Sign token;\n      jwt.sign(\n        payload,\n        keys.secretOrKey,\n        {\n          expiresIn: 31556926 // 1 year in seconds\n        },\n        (err, token) => {\n          response.json({\n            success: true,\n            token: 'Bearer ' + token\n          });\n        }\n      );\n    })\n    .catch(err => {\n      console.error('fb user error:' + err);\n      return response.status(500).json(newReq);\n    })\n    .finally(async () => {\n      await addAvatar(client, newUserId, newReq.picture);\n      client.release();\n    });\n});\n// @route GET api/users;\n// @desc get public user properties;\n// @access Public;\nrouter.get('/:id', async (req, response) => {\n  // Find the user;\n  const client = await pool.connect();\n  // .catch(err => {\n  //   console.error(err);\n  //   return response.status(500).json(err);\n  // });\n  return client.query(`\n  SELECT\n  id,\n  name,\n  100 AS rate,\n  (SELECT COUNT (1) FROM meals WHERE host_id = $1) AS meals_created,\n  (SELECT count(1) AS following FROM follow WHERE follower=$1),\n  (SELECT count(1) AS followers FROM follow WHERE followie=$1),\n  (SELECT COUNT (1) FROM meals WHERE host_id = $1 AND date > CURRENT_TIMESTAMP) AS active_meals\n  FROM users WHERE id = $1\n  `, [req.params.id])\n    .then(user => {\n      response.json(user.rows);\n    })\n    .catch(err => {\n      console.error(err);\n      return response.status(500).json('No user');\n    })\n    .finally(() => {\n      client.release();\n    });\n});\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}