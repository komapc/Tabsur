ba3a8d7d973d024761bfabbd3d685335
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _api = require("@react-google-maps/api");
var _reactGeocode = _interopRequireDefault(require("react-geocode"));
var _reactGooglePlacesAutocomplete = _interopRequireDefault(require("react-google-places-autocomplete"));
var _back_arrow = _interopRequireDefault(require("../../resources/back_arrow.svg"));
var _material = require("@mui/material");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// Make API key configurable - in production this should come from environment variables
const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;
// const MAPS_LIBRARIES = ['places'];
const MAP_CONTAINER_STYLE = {
  height: '90vh',
  width: '100%'
};

// Only set API key if it's available
if (GOOGLE_MAPS_API_KEY && GOOGLE_MAPS_API_KEY !== "YOUR_API_KEY_HERE") {
  _reactGeocode.default.setApiKey(GOOGLE_MAPS_API_KEY);
}
const MapLocationSelector = ({
  defaultLocation,
  address,
  handleLocationUpdate,
  handleExit
}) => {
  const [currentAddress, setCurrentAddress] = (0, _react.useState)(address);
  const [mapError, setMapError] = (0, _react.useState)(null);
  const [, setIsLoading] = (0, _react.useState)(false);
  const [billingError, setBillingError] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    setIsLoading(true);

    // Check if we're in a secure context (HTTPS or localhost)
    const isSecureContext = window.isSecureContext || window.location.protocol === 'https:' || window.location.hostname === 'localhost';
    if (!isSecureContext) {
      console.warn("Geolocation requires HTTPS. Using default location.");
      setIsLoading(false);
      // Set a default location (e.g., city center)
      const defaultCoords = {
        lng: 0,
        lat: 0
      };
      handleLocationUpdate({
        defaultLocation: defaultCoords,
        address: "Default Location",
        location: defaultCoords
      });
      return;
    }
    if (!("geolocation" in navigator)) {
      console.warn("Geolocation not supported in this browser");
      setIsLoading(false);
      // Set a default location
      const defaultCoords = {
        lng: 0,
        lat: 0
      };
      handleLocationUpdate({
        defaultLocation: defaultCoords,
        address: "Default Location",
        location: defaultCoords
      });
      return;
    }
    navigator.geolocation.getCurrentPosition(position => {
      const coords = {
        lng: position.coords.longitude,
        lat: position.coords.latitude
      };
      if (GOOGLE_MAPS_API_KEY && GOOGLE_MAPS_API_KEY !== "YOUR_API_KEY_HERE") {
        _reactGeocode.default.fromLatLng(coords.lat, coords.lng).then(response => {
          const addr = response.results[0]?.formatted_address;
          if (addr) {
            handleLocationUpdate({
              defaultLocation: coords,
              address: addr,
              location: coords
            });
          }
          setIsLoading(false);
        }).catch(error => {
          console.warn("Geocoding error:", error);
          if (error.message && error.message.includes("billing")) {
            setBillingError(true);
          }
          setIsLoading(false);
        });
      } else {
        setIsLoading(false);
      }
    }, error => {
      console.warn("Geolocation error:", error);
      setIsLoading(false);

      // Handle specific geolocation errors
      if (error.code === 1) {
        console.warn("Geolocation permission denied or HTTPS required");
        // Set a default location
        const defaultCoords = {
          lng: 0,
          lat: 0
        };
        handleLocationUpdate({
          defaultLocation: defaultCoords,
          address: "Default Location",
          location: defaultCoords
        });
      }
    });
  }, [handleLocationUpdate]);

  // Removed unused marker drag handler to satisfy CI lint rules

  const handleAddressSelect = selected => {
    const addr = selected.description;
    setCurrentAddress(addr);
    if (GOOGLE_MAPS_API_KEY && GOOGLE_MAPS_API_KEY !== "YOUR_API_KEY_HERE") {
      _reactGeocode.default.fromAddress(addr).then(response => {
        const {
          lat,
          lng
        } = response.results[0].geometry.location;
        const newLocation = {
          lng,
          lat
        };
        handleLocationUpdate({
          address: addr,
          location: newLocation
        });
        handleExit();
      }).catch(error => {
        console.warn("Geocoding error:", error);
        if (error.message && error.message.includes("billing")) {
          setBillingError(true);
          setMapError("Google Maps API billing is not enabled. Please contact your administrator.");
        } else {
          setMapError("Could not get coordinates for this address. Please try dragging the marker manually.");
        }
      });
    } else {
      setMapError("Google Maps API key not configured. Please contact support.");
    }
  };
  const onMapLoad = map => {
    // Map loaded successfully
    setMapError(null);
    setBillingError(false);
  };

  // Removed unused onMapError handler

  // Check if API key is properly configured
  const isApiKeyValid = GOOGLE_MAPS_API_KEY && GOOGLE_MAPS_API_KEY !== "YOUR_API_KEY_HERE" && GOOGLE_MAPS_API_KEY.length > 20;
  if (!isApiKeyValid) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
      p: 2,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Alert, {
        severity: "warning",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "body2",
          children: "Google Maps API key is not properly configured. Location selection will be limited. Please contact your administrator to configure the Google Maps API key."
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        mt: 2,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "h6",
          children: "Manual Location Input"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "body2",
          children: "You can still manually enter your address in the text field above."
        })]
      })]
    });
  }
  if (billingError) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
      p: 2,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Alert, {
        severity: "error",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "body2",
          children: "Google Maps API billing is not enabled for this project. Location selection features are currently unavailable."
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        mt: 2,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "h6",
          children: "Manual Location Input"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          variant: "body2",
          children: "You can still manually enter your address in the text field above."
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
          variant: "outlined",
          onClick: handleExit,
          sx: {
            mt: 2
          },
          children: "Continue with Manual Input"
        })]
      })]
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "autocomplete-bar",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
        onClick: handleExit,
        className: "autocomplete-icon",
        src: _back_arrow.default,
        alt: "Close map"
      })
    }), mapError && /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Alert, {
      severity: "error",
      onClose: () => setMapError(null),
      children: mapError
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "autocomplete-bar",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactGooglePlacesAutocomplete.default, {
        className: "autocomplete-span",
        onSelect: handleAddressSelect,
        initialValue: currentAddress,
        query: {
          language: 'en'
        }
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_api.GoogleMap, {
      zoom: 10,
      center: defaultLocation,
      mapContainerStyle: MAP_CONTAINER_STYLE,
      onLoad: onMapLoad
    })]
  });
};
var _default = exports.default = MapLocationSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,