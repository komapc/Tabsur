{"version":3,"names":["DOMPurify","require","sanitizeValue","value","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","Array","isArray","map","sanitized","key","val","Object","entries","sanitizeInput","req","res","next","body","query","params","error","console","status","json","message","validateInput","maxLength","maxArrayLength","length","module","exports"],"sources":["sanitization.js"],"sourcesContent":["const DOMPurify = require('isomorphic-dompurify');\n\n/**\n * Recursively sanitize nested objects and arrays\n */\nconst sanitizeValue = (value) => {\n  if (typeof value === 'string') {\n    return DOMPurify.sanitize(value, {\n      ALLOWED_TAGS: [], // No HTML tags allowed\n      ALLOWED_ATTR: []  // No attributes allowed\n    });\n  } else if (Array.isArray(value)) {\n    return value.map(sanitizeValue);\n  } else if (value && typeof value === 'object') {\n    const sanitized = {};\n    for (const [key, val] of Object.entries(value)) {\n      sanitized[key] = sanitizeValue(val);\n    }\n    return sanitized;\n  }\n  return value;\n};\n\n/**\n * Input sanitization middleware\n * Prevents XSS attacks and sanitizes user inputs\n */\nconst sanitizeInput = (req, res, next) => {\n  try {\n    // Sanitize body parameters\n    if (req.body) {\n      req.body = sanitizeValue(req.body);\n    }\n\n    // Sanitize query parameters\n    if (req.query) {\n      req.query = sanitizeValue(req.query);\n    }\n\n    // Sanitize URL parameters\n    if (req.params) {\n      req.params = sanitizeValue(req.params);\n    }\n\n    next();\n  } catch (error) {\n    console.error('Sanitization error:', error);\n    res.status(400).json({\n      error: 'Invalid input detected',\n      message: 'Input contains potentially harmful content'\n    });\n  }\n};\n\n/**\n * Enhanced input validation middleware\n * Validates input length and format\n */\nconst validateInput = (req, res, next) => {\n  try {\n    const maxLength = 1000; // Maximum input length\n    const maxArrayLength = 100; // Maximum array length\n\n    // Validate body\n    if (req.body) {\n      for (const [key, value] of Object.entries(req.body)) {\n        if (typeof value === 'string' && value.length > maxLength) {\n          return res.status(400).json({\n            error: 'Input too long',\n            message: `${key} exceeds maximum length of ${maxLength} characters`\n          });\n        }\n\n        if (Array.isArray(value) && value.length > maxArrayLength) {\n          return res.status(400).json({\n            error: 'Array too large',\n            message: `${key} exceeds maximum array size of ${maxArrayLength} items`\n          });\n        }\n      }\n    }\n\n    // Validate query parameters\n    if (req.query) {\n      for (const [key, value] of Object.entries(req.query)) {\n        if (typeof value === 'string' && value.length > maxLength) {\n          return res.status(400).json({\n            error: 'Query parameter too long',\n            message: `${key} exceeds maximum length of ${maxLength} characters`\n          });\n        }\n      }\n    }\n\n    next();\n  } catch (error) {\n    console.error('Validation error:', error);\n    res.status(400).json({\n      error: 'Input validation failed',\n      message: 'Invalid input format detected'\n    });\n  }\n};\n\nmodule.exports = {\n  sanitizeInput,\n  validateInput\n};\n"],"mappings":"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","ignoreList":[]}