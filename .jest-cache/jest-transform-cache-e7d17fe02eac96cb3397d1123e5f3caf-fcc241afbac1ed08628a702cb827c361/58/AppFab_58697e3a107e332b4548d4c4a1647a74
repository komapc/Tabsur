784c3e2f83a11bdd68eca5bfb364bbc6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _styles = require("@mui/styles");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _Fab = _interopRequireDefault(require("@mui/material/Fab"));
var _Add = _interopRequireDefault(require("@mui/icons-material/Add"));
var _Zoom = _interopRequireDefault(require("@mui/material/Zoom"));
var _jsxRuntime = require("react/jsx-runtime");
const useStyles = (0, _styles.makeStyles)(theme => ({
  root: {
    display: 'flex',
    '& > *': {
      margin: theme?.spacing ? theme.spacing(1) : '8px'
    }
  },
  wrapper: {
    position: "fixed",
    bottom: "48px",
    zIndex: 1001,
    marginLeft: 'auto',
    marginRight: 'auto',
    left: 0,
    right: 0,
    textAlign: 'center'
  },
  fab: {
    backgroundColor: "#dc004e",
    color: "White",
    border: "solid",
    borderWidth: "1px",
    borderColor: "#dc004e",
    '&:hover': {
      backgroundColor: "#b8003e"
    }
  }
}));
const AppFab = /*#__PURE__*/_react.default.memo(props => {
  const classes = useStyles();
  const history = (0, _reactRouterDom.useHistory)();
  const handleClick = () => {
    console.log('FAB clicked - navigating to create meal');
    history.push('/createMealWizard');
  };
  console.log('AppFab render - visible:', props.visible);

  // Sanity checks
  const isVisible = props.visible !== false; // Default to true if undefined
  console.log('AppFab sanity check - visible prop:', props.visible, 'computed isVisible:', isVisible);
  try {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classes.root,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: classes.wrapper,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Zoom.default, {
          in: isVisible,
          timeout: 300,
          style: {
            transitionDelay: isVisible ? '0ms' : '300ms'
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Fab.default, {
            className: classes.fab,
            onClick: handleClick,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Add.default, {})
          })
        })
      })
    });
  } catch (error) {
    console.error('AppFab render error:', error);
    // Fallback without transition
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classes.root,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: classes.wrapper,
        children: isVisible && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Fab.default, {
          className: classes.fab,
          onClick: handleClick,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Add.default, {})
        })
      })
    });
  }
});
const mapStateToProps = state => ({
  auth: state.auth,
  //If it is not used - remove
  notificationsCount: state.notificationsCount,
  //If it is not used - remove
  messagesCount: state.messagesCount //If it is not used - remove
});
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps)(AppFab);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,