d9373e4c0c27ee9125bbc396d715c425
"use strict";

const express = require('express');
const pool = require('../db.js');

/// utils

const insertImageIntoDB = async (imagePath, uploader) => {
  console.log(`Inserting image [${JSON.stringify(imagePath)}]`);
  //console.log(`Inserting image [${JSON.stringify(imagePath)}] from user [${JSON.stringify(uploader)}]`);
  if (isNaN(uploader) || imagePath === '') {
    console.error(`Cannot insert image: empty data ${imagePath} / ${uploader}.`);
    return -3;
  }
  const client = await pool.connect();
  const query = `INSERT INTO images (path, status, uploader)
  VALUES($1, 1, $2) RETURNING id`;
  console.log(`connected running [${query}]`);
  let result = '-2';
  return client.query(query, [imagePath, Number(uploader)]).then(res => {
    console.log(`insertImageIntoDB: image inserted, id=${JSON.stringify(res.rows[0])}.`);
    result = res.rows[0].id;
    return result;
  }).catch(e => {
    console.error(`Inserting image into db failed; exception catched: ${e}`);
    //response.status(500).json(e);
    result = -1;
    return result;
  }).finally(() => client.release());
};
module.exports = insertImageIntoDB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsInBvb2wiLCJpbnNlcnRJbWFnZUludG9EQiIsImltYWdlUGF0aCIsInVwbG9hZGVyIiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc05hTiIsImVycm9yIiwiY2xpZW50IiwiY29ubmVjdCIsInF1ZXJ5IiwicmVzdWx0IiwiTnVtYmVyIiwidGhlbiIsInJlcyIsInJvd3MiLCJpZCIsImNhdGNoIiwiZSIsImZpbmFsbHkiLCJyZWxlYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInV0aWxpdHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHBvb2wgPSByZXF1aXJlKCcuLi9kYi5qcycpO1xuXG4vLy8gdXRpbHNcblxuY29uc3QgaW5zZXJ0SW1hZ2VJbnRvREIgPSBhc3luYyAoaW1hZ2VQYXRoLCB1cGxvYWRlcikgPT4ge1xuICBjb25zb2xlLmxvZyhgSW5zZXJ0aW5nIGltYWdlIFske0pTT04uc3RyaW5naWZ5KGltYWdlUGF0aCl9XWApO1xuICAvL2NvbnNvbGUubG9nKGBJbnNlcnRpbmcgaW1hZ2UgWyR7SlNPTi5zdHJpbmdpZnkoaW1hZ2VQYXRoKX1dIGZyb20gdXNlciBbJHtKU09OLnN0cmluZ2lmeSh1cGxvYWRlcil9XWApO1xuICBpZiAoaXNOYU4odXBsb2FkZXIpIHx8IGltYWdlUGF0aCA9PT0gJycpXG4gIHtcbiAgICBjb25zb2xlLmVycm9yKGBDYW5ub3QgaW5zZXJ0IGltYWdlOiBlbXB0eSBkYXRhICR7aW1hZ2VQYXRofSAvICR7dXBsb2FkZXJ9LmApO1xuICAgIHJldHVybiAtMztcbiAgfVxuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcbiAgY29uc3QgcXVlcnkgPSBgSU5TRVJUIElOVE8gaW1hZ2VzIChwYXRoLCBzdGF0dXMsIHVwbG9hZGVyKVxuICBWQUxVRVMoJDEsIDEsICQyKSBSRVRVUk5JTkcgaWRgO1xuICBjb25zb2xlLmxvZyhgY29ubmVjdGVkIHJ1bm5pbmcgWyR7cXVlcnl9XWApO1xuXG4gIGxldCAgcmVzdWx0ID0gJy0yJztcbiAgcmV0dXJuIGNsaWVudC5xdWVyeShxdWVyeSxcbiAgICBbaW1hZ2VQYXRoLCBOdW1iZXIodXBsb2FkZXIpXSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgY29uc29sZS5sb2coYGluc2VydEltYWdlSW50b0RCOiBpbWFnZSBpbnNlcnRlZCwgaWQ9JHtKU09OLnN0cmluZ2lmeShyZXMucm93c1swXSl9LmApO1xuICAgICAgcmVzdWx0ID0gcmVzLnJvd3NbMF0uaWQ7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pXG4gICAgLmNhdGNoKGUgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgSW5zZXJ0aW5nIGltYWdlIGludG8gZGIgZmFpbGVkOyBleGNlcHRpb24gY2F0Y2hlZDogJHtlfWApO1xuICAgICAgLy9yZXNwb25zZS5zdGF0dXMoNTAwKS5qc29uKGUpO1xuICAgICAgcmVzdWx0ID0gLTE7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCk9PmNsaWVudC5yZWxlYXNlKCkpO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEltYWdlSW50b0RCOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBVSxDQUFDOztBQUVoQzs7QUFFQSxNQUFNRSxpQkFBaUIsR0FBRyxNQUFBQSxDQUFPQyxTQUFTLEVBQUVDLFFBQVEsS0FBSztFQUN2REMsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0wsU0FBUyxDQUFDLEdBQUcsQ0FBQztFQUM3RDtFQUNBLElBQUlNLEtBQUssQ0FBQ0wsUUFBUSxDQUFDLElBQUlELFNBQVMsS0FBSyxFQUFFLEVBQ3ZDO0lBQ0VFLE9BQU8sQ0FBQ0ssS0FBSyxDQUFDLG1DQUFtQ1AsU0FBUyxNQUFNQyxRQUFRLEdBQUcsQ0FBQztJQUM1RSxPQUFPLENBQUMsQ0FBQztFQUNYO0VBQ0EsTUFBTU8sTUFBTSxHQUFHLE1BQU1WLElBQUksQ0FBQ1csT0FBTyxDQUFDLENBQUM7RUFDbkMsTUFBTUMsS0FBSyxHQUFHO0FBQ2hCLGlDQUFpQztFQUMvQlIsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0JBQXNCTyxLQUFLLEdBQUcsQ0FBQztFQUUzQyxJQUFLQyxNQUFNLEdBQUcsSUFBSTtFQUNsQixPQUFPSCxNQUFNLENBQUNFLEtBQUssQ0FBQ0EsS0FBSyxFQUN2QixDQUFDVixTQUFTLEVBQUVZLE1BQU0sQ0FBQ1gsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUM3QlksSUFBSSxDQUFDQyxHQUFHLElBQUk7SUFDWFosT0FBTyxDQUFDQyxHQUFHLENBQUMseUNBQXlDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1MsR0FBRyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ3BGSixNQUFNLEdBQUdHLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxFQUFFO0lBQ3ZCLE9BQU9MLE1BQU07RUFDZixDQUFDLENBQUMsQ0FDRE0sS0FBSyxDQUFDQyxDQUFDLElBQUk7SUFDVmhCLE9BQU8sQ0FBQ0ssS0FBSyxDQUFDLHNEQUFzRFcsQ0FBQyxFQUFFLENBQUM7SUFDeEU7SUFDQVAsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLE9BQU9BLE1BQU07RUFDZixDQUFDLENBQUMsQ0FDRFEsT0FBTyxDQUFDLE1BQUlYLE1BQU0sQ0FBQ1ksT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBR0RDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsaUJBQWlCIiwiaWdub3JlTGlzdCI6W119