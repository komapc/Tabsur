6e099cad9243f0f2cf452c4b12883914
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.env = exports.default = void 0;
const config = {};
const env = exports.env = process.env.NODE_ENV || 'development';

// Build the current origin for reference
const host = document.location.protocol + "//" + document.location.host;
console.log(`host: ${host}`);
console.log("Config.js, env = " + JSON.stringify(env));

// Prefer explicitly provided API host variables
const rawExplicitApiUrl = process.env.REACT_APP_SERVER_HOST || process.env.REACT_APP_API_URL || '';
// Normalize: strip any trailing '/api' because our code appends '/api/...'
const explicitApiUrl = rawExplicitApiUrl.replace(/\/+api\/?$/i, '');
switch (env) {
  case "development":
  case undefined:
  case null:
    {
      const devHost = process.env.REACT_APP_SERVER_HOST_DEV || process.env.REACT_APP_SERVER_HOST || explicitApiUrl;
      config.SERVER_HOST = devHost && devHost.trim() ? devHost : 'http://localhost:5000';
      break;
    }
  case 'production':
  default:
    {
      // When serving locally (localhost:3000), prefer local API unless explicitly overridden
      const isLocalFrontend = /localhost|127\.0\.0\.1/i.test(host);
      if (isLocalFrontend) {
        const localPref = explicitApiUrl || 'http://localhost:5000';
        config.SERVER_HOST = localPref;
      } else {
        // In production we MUST talk to the API subdomain, not the frontend origin
        // Priority: REACT_APP_SERVER_HOST > REACT_APP_API_URL > default api domain
        config.SERVER_HOST = explicitApiUrl || 'https://api.bemyguest.dedyn.io';
      }
    }
}
console.log(`Using API base: ${config.SERVER_HOST}`);

// Google Maps configuration
config.GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;
config.GOOGLE_OAUTH_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;
var _default = exports.default = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWciLCJlbnYiLCJleHBvcnRzIiwicHJvY2VzcyIsIk5PREVfRU5WIiwiaG9zdCIsImRvY3VtZW50IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicmF3RXhwbGljaXRBcGlVcmwiLCJSRUFDVF9BUFBfU0VSVkVSX0hPU1QiLCJSRUFDVF9BUFBfQVBJX1VSTCIsImV4cGxpY2l0QXBpVXJsIiwicmVwbGFjZSIsInVuZGVmaW5lZCIsImRldkhvc3QiLCJSRUFDVF9BUFBfU0VSVkVSX0hPU1RfREVWIiwiU0VSVkVSX0hPU1QiLCJ0cmltIiwiaXNMb2NhbEZyb250ZW5kIiwidGVzdCIsImxvY2FsUHJlZiIsIkdPT0dMRV9NQVBTX0FQSV9LRVkiLCJSRUFDVF9BUFBfR09PR0xFX01BUFNfQVBJX0tFWSIsIkdPT0dMRV9PQVVUSF9DTElFTlRfSUQiLCJSRUFDVF9BUFBfR09PR0xFX0NMSUVOVF9JRCIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7fTtcblxuZXhwb3J0IGNvbnN0IGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG5cbi8vIEJ1aWxkIHRoZSBjdXJyZW50IG9yaWdpbiBmb3IgcmVmZXJlbmNlXG5jb25zdCBob3N0ID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBkb2N1bWVudC5sb2NhdGlvbi5ob3N0O1xuY29uc29sZS5sb2coYGhvc3Q6ICR7aG9zdH1gKTtcblxuY29uc29sZS5sb2coXCJDb25maWcuanMsIGVudiA9IFwiICsgSlNPTi5zdHJpbmdpZnkoZW52KSk7XG5cbi8vIFByZWZlciBleHBsaWNpdGx5IHByb3ZpZGVkIEFQSSBob3N0IHZhcmlhYmxlc1xuY29uc3QgcmF3RXhwbGljaXRBcGlVcmwgPSBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0VSVkVSX0hPU1QgfHwgcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0FQSV9VUkwgfHwgJyc7XG4vLyBOb3JtYWxpemU6IHN0cmlwIGFueSB0cmFpbGluZyAnL2FwaScgYmVjYXVzZSBvdXIgY29kZSBhcHBlbmRzICcvYXBpLy4uLidcbmNvbnN0IGV4cGxpY2l0QXBpVXJsID0gcmF3RXhwbGljaXRBcGlVcmwucmVwbGFjZSgvXFwvK2FwaVxcLz8kL2ksICcnKTtcblxuc3dpdGNoIChlbnYpIHtcbiAgY2FzZSBcImRldmVsb3BtZW50XCI6XG4gIGNhc2UgdW5kZWZpbmVkOlxuICBjYXNlIG51bGw6IHtcbiAgICBjb25zdCBkZXZIb3N0ID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NFUlZFUl9IT1NUX0RFViB8fCBwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0VSVkVSX0hPU1QgfHwgZXhwbGljaXRBcGlVcmw7XG4gICAgY29uZmlnLlNFUlZFUl9IT1NUID0gKGRldkhvc3QgJiYgZGV2SG9zdC50cmltKCkpID8gZGV2SG9zdCA6ICdodHRwOi8vbG9jYWxob3N0OjUwMDAnO1xuICAgIGJyZWFrO1xuICB9XG4gIGNhc2UgJ3Byb2R1Y3Rpb24nOlxuICBkZWZhdWx0OiB7XG4gICAgLy8gV2hlbiBzZXJ2aW5nIGxvY2FsbHkgKGxvY2FsaG9zdDozMDAwKSwgcHJlZmVyIGxvY2FsIEFQSSB1bmxlc3MgZXhwbGljaXRseSBvdmVycmlkZGVuXG4gICAgY29uc3QgaXNMb2NhbEZyb250ZW5kID0gL2xvY2FsaG9zdHwxMjdcXC4wXFwuMFxcLjEvaS50ZXN0KGhvc3QpO1xuICAgIGlmIChpc0xvY2FsRnJvbnRlbmQpIHtcbiAgICAgIGNvbnN0IGxvY2FsUHJlZiA9IGV4cGxpY2l0QXBpVXJsIHx8ICdodHRwOi8vbG9jYWxob3N0OjUwMDAnO1xuICAgICAgY29uZmlnLlNFUlZFUl9IT1NUID0gbG9jYWxQcmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJbiBwcm9kdWN0aW9uIHdlIE1VU1QgdGFsayB0byB0aGUgQVBJIHN1YmRvbWFpbiwgbm90IHRoZSBmcm9udGVuZCBvcmlnaW5cbiAgICAgIC8vIFByaW9yaXR5OiBSRUFDVF9BUFBfU0VSVkVSX0hPU1QgPiBSRUFDVF9BUFBfQVBJX1VSTCA+IGRlZmF1bHQgYXBpIGRvbWFpblxuICAgICAgY29uZmlnLlNFUlZFUl9IT1NUID0gZXhwbGljaXRBcGlVcmwgfHwgJ2h0dHBzOi8vYXBpLmJlbXlndWVzdC5kZWR5bi5pbyc7XG4gICAgfVxuICB9XG59XG5cbmNvbnNvbGUubG9nKGBVc2luZyBBUEkgYmFzZTogJHtjb25maWcuU0VSVkVSX0hPU1R9YCk7XG5cbi8vIEdvb2dsZSBNYXBzIGNvbmZpZ3VyYXRpb25cbmNvbmZpZy5HT09HTEVfTUFQU19BUElfS0VZID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0dPT0dMRV9NQVBTX0FQSV9LRVk7XG5jb25maWcuR09PR0xFX09BVVRIX0NMSUVOVF9JRCA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9HT09HTEVfQ0xJRU5UX0lEO1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFFVixNQUFNQyxHQUFHLEdBQUFDLE9BQUEsQ0FBQUQsR0FBQSxHQUFHRSxPQUFPLENBQUNGLEdBQUcsQ0FBQ0csUUFBUSxJQUFJLGFBQWE7O0FBRXhEO0FBQ0EsTUFBTUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLFFBQVEsQ0FBQ0MsUUFBUSxHQUFHLElBQUksR0FBR0YsUUFBUSxDQUFDQyxRQUFRLENBQUNGLElBQUk7QUFDdkVJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFNBQVNMLElBQUksRUFBRSxDQUFDO0FBRTVCSSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBR0MsSUFBSSxDQUFDQyxTQUFTLENBQUNYLEdBQUcsQ0FBQyxDQUFDOztBQUV0RDtBQUNBLE1BQU1ZLGlCQUFpQixHQUFHVixPQUFPLENBQUNGLEdBQUcsQ0FBQ2EscUJBQXFCLElBQUlYLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDYyxpQkFBaUIsSUFBSSxFQUFFO0FBQ2xHO0FBQ0EsTUFBTUMsY0FBYyxHQUFHSCxpQkFBaUIsQ0FBQ0ksT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7QUFFbkUsUUFBUWhCLEdBQUc7RUFDVCxLQUFLLGFBQWE7RUFDbEIsS0FBS2lCLFNBQVM7RUFDZCxLQUFLLElBQUk7SUFBRTtNQUNULE1BQU1DLE9BQU8sR0FBR2hCLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDbUIseUJBQXlCLElBQUlqQixPQUFPLENBQUNGLEdBQUcsQ0FBQ2EscUJBQXFCLElBQUlFLGNBQWM7TUFDNUdoQixNQUFNLENBQUNxQixXQUFXLEdBQUlGLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxJQUFJLENBQUMsQ0FBQyxHQUFJSCxPQUFPLEdBQUcsdUJBQXVCO01BQ3BGO0lBQ0Y7RUFDQSxLQUFLLFlBQVk7RUFDakI7SUFBUztNQUNQO01BQ0EsTUFBTUksZUFBZSxHQUFHLHlCQUF5QixDQUFDQyxJQUFJLENBQUNuQixJQUFJLENBQUM7TUFDNUQsSUFBSWtCLGVBQWUsRUFBRTtRQUNuQixNQUFNRSxTQUFTLEdBQUdULGNBQWMsSUFBSSx1QkFBdUI7UUFDM0RoQixNQUFNLENBQUNxQixXQUFXLEdBQUdJLFNBQVM7TUFDaEMsQ0FBQyxNQUFNO1FBQ0w7UUFDQTtRQUNBekIsTUFBTSxDQUFDcUIsV0FBVyxHQUFHTCxjQUFjLElBQUksZ0NBQWdDO01BQ3pFO0lBQ0Y7QUFDRjtBQUVBUCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUJWLE1BQU0sQ0FBQ3FCLFdBQVcsRUFBRSxDQUFDOztBQUVwRDtBQUNBckIsTUFBTSxDQUFDMEIsbUJBQW1CLEdBQUd2QixPQUFPLENBQUNGLEdBQUcsQ0FBQzBCLDZCQUE2QjtBQUN0RTNCLE1BQU0sQ0FBQzRCLHNCQUFzQixHQUFHekIsT0FBTyxDQUFDRixHQUFHLENBQUM0QiwwQkFBMEI7QUFBQyxJQUFBQyxRQUFBLEdBQUE1QixPQUFBLENBQUE2QixPQUFBLEdBRXhEL0IsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==