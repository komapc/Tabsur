{"version":3,"names":["validateRegisterInput","require","validateLoginInput","validateMealInput","describe","it","input","name","email","password","password2","errors","isValid","expect","toBe","toBeDefined","description","date","Date","now","address","location","lng","lat","host_id","guest_count","image_id","type","visibility"],"sources":["validation.test.js"],"sourcesContent":["const validateRegisterInput = require('../../validation/register');\nconst validateLoginInput = require('../../validation/login');\nconst validateMealInput = require('../../validation/meal');\n\ndescribe('Validation Functions - Negative Tests', () => {\n  describe('validateRegisterInput', () => {\n    it('should reject empty name', () => {\n      const input = {\n        name: '',\n        email: 'test@example.com',\n        password: 'password123',\n        password2: 'password123'\n      };\n\n      const { errors, isValid } = validateRegisterInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.name).toBeDefined();\n    });\n\n    it('should reject invalid email format', () => {\n      const input = {\n        name: 'Test User',\n        email: 'invalid-email',\n        password: 'password123',\n        password2: 'password123'\n      };\n\n      const { errors, isValid } = validateRegisterInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.email).toBeDefined();\n    });\n\n    it('should reject short password', () => {\n      const input = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: '123',\n        password2: '123'\n      };\n\n      const { errors, isValid } = validateRegisterInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.password).toBeDefined();\n    });\n\n    it('should reject mismatched passwords', () => {\n      const input = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123',\n        password2: 'differentpassword'\n      };\n\n      const { errors, isValid } = validateRegisterInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.password2).toBeDefined();\n    });\n\n    it('should reject missing required fields', () => {\n      const input = {\n        name: 'Test User'\n        // Missing email, password, password2\n      };\n\n      const { errors, isValid } = validateRegisterInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.email).toBeDefined();\n      expect(errors.password).toBeDefined();\n      expect(errors.password2).toBeDefined();\n    });\n  });\n\n  describe('validateLoginInput', () => {\n    it('should reject empty email', () => {\n      const input = {\n        email: '',\n        password: 'password123'\n      };\n\n      const { errors, isValid } = validateLoginInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.email).toBeDefined();\n    });\n\n    it('should reject invalid email format', () => {\n      const input = {\n        email: 'invalid-email',\n        password: 'password123'\n      };\n\n      const { errors, isValid } = validateLoginInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.email).toBeDefined();\n    });\n\n    it('should reject empty password', () => {\n      const input = {\n        email: 'test@example.com',\n        password: ''\n      };\n\n      const { errors, isValid } = validateLoginInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.password).toBeDefined();\n    });\n\n    it('should reject missing fields', () => {\n      const input = {\n        email: 'test@example.com'\n        // Missing password\n      };\n\n      const { errors, isValid } = validateLoginInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.password).toBeDefined();\n    });\n  });\n\n  describe('validateMealInput', () => {\n    it('should reject empty meal name', () => {\n      const input = {\n        name: '',\n        description: 'Test description',\n        date: Date.now() + 86400000,\n        address: '123 Test Street',\n        location: { lng: 34.808, lat: 32.09 },\n        host_id: 1,\n        guest_count: 3,\n        image_id: -1,\n        type: 1,\n        visibility: 1\n      };\n\n      const { errors, isValid } = validateMealInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.name).toBeDefined();\n    });\n\n    it('should accept empty address (now optional)', () => {\n      const input = {\n        name: 'Test Meal',\n        description: 'Test description',\n        date: Date.now() + 86400000,\n        address: '',\n        location: { lng: 34.808, lat: 32.09 },\n        host_id: 1,\n        guest_count: 3,\n        image_id: -1,\n        type: 1,\n        visibility: 1\n      };\n\n      const { errors, isValid } = validateMealInput(input);\n\n      // Address is now optional, so this should pass\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject negative guest count', () => {\n      const input = {\n        name: 'Test Meal',\n        description: 'Test description',\n        date: Date.now() + 86400000,\n        address: '123 Test Street',\n        location: { lng: 34.808, lat: 32.09 },\n        host_id: 1,\n        guest_count: -1,\n        image_id: -1,\n        type: 1,\n        visibility: 1\n      };\n\n      const { errors, isValid } = validateMealInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.guest_count).toBeDefined();\n    });\n\n    it('should reject non-numeric guest count', () => {\n      const input = {\n        name: 'Test Meal',\n        description: 'Test description',\n        date: Date.now() + 86400000,\n        address: '123 Test Street',\n        location: { lng: 34.808, lat: 32.09 },\n        host_id: 1,\n        guest_count: 'not-a-number',\n        image_id: -1,\n        type: 1,\n        visibility: 1\n      };\n\n      const { errors, isValid } = validateMealInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.guest_count).toBeDefined();\n    });\n\n    it('should reject missing required fields', () => {\n      const input = {\n        name: 'Test Meal'\n        // Missing description, date, location, host_id, guest_count\n      };\n\n      const { errors, isValid } = validateMealInput(input);\n\n      expect(isValid).toBe(false);\n      expect(errors.description).toBeDefined();\n      expect(errors.date).toBeDefined();\n      expect(errors.location).toBeDefined();\n      expect(errors.host_id).toBeDefined();\n      expect(errors.guest_count).toBeDefined();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}