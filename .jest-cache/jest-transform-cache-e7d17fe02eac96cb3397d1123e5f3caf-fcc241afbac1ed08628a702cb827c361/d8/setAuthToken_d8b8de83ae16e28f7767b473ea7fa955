6376c930c8f3921c495fd7ef3042f8ea
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runServerSanityCheck = exports.default = exports.clearInvalidAuth = exports.cleanupToken = exports.checkAuthState = void 0;
var _axios = _interopRequireDefault(require("axios"));
// Add request interceptor to log all outgoing requests
_axios.default.interceptors.request.use(config => {
  console.log("🚀 Outgoing request:", {
    method: config.method?.toUpperCase(),
    url: config.url,
    headers: config.headers,
    auth: config.headers?.Authorization ? `${config.headers.Authorization.substring(0, 20)}...` : 'None',
    fullAuth: config.headers?.Authorization || 'None'
  });
  return config;
}, error => {
  console.error("❌ Request interceptor error:", error);
  return Promise.reject(error);
});

// Add response interceptor to log all responses
_axios.default.interceptors.response.use(response => {
  console.log("✅ Response received:", {
    status: response.status,
    url: response.config.url,
    // Do not log full response bodies to avoid leaking data
    size: typeof response.data === 'string' ? response.data.length : 'object'
  });
  return response;
}, error => {
  console.error("❌ Response error:", {
    status: error.response?.status,
    url: error.config?.url,
    message: error.message,
    // Redact response payloads
    data: typeof error.response?.data === 'string' ? `[redacted:${error.response?.data.length}]` : '[redacted]'
  });

  // Handle JWT signature errors by clearing invalid tokens
  if (error.response?.status === 403 && error.response?.data?.name === 'JsonWebTokenError') {
    console.warn("🔐 JWT signature error detected - clearing invalid token");
    localStorage.removeItem("jwtToken");
    delete _axios.default.defaults.headers.common["Authorization"];

    // Redirect to login if we're not already there
    if (window.location.pathname !== '/login' && window.location.pathname !== '/') {
      window.location.href = '/login';
    }
  }
  return Promise.reject(error);
});
const setAuthToken = token => {
  if (token) {
    // Apply authorization token to every request if logged in
    // Check if token already has "Bearer " prefix to avoid double prefixing
    const authHeader = token.startsWith('Bearer ') ? token : `Bearer ${token}`;
    _axios.default.defaults.headers.common["Authorization"] = authHeader;
    console.log("🔑 Auth token set");
  } else {
    // Delete auth header
    delete _axios.default.defaults.headers.common["Authorization"];
    console.log("🗑️ Auth token removed");
  }
};

// Function to check current auth state
const checkAuthState = () => {
  const token = localStorage.getItem("jwtToken");
  const headers = _axios.default.defaults.headers.common;
  console.log("🔍 Auth State Check:", {
    localStorageToken: token ? `${token.substring(0, 20)}...` : 'None',
    axiosHeaders: headers,
    authorizationHeader: headers.Authorization || 'None'
  });
  return {
    hasToken: !!token,
    hasHeader: !!headers.Authorization,
    token: token,
    header: headers.Authorization
  };
};

// Function to run sanity check on server
exports.checkAuthState = checkAuthState;
const runServerSanityCheck = async () => {
  try {
    const response = await _axios.default.get('http://localhost:5000/sanity-check');
    console.log("🔍 Server Sanity Check:", response.data);
    return response.data;
  } catch (error) {
    console.error("❌ Server Sanity Check Failed:", error);
    return null;
  }
};

// Function to clear invalid authentication
exports.runServerSanityCheck = runServerSanityCheck;
const clearInvalidAuth = () => {
  console.log("🧹 Clearing invalid authentication");
  localStorage.removeItem("jwtToken");
  delete _axios.default.defaults.headers.common["Authorization"];
  window.location.href = '/login';
};

// Function to clean up malformed tokens
exports.clearInvalidAuth = clearInvalidAuth;
const cleanupToken = () => {
  const token = localStorage.getItem("jwtToken");
  if (token && token.startsWith('Bearer ')) {
    // Remove the "Bearer " prefix if it exists
    const cleanToken = token.replace('Bearer ', '');
    localStorage.setItem("jwtToken", cleanToken);
    console.log("🧹 Cleaned up malformed token, removed 'Bearer ' prefix");
    return cleanToken;
  }
  return token;
};
exports.cleanupToken = cleanupToken;
var _default = exports.default = setAuthToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,