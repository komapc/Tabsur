f2064ca8cec4f6256eb92e5f894c7b59
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _Button = _interopRequireDefault(require("@mui/material/Button"));
var _axios = _interopRequireDefault(require("axios"));
var _config = _interopRequireDefault(require("../../../config"));
var _image_placeholder = _interopRequireDefault(require("../../../resources/wizard/image_placeholder.png"));
var _browserImageCompression = _interopRequireDefault(require("browser-image-compression"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ImageStep = props => {
  const [state, updateState] = (0, _react.useState)({
    "file": _image_placeholder.default
  });
  const getImage = e => {
    const files = e.target.files;
    try {
      const fileObj = files[0];
      console.log(`Uploading ${fileObj}.`);
      if (!fileObj) {
        console.error(`Error uploading ${fileObj}.`);
      }
      const path = URL.createObjectURL(fileObj);
      console.log(`Path: ${JSON.stringify(path)}`);
      updateState({
        "file": path
      });
      submitFile(e, fileObj);
    } catch (err) {
      console.error(err);
    }
  };
  const submitFile = (event, file) => {
    event.preventDefault();
    var options = {
      maxSizeMB: 1,
      maxWidthOrHeight: 1920,
      useWebWorker: true
    };
    props.setUploadingState(true);
    (0, _browserImageCompression.default)(event.target.files[0], options).then(function (compressedFile) {
      const formData = new FormData();
      formData.append('file', compressedFile);
      formData.append('uploader', props.form.host_id);
      _axios.default.post(`${_config.default.SERVER_HOST}/api/images/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(response => {
        console.log(response.data);
        props.update({
          "id": "image_id",
          "value": response.data
        });
      }).catch(function (error) {
        console.error(error);
      }).finally(() => {
        props.setUploadingState(false);
      });
    }).catch(function (error) {
      console.error(error);
    });
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "wizard-container",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
      style: {
        marginLeft: "40px"
      },
      children: "Image"
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "wizard-image-placeholder-containter",
      style: {
        backgroundImage: `url(${state.file})`,
        backgroundRepeat: "no-repeat",
        backgroundSize: "cover",
        backgroundPosition: "center",
        width: "300px",
        height: "300px",
        border: "solid"
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Button.default, {
        variant: "outlined",
        component: "label",
        children: ["Add Photo ", /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
          type: "file",
          accept: "image/*",
          style: {
            display: "none"
          },
          onChange: getImage
        })]
      })
    })]
  });
};
var _default = exports.default = ImageStep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,