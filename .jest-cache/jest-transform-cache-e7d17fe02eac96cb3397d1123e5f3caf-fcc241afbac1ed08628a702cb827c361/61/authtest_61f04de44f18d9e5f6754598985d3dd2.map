{"version":3,"names":["_getJestObj","mock","connect","jest","fn","mockResolvedValue","query","release","genSalt","rounds","cb","Promise","resolve","hash","password","salt","compare","require","request","express","bodyParser","users","app","use","urlencoded","extended","json","describe","testUser","beforeEach","name","email","password2","location","address","it","pool","mockClient","mockResolvedValueOnce","rows","id","response","post","send","expect","status","toBe","toHaveBeenCalledWith","stringContaining","arrayContaining","any","String","body","toBeDefined"],"sources":["auth.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// Import your routes\nconst users = require('../routes/api/users');\n\n// Mock the database\njest.mock('../routes/db.js', () => ({\n  connect: jest.fn().mockResolvedValue({\n    query: jest.fn(),\n    release: jest.fn()\n  })\n}));\n\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n// Mock bcrypt with callback-compatible implementations\njest.mock('bcryptjs', () => ({\n  genSalt: jest.fn((rounds, cb) => {\n    if (typeof cb === 'function') {\n      cb(null, 'mocksalt');\n    }\n    return Promise.resolve('mocksalt');\n  }),\n  hash: jest.fn((password, salt, cb) => {\n    if (typeof cb === 'function') {\n      cb(null, 'mockhash');\n    }\n    return Promise.resolve('mockhash');\n  }),\n  compare: jest.fn(() => Promise.resolve(true))\n}));\napp.use('/api/users', users);\n\ndescribe('Authentication API', () => {\n  let testUser;\n\n  beforeEach(() => {\n    testUser = {\n      name: 'Test User',\n      email: 'test@example.com',\n      password: 'password123',\n      password2: 'password123', // API expects password2\n      location: '40.7128,-74.0060', // New York coordinates\n      address: '123 Test Street, New York, NY'\n    };\n  });\n\n  describe('POST /api/users/register', () => {\n    it('should register a new user with valid data', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock successful registration\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, ...testUser }]\n      });\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser);\n\n      expect(response.status).toBe(201);\n      expect(mockClient.query).toHaveBeenCalledWith(\n        expect.stringContaining('INSERT INTO users'),\n        expect.arrayContaining([\n          testUser.name,\n          testUser.email,\n          expect.any(String), // hashed password\n          expect.any(String), // location\n          testUser.address\n        ])\n      );\n    });\n\n    it('should reject registration with invalid email', async () => {\n      testUser.email = 'invalid-email';\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser);\n\n      expect(response.status).toBe(400);\n      expect(response.body.email).toBeDefined();\n    });\n\n    it('should reject registration with mismatched passwords', async () => {\n      testUser.password2 = 'different-password';\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser);\n\n      expect(response.status).toBe(400);\n      expect(response.body.password2).toBeDefined();\n    });\n\n    it('should reject registration with short password', async () => {\n      testUser.password = '123';\n      testUser.password2 = '123';\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser);\n\n      expect(response.status).toBe(400);\n      expect(response.body.password).toBeDefined();\n    });\n  });\n\n  describe('POST /api/users/login', () => {\n    it('should login with valid credentials', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n\n      // Mock user found in database\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{\n          id: 1,\n          email: testUser.email,\n          password: '$2a$10$mockHashedPassword', // This would be a real bcrypt hash\n          name: testUser.name\n        }]\n      });\n\n      // Mock bcrypt comparison (would need to mock bcrypt module)\n      const response = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password\n        });\n\n      // Query should include the email; additional params are allowed\n      expect(mockClient.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        expect.arrayContaining([testUser.email])\n      );\n    });\n\n    it('should reject login with invalid email', async () => {\n      const response = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: 'invalid-email',\n          password: testUser.password\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.email).toBeDefined();\n    });\n\n    it('should reject login with empty password', async () => {\n      const response = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: testUser.email,\n          password: ''\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.password).toBeDefined();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}