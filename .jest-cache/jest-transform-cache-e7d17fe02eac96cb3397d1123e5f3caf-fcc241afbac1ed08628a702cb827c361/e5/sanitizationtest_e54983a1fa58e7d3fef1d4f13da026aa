46e367348829032ebedd9d125f4faff4
"use strict";

const request = require('supertest');
const express = require('express');
const bodyParser = require('body-parser');

// Mock the middleware
const {
  sanitizeInput,
  validateInput
} = require('../../middleware/sanitization');
describe('Input Sanitization Middleware', () => {
  let app;
  beforeEach(() => {
    app = express();
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true
    }));

    // Test endpoint
    app.post('/test', sanitizeInput, validateInput, (req, res) => {
      res.json({
        body: req.body,
        query: req.query,
        params: req.params
      });
    });
  });
  describe('sanitizeInput', () => {
    it('should sanitize XSS attempts in body', async () => {
      const maliciousInput = {
        name: '<script>alert("xss")</script>',
        description: '<img src="x" onerror="alert(1)">',
        email: 'test@example.com<script>alert("xss")</script>'
      };
      const response = await request(app).post('/test').send(maliciousInput).expect(200);
      expect(response.body.body.name).not.toContain('<script>');
      expect(response.body.body.description).not.toContain('<img');
      expect(response.body.body.email).not.toContain('<script>');
    });
    it('should sanitize XSS attempts in query parameters', async () => {
      const response = await request(app).post('/test?name=<script>alert("xss")</script>&desc=<img src="x" onerror="alert(1)">').expect(200);
      expect(response.body.query.name).not.toContain('<script>');
      expect(response.body.query.desc).not.toContain('<img');
    });
    it('should handle non-string inputs gracefully', async () => {
      const mixedInput = {
        name: '<script>alert("xss")</script>',
        count: 42,
        active: true,
        tags: ['tag1', 'tag2']
      };
      const response = await request(app).post('/test').send(mixedInput).expect(200);
      expect(response.body.body.name).not.toContain('<script>');
      expect(response.body.body.count).toBe(42);
      expect(response.body.body.active).toBe(true);
      expect(response.body.body.tags).toEqual(['tag1', 'tag2']);
    });
    it('should handle empty inputs', async () => {
      const response = await request(app).post('/test').send({}).expect(200);
      expect(response.body.body).toEqual({});
    });
  });
  describe('validateInput', () => {
    it('should reject inputs that are too long', async () => {
      const longInput = {
        name: 'a'.repeat(1001) // Exceeds maxLength of 1000
      };
      const response = await request(app).post('/test').send(longInput).expect(400);
      expect(response.body.error).toBe('Input too long');
      expect(response.body.message).toContain('name exceeds maximum length');
    });
    it('should reject arrays that are too large', async () => {
      const largeArray = {
        tags: Array(101).fill('tag') // Exceeds maxArrayLength of 100
      };
      const response = await request(app).post('/test').send(largeArray).expect(400);
      expect(response.body.error).toBe('Array too large');
      expect(response.body.message).toContain('tags exceeds maximum array size');
    });
    it('should accept valid inputs within limits', async () => {
      const validInput = {
        name: 'a'.repeat(500),
        // Within limit
        tags: Array(50).fill('tag'),
        // Within limit
        description: 'Valid description'
      };
      const response = await request(app).post('/test').send(validInput).expect(200);
      expect(response.body.body).toEqual(validInput);
    });
    it('should handle query parameters that are too long', async () => {
      const longQuery = 'a'.repeat(1001);
      const response = await request(app).post(`/test?param=${longQuery}`).expect(400);
      expect(response.body.error).toBe('Query parameter too long');
      expect(response.body.message).toContain('param exceeds maximum length');
    });
  });
  describe('Integration', () => {
    it('should sanitize and validate inputs together', async () => {
      // Create input that will still be too long even after XSS sanitization
      const maliciousInput = {
        name: '<script>alert("xss")</script>' + 'a'.repeat(1001),
        // XSS + exceeds 1000 limit
        description: '<img src="x" onerror="alert(1)">'
      };
      const response = await request(app).post('/test').send(maliciousInput).expect(400); // Should fail validation after sanitization

      expect(response.body.error).toBe('Input too long');
      expect(response.body.message).toContain('name exceeds maximum length');
    });
    it('should handle complex nested objects', async () => {
      const complexInput = {
        user: {
          name: '<script>alert("xss")</script>',
          profile: {
            bio: '<img src="x" onerror="alert(1)">'
          }
        },
        settings: {
          theme: 'dark',
          notifications: true
        }
      };
      const response = await request(app).post('/test').send(complexInput).expect(200);

      // Should sanitize nested strings - DOMPurify removes all HTML tags
      expect(response.body.body.user.name).toBe('alert("xss")'); // Only text content remains
      expect(response.body.body.user.profile.bio).toBe(''); // Empty string after sanitization

      // Should preserve non-string values
      expect(response.body.body.settings.theme).toBe('dark');
      expect(response.body.body.settings.notifications).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cHJlc3MiLCJib2R5UGFyc2VyIiwic2FuaXRpemVJbnB1dCIsInZhbGlkYXRlSW5wdXQiLCJkZXNjcmliZSIsImFwcCIsImJlZm9yZUVhY2giLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicG9zdCIsInJlcSIsInJlcyIsImJvZHkiLCJxdWVyeSIsInBhcmFtcyIsIml0IiwibWFsaWNpb3VzSW5wdXQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJlbWFpbCIsInJlc3BvbnNlIiwic2VuZCIsImV4cGVjdCIsIm5vdCIsInRvQ29udGFpbiIsImRlc2MiLCJtaXhlZElucHV0IiwiY291bnQiLCJhY3RpdmUiLCJ0YWdzIiwidG9CZSIsInRvRXF1YWwiLCJsb25nSW5wdXQiLCJyZXBlYXQiLCJlcnJvciIsIm1lc3NhZ2UiLCJsYXJnZUFycmF5IiwiQXJyYXkiLCJmaWxsIiwidmFsaWRJbnB1dCIsImxvbmdRdWVyeSIsImNvbXBsZXhJbnB1dCIsInVzZXIiLCJwcm9maWxlIiwiYmlvIiwic2V0dGluZ3MiLCJ0aGVtZSIsIm5vdGlmaWNhdGlvbnMiXSwic291cmNlcyI6WyJzYW5pdGl6YXRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbi8vIE1vY2sgdGhlIG1pZGRsZXdhcmVcbmNvbnN0IHsgc2FuaXRpemVJbnB1dCwgdmFsaWRhdGVJbnB1dCB9ID0gcmVxdWlyZSgnLi4vLi4vbWlkZGxld2FyZS9zYW5pdGl6YXRpb24nKTtcblxuZGVzY3JpYmUoJ0lucHV0IFNhbml0aXphdGlvbiBNaWRkbGV3YXJlJywgKCkgPT4ge1xuICBsZXQgYXBwO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFwcCA9IGV4cHJlc3MoKTtcbiAgICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuICAgIC8vIFRlc3QgZW5kcG9pbnRcbiAgICBhcHAucG9zdCgnL3Rlc3QnLCBzYW5pdGl6ZUlucHV0LCB2YWxpZGF0ZUlucHV0LCAocmVxLCByZXMpID0+IHtcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgYm9keTogcmVxLmJvZHksXG4gICAgICAgIHF1ZXJ5OiByZXEucXVlcnksXG4gICAgICAgIHBhcmFtczogcmVxLnBhcmFtc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzYW5pdGl6ZUlucHV0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2FuaXRpemUgWFNTIGF0dGVtcHRzIGluIGJvZHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtYWxpY2lvdXNJbnB1dCA9IHtcbiAgICAgICAgbmFtZTogJzxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzxpbWcgc3JjPVwieFwiIG9uZXJyb3I9XCJhbGVydCgxKVwiPicsXG4gICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbTxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4nXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL3Rlc3QnKVxuICAgICAgICAuc2VuZChtYWxpY2lvdXNJbnB1dClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5Lm5hbWUpLm5vdC50b0NvbnRhaW4oJzxzY3JpcHQ+Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5LmRlc2NyaXB0aW9uKS5ub3QudG9Db250YWluKCc8aW1nJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5LmVtYWlsKS5ub3QudG9Db250YWluKCc8c2NyaXB0PicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSBYU1MgYXR0ZW1wdHMgaW4gcXVlcnkgcGFyYW1ldGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvdGVzdD9uYW1lPTxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4mZGVzYz08aW1nIHNyYz1cInhcIiBvbmVycm9yPVwiYWxlcnQoMSlcIj4nKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnF1ZXJ5Lm5hbWUpLm5vdC50b0NvbnRhaW4oJzxzY3JpcHQ+Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5xdWVyeS5kZXNjKS5ub3QudG9Db250YWluKCc8aW1nJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBub24tc3RyaW5nIGlucHV0cyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWl4ZWRJbnB1dCA9IHtcbiAgICAgICAgbmFtZTogJzxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD4nLFxuICAgICAgICBjb3VudDogNDIsXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgdGFnczogWyd0YWcxJywgJ3RhZzInXVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy90ZXN0JylcbiAgICAgICAgLnNlbmQobWl4ZWRJbnB1dClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5Lm5hbWUpLm5vdC50b0NvbnRhaW4oJzxzY3JpcHQ+Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5LmNvdW50KS50b0JlKDQyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmJvZHkuYWN0aXZlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYm9keS50YWdzKS50b0VxdWFsKFsndGFnMScsICd0YWcyJ10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgaW5wdXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy90ZXN0JylcbiAgICAgICAgLnNlbmQoe30pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYm9keSkudG9FcXVhbCh7fSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZUlucHV0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmVqZWN0IGlucHV0cyB0aGF0IGFyZSB0b28gbG9uZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxvbmdJbnB1dCA9IHtcbiAgICAgICAgbmFtZTogJ2EnLnJlcGVhdCgxMDAxKSAvLyBFeGNlZWRzIG1heExlbmd0aCBvZiAxMDAwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL3Rlc3QnKVxuICAgICAgICAuc2VuZChsb25nSW5wdXQpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ0lucHV0IHRvbyBsb25nJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0NvbnRhaW4oJ25hbWUgZXhjZWVkcyBtYXhpbXVtIGxlbmd0aCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgYXJyYXlzIHRoYXQgYXJlIHRvbyBsYXJnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxhcmdlQXJyYXkgPSB7XG4gICAgICAgIHRhZ3M6IEFycmF5KDEwMSkuZmlsbCgndGFnJykgLy8gRXhjZWVkcyBtYXhBcnJheUxlbmd0aCBvZiAxMDBcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvdGVzdCcpXG4gICAgICAgIC5zZW5kKGxhcmdlQXJyYXkpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ0FycmF5IHRvbyBsYXJnZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCd0YWdzIGV4Y2VlZHMgbWF4aW11bSBhcnJheSBzaXplJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFjY2VwdCB2YWxpZCBpbnB1dHMgd2l0aGluIGxpbWl0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkSW5wdXQgPSB7XG4gICAgICAgIG5hbWU6ICdhJy5yZXBlYXQoNTAwKSwgLy8gV2l0aGluIGxpbWl0XG4gICAgICAgIHRhZ3M6IEFycmF5KDUwKS5maWxsKCd0YWcnKSwgLy8gV2l0aGluIGxpbWl0XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVmFsaWQgZGVzY3JpcHRpb24nXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL3Rlc3QnKVxuICAgICAgICAuc2VuZCh2YWxpZElucHV0KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmJvZHkpLnRvRXF1YWwodmFsaWRJbnB1dCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBxdWVyeSBwYXJhbWV0ZXJzIHRoYXQgYXJlIHRvbyBsb25nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG9uZ1F1ZXJ5ID0gJ2EnLnJlcGVhdCgxMDAxKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoYC90ZXN0P3BhcmFtPSR7bG9uZ1F1ZXJ5fWApXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ1F1ZXJ5IHBhcmFtZXRlciB0b28gbG9uZycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdwYXJhbSBleGNlZWRzIG1heGltdW0gbGVuZ3RoJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNhbml0aXplIGFuZCB2YWxpZGF0ZSBpbnB1dHMgdG9nZXRoZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgaW5wdXQgdGhhdCB3aWxsIHN0aWxsIGJlIHRvbyBsb25nIGV2ZW4gYWZ0ZXIgWFNTIHNhbml0aXphdGlvblxuICAgICAgY29uc3QgbWFsaWNpb3VzSW5wdXQgPSB7XG4gICAgICAgIG5hbWU6ICc8c2NyaXB0PmFsZXJ0KFwieHNzXCIpPC9zY3JpcHQ+JyArICdhJy5yZXBlYXQoMTAwMSksIC8vIFhTUyArIGV4Y2VlZHMgMTAwMCBsaW1pdFxuICAgICAgICBkZXNjcmlwdGlvbjogJzxpbWcgc3JjPVwieFwiIG9uZXJyb3I9XCJhbGVydCgxKVwiPidcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvdGVzdCcpXG4gICAgICAgIC5zZW5kKG1hbGljaW91c0lucHV0KVxuICAgICAgICAuZXhwZWN0KDQwMCk7IC8vIFNob3VsZCBmYWlsIHZhbGlkYXRpb24gYWZ0ZXIgc2FuaXRpemF0aW9uXG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVycm9yKS50b0JlKCdJbnB1dCB0b28gbG9uZycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCduYW1lIGV4Y2VlZHMgbWF4aW11bSBsZW5ndGgnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbXBsZXggbmVzdGVkIG9iamVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb21wbGV4SW5wdXQgPSB7XG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBuYW1lOiAnPHNjcmlwdD5hbGVydChcInhzc1wiKTwvc2NyaXB0PicsXG4gICAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgICAgYmlvOiAnPGltZyBzcmM9XCJ4XCIgb25lcnJvcj1cImFsZXJ0KDEpXCI+J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICB0aGVtZTogJ2RhcmsnLFxuICAgICAgICAgIG5vdGlmaWNhdGlvbnM6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy90ZXN0JylcbiAgICAgICAgLnNlbmQoY29tcGxleElucHV0KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIFNob3VsZCBzYW5pdGl6ZSBuZXN0ZWQgc3RyaW5ncyAtIERPTVB1cmlmeSByZW1vdmVzIGFsbCBIVE1MIHRhZ3NcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmJvZHkudXNlci5uYW1lKS50b0JlKCdhbGVydChcInhzc1wiKScpOyAvLyBPbmx5IHRleHQgY29udGVudCByZW1haW5zXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5ib2R5LnVzZXIucHJvZmlsZS5iaW8pLnRvQmUoJycpOyAvLyBFbXB0eSBzdHJpbmcgYWZ0ZXIgc2FuaXRpemF0aW9uXG5cbiAgICAgIC8vIFNob3VsZCBwcmVzZXJ2ZSBub24tc3RyaW5nIHZhbHVlc1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYm9keS5zZXR0aW5ncy50aGVtZSkudG9CZSgnZGFyaycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuYm9keS5zZXR0aW5ncy5ub3RpZmljYXRpb25zKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNwQyxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDOztBQUV6QztBQUNBLE1BQU07RUFBRUcsYUFBYTtFQUFFQztBQUFjLENBQUMsR0FBR0osT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBRWpGSyxRQUFRLENBQUMsK0JBQStCLEVBQUUsTUFBTTtFQUM5QyxJQUFJQyxHQUFHO0VBRVBDLFVBQVUsQ0FBQyxNQUFNO0lBQ2ZELEdBQUcsR0FBR0wsT0FBTyxDQUFDLENBQUM7SUFDZkssR0FBRyxDQUFDRSxHQUFHLENBQUNOLFVBQVUsQ0FBQ08sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMxQkgsR0FBRyxDQUFDRSxHQUFHLENBQUNOLFVBQVUsQ0FBQ1EsVUFBVSxDQUFDO01BQUVDLFFBQVEsRUFBRTtJQUFLLENBQUMsQ0FBQyxDQUFDOztJQUVsRDtJQUNBTCxHQUFHLENBQUNNLElBQUksQ0FBQyxPQUFPLEVBQUVULGFBQWEsRUFBRUMsYUFBYSxFQUFFLENBQUNTLEdBQUcsRUFBRUMsR0FBRyxLQUFLO01BQzVEQSxHQUFHLENBQUNMLElBQUksQ0FBQztRQUNQTSxJQUFJLEVBQUVGLEdBQUcsQ0FBQ0UsSUFBSTtRQUNkQyxLQUFLLEVBQUVILEdBQUcsQ0FBQ0csS0FBSztRQUNoQkMsTUFBTSxFQUFFSixHQUFHLENBQUNJO01BQ2QsQ0FB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