{"version":3,"names":["request","require","express","bodyParser","sanitizeInput","validateInput","describe","app","beforeEach","use","json","urlencoded","extended","post","req","res","body","query","params","it","maliciousInput","name","description","email","response","send","expect","not","toContain","desc","mixedInput","count","active","tags","toBe","toEqual","longInput","repeat","error","message","largeArray","Array","fill","validInput","longQuery","complexInput","user","profile","bio","settings","theme","notifications"],"sources":["sanitization.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// Mock the middleware\nconst { sanitizeInput, validateInput } = require('../../middleware/sanitization');\n\ndescribe('Input Sanitization Middleware', () => {\n  let app;\n\n  beforeEach(() => {\n    app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n\n    // Test endpoint\n    app.post('/test', sanitizeInput, validateInput, (req, res) => {\n      res.json({\n        body: req.body,\n        query: req.query,\n        params: req.params\n      });\n    });\n  });\n\n  describe('sanitizeInput', () => {\n    it('should sanitize XSS attempts in body', async () => {\n      const maliciousInput = {\n        name: '<script>alert(\"xss\")</script>',\n        description: '<img src=\"x\" onerror=\"alert(1)\">',\n        email: 'test@example.com<script>alert(\"xss\")</script>'\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(maliciousInput)\n        .expect(200);\n\n      expect(response.body.body.name).not.toContain('<script>');\n      expect(response.body.body.description).not.toContain('<img');\n      expect(response.body.body.email).not.toContain('<script>');\n    });\n\n    it('should sanitize XSS attempts in query parameters', async () => {\n      const response = await request(app)\n        .post('/test?name=<script>alert(\"xss\")</script>&desc=<img src=\"x\" onerror=\"alert(1)\">')\n        .expect(200);\n\n      expect(response.body.query.name).not.toContain('<script>');\n      expect(response.body.query.desc).not.toContain('<img');\n    });\n\n    it('should handle non-string inputs gracefully', async () => {\n      const mixedInput = {\n        name: '<script>alert(\"xss\")</script>',\n        count: 42,\n        active: true,\n        tags: ['tag1', 'tag2']\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(mixedInput)\n        .expect(200);\n\n      expect(response.body.body.name).not.toContain('<script>');\n      expect(response.body.body.count).toBe(42);\n      expect(response.body.body.active).toBe(true);\n      expect(response.body.body.tags).toEqual(['tag1', 'tag2']);\n    });\n\n    it('should handle empty inputs', async () => {\n      const response = await request(app)\n        .post('/test')\n        .send({})\n        .expect(200);\n\n      expect(response.body.body).toEqual({});\n    });\n  });\n\n  describe('validateInput', () => {\n    it('should reject inputs that are too long', async () => {\n      const longInput = {\n        name: 'a'.repeat(1001) // Exceeds maxLength of 1000\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(longInput)\n        .expect(400);\n\n      expect(response.body.error).toBe('Input too long');\n      expect(response.body.message).toContain('name exceeds maximum length');\n    });\n\n    it('should reject arrays that are too large', async () => {\n      const largeArray = {\n        tags: Array(101).fill('tag') // Exceeds maxArrayLength of 100\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(largeArray)\n        .expect(400);\n\n      expect(response.body.error).toBe('Array too large');\n      expect(response.body.message).toContain('tags exceeds maximum array size');\n    });\n\n    it('should accept valid inputs within limits', async () => {\n      const validInput = {\n        name: 'a'.repeat(500), // Within limit\n        tags: Array(50).fill('tag'), // Within limit\n        description: 'Valid description'\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(validInput)\n        .expect(200);\n\n      expect(response.body.body).toEqual(validInput);\n    });\n\n    it('should handle query parameters that are too long', async () => {\n      const longQuery = 'a'.repeat(1001);\n\n      const response = await request(app)\n        .post(`/test?param=${longQuery}`)\n        .expect(400);\n\n      expect(response.body.error).toBe('Query parameter too long');\n      expect(response.body.message).toContain('param exceeds maximum length');\n    });\n  });\n\n  describe('Integration', () => {\n    it('should sanitize and validate inputs together', async () => {\n      // Create input that will still be too long even after XSS sanitization\n      const maliciousInput = {\n        name: '<script>alert(\"xss\")</script>' + 'a'.repeat(1001), // XSS + exceeds 1000 limit\n        description: '<img src=\"x\" onerror=\"alert(1)\">'\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(maliciousInput)\n        .expect(400); // Should fail validation after sanitization\n\n      expect(response.body.error).toBe('Input too long');\n      expect(response.body.message).toContain('name exceeds maximum length');\n    });\n\n    it('should handle complex nested objects', async () => {\n      const complexInput = {\n        user: {\n          name: '<script>alert(\"xss\")</script>',\n          profile: {\n            bio: '<img src=\"x\" onerror=\"alert(1)\">'\n          }\n        },\n        settings: {\n          theme: 'dark',\n          notifications: true\n        }\n      };\n\n      const response = await request(app)\n        .post('/test')\n        .send(complexInput)\n        .expect(200);\n\n      // Should sanitize nested strings - DOMPurify removes all HTML tags\n      expect(response.body.body.user.name).toBe('alert(\"xss\")'); // Only text content remains\n      expect(response.body.body.user.profile.bio).toBe(''); // Empty string after sanitization\n\n      // Should preserve non-string values\n      expect(response.body.body.settings.theme).toBe('dark');\n      expect(response.body.body.settings.notifications).toBe(true);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}