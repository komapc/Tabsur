2932dcff25cd91d2c24e8918c3f6937c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _NameStep = _interopRequireDefault(require("./NameStep"));
var _LocationStep = _interopRequireDefault(require("./LocationStep"));
var _DescriptionStep = _interopRequireDefault(require("./DescriptionStep"));
var _ImageStep = _interopRequireDefault(require("./ImageStep"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Navigator = _interopRequireDefault(require("./Navigator"));
var _reactStepWizard = _interopRequireDefault(require("react-step-wizard"));
var _reactRedux = require("react-redux");
var _mealActions = require("../../../actions/mealActions");
var _BackBarMui = _interopRequireDefault(require("../../layout/BackBarMui"));
var _Box = _interopRequireDefault(require("@mui/material/Box"));
var _styles = require("@mui/material/styles");
var _AppBar = _interopRequireDefault(require("@mui/material/AppBar"));
var _Toolbar = _interopRequireDefault(require("@mui/material/Toolbar"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const CreateMealWizard = ({
  auth,
  addMeal
}) => {
  const theme = (0, _styles.createTheme)({
    palette: {
      secondary: {
        main: '#ffff00'
      },
      primary: {
        main: '#010101'
      }
    }
  });
  const formatedDate = new Date(Date.now() + 86400000);
  const history = (0, _reactRouterDom.useHistory)();
  if (!auth.isAuthenticated) {
    history.push({
      pathname: '/login'
    });
  }
  const [state, updateState] = (0, _react.useState)({
    form: {
      name: `${auth.user.name}'s meal`,
      description: "",
      date: formatedDate,
      time: formatedDate,
      address: "Default Address",
      // Set default address
      location: {
        lng: 34.808,
        lat: 32.09
      },
      // Set default location (Tel Aviv)
      host_id: auth.user.id,
      guest_count: 3,
      image_id: -1,
      type: 1,
      // Add default meal type
      visibility: 1 // Add default visibility (1 = public)
    },
    transitions: {},
    history: history,
    uploadingState: false
  });
  const setInstance = SW => updateState({
    ...state,
    SW
  });
  const onStepChange = stats => {
    updateState({
      ...state,
      stats
    });
  };
  const submit = e => {
    e.preventDefault();
    let summedDate = new Date(state.form.date);
    const time = new Date(state.form.time);
    summedDate.setHours(time.getHours());
    summedDate.setMinutes(time.getMinutes());
    const formattedDate = new Date(summedDate).getTime();
    const newMeal = {
      name: state.form.name,
      description: state.form.description,
      date: formattedDate,
      address: state.form.address,
      location: state.form.location,
      host_id: auth.user.id,
      guest_count: state.form.guest_count,
      image_id: state.form.image_id ? state.form.image_id : -2,
      type: state.form.type,
      // Add meal type
      visibility: state.form.visibility // Add visibility
    };
    console.log(JSON.stringify(newMeal));
    return addMeal(newMeal, () => {
      history.push({
        pathname: '/',
        hash: '#2'
      });
    });
  };
  const update = e => {
    const {
      form
    } = state;
    form[e.id] = e.value;
    updateState({
      ...state,
      form
    });
  };
  const setUploadingState = newUploadingState => {
    updateState({
      ...state,
      uploadingState: newUploadingState
    });
  };
  const {
    SW
  } = state;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_styles.ThemeProvider, {
    theme: theme,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_AppBar.default, {
      position: "sticky",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Toolbar.default, {
        children: " CREATE MEAL"
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_BackBarMui.default, {
      history: history
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
      p: 2,
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactStepWizard.default, {
        onStepChange: onStepChange,
        transitions: state.transitions,
        instance: setInstance,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_NameStep.default, {
          update: update,
          form: state.form
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_LocationStep.default, {
          update: update,
          form: state.form
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
          update: update,
          form: state.form
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageStep.default, {
          update: update,
          form: state.form,
          auth: auth,
          setUploadingState: setUploadingState
        })]
      })
    }), SW && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Navigator.default, {
      SW: SW,
      submit: submit,
      uploadingState: state.uploadingState
    })]
  });
};
const mapStateToProps = state => ({
  auth: state.auth,
  errors: state.errors
});
CreateMealWizard.propTypes = {
  addMeal: _propTypes.default.func.isRequired,
  auth: _propTypes.default.object.isRequired
};
const mapDispatchToProps = dispatch => ({
  addMeal: (form, history) => (0, _mealActions.addMeal)(form, history)(dispatch)
});
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CreateMealWizard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,