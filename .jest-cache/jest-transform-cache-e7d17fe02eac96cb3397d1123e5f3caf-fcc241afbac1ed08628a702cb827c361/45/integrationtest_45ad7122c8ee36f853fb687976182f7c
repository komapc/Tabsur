968962b72b11164cea2aa72a2dd2c19d
"use strict";

// Mock the database module
_getJestObj().mock('../routes/db.js', () => ({
  connect: jest.fn().mockResolvedValue({
    query: jest.fn(),
    release: jest.fn()
  })
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const express = require('express');
const bodyParser = require('body-parser');
const request = require('supertest');
let app;
let usersRouter;
describe('Integration Tests - User Registration and Login', () => {
  beforeAll(async () => {
    // Set test environment
    process.env.NODE_ENV = 'test';
    process.env.JWT_SECRET = 'test-secret';
    app = express();
    app.use(bodyParser.urlencoded({
      extended: false
    }));
    app.use(bodyParser.json());
  });
  beforeEach(async () => {
    // Reset mocks before each test
    jest.clearAllMocks();

    // Create a fresh router for each test
    usersRouter = express.Router();

    // Mock registration endpoint
    usersRouter.post('/register', (req, res) => {
      const {
        name,
        email,
        password,
        password2,
        location,
        address
      } = req.body;

      // Basic validation
      if (!name || !email || !password || !password2 || !location || !address) {
        return res.status(400).json({
          error: 'All fields are required'
        });
      }
      if (password !== password2) {
        return res.status(400).json({
          error: 'Passwords do not match'
        });
      }

      // Mock successful registration
      res.status(201).json({
        id: 1,
        name,
        email,
        location,
        address,
        message: 'User registered successfully'
      });
    });

    // Mock login endpoint
    usersRouter.post('/login', (req, res) => {
      const {
        email,
        password
      } = req.body;
      if (!email || !password) {
        return res.status(400).json({
          error: 'Email and password are required'
        });
      }

      // Mock successful login
      res.status(200).json({
        token: 'mock-jwt-token-' + Date.now(),
        user: {
          id: 1,
          name: 'Integration Test User',
          email: email
        }
      });
    });

    // Clear any existing routes and add the fresh router
    app._router.stack = app._router.stack.filter(layer => !layer.route || !layer.route.path.startsWith('/api/users'));
    app.use('/api/users', usersRouter);
  });
  describe('Complete User Flow', () => {
    const testUser = {
      name: 'Integration Test User',
      email: 'integration-test@example.com',
      password: 'testpassword123',
      password2: 'testpassword123',
      location: '40.7128,-74.0060',
      address: '123 Integration Test Street, New York, NY'
    };
    it('should complete full user registration and login flow', async () => {
      // Step 1: Register a new user
      console.log('🧪 Testing user registration...');
      const registerResponse = await request(app).post('/api/users/register').send(testUser).expect(201);
      console.log('✅ User registration successful');

      // Step 2: Attempt login with the registered user
      console.log('🧪 Testing user login...');
      const loginResponse = await request(app).post('/api/users/login').send({
        email: testUser.email,
        password: testUser.password
      }).expect(200);

      // Check if login was successful
      expect(loginResponse.body.token).toBeDefined();
      expect(typeof loginResponse.body.token).toBe('string');
      expect(loginResponse.body.user).toBeDefined();
      expect(loginResponse.body.user.email).toBe(testUser.email);
      console.log('✅ User login successful');
      console.log('🎟️  JWT Token received:', loginResponse.body.token.substring(0, 20) + '...');

      // Verify the flow completed
      expect(registerResponse.status).toBe(201);
      expect(registerResponse.body.id).toBe(1);
      expect(registerResponse.body.name).toBe(testUser.name);
    });
    it('should reject duplicate email registration', async () => {
      // Create a new router specifically for this test
      const duplicateEmailRouter = express.Router();
      duplicateEmailRouter.post('/register', (req, res) => {
        res.status(400).json({
          error: 'Email already exists'
        });
      });
      duplicateEmailRouter.post('/login', (req, res) => {
        res.status(200).json({
          token: 'mock-token',
          user: {
            id: 1,
            email: 'test@example.com'
          }
        });
      });

      // Replace the existing router for this test
      app._router.stack = app._router.stack.filter(layer => !layer.route || !layer.route.path.startsWith('/api/users'));
      app.use('/api/users', duplicateEmailRouter);
      const response = await request(app).post('/api/users/register').send(testUser).expect(400);
      expect(response.body.error).toBe('Email already exists');
    });
    it('should validate required fields', async () => {
      const invalidUser = {
        name: 'Test User'
        // Missing email, password, etc.
      };
      const response = await request(app).post('/api/users/register').send(invalidUser).expect(400);
      expect(response.body.error).toBe('All fields are required');
    });
    it('should validate password confirmation', async () => {
      const userWithMismatchedPasswords = {
        ...testUser,
        password2: 'differentpassword'
      };
      const response = await request(app).post('/api/users/register').send(userWithMismatchedPasswords).expect(400);
      expect(response.body.error).toBe('Passwords do not match');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJjb25uZWN0IiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJxdWVyeSIsInJlbGVhc2UiLCJyZXF1aXJlIiwiZXhwcmVzcyIsImJvZHlQYXJzZXIiLCJyZXF1ZXN0IiwiYXBwIiwidXNlcnNSb3V0ZXIiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkpXVF9TRUNSRVQiLCJ1c2UiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJSb3V0ZXIiLCJwb3N0IiwicmVxIiwicmVzIiwibmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJwYXNzd29yZDIiLCJsb2NhdGlvbiIsImFkZHJlc3MiLCJib2R5Iiwic3RhdHVzIiwiZXJyb3IiLCJpZCIsIm1lc3NhZ2UiLCJ0b2tlbiIsIkRhdGUiLCJub3ciLCJ1c2VyIiwiX3JvdXRlciIsInN0YWNrIiwiZmlsdGVyIiwibGF5ZXIiLCJyb3V0ZSIsInBhdGgiLCJzdGFydHNXaXRoIiwidGVzdFVzZXIiLCJpdCIsImNvbnNvbGUiLCJsb2ciLCJyZWdpc3RlclJlc3BvbnNlIiwic2VuZCIsImV4cGVjdCIsImxvZ2luUmVzcG9uc2UiLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJzdWJzdHJpbmciLCJkdXBsaWNhdGVFbWFpbFJvdXRlciIsInJlc3BvbnNlIiwiaW52YWxpZFVzZXIiLCJ1c2VyV2l0aE1pc21hdGNoZWRQYXNzd29yZHMiXSwic291cmNlcyI6WyJpbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcblxuLy8gTW9jayB0aGUgZGF0YWJhc2UgbW9kdWxlXG5qZXN0Lm1vY2soJy4uL3JvdXRlcy9kYi5qcycsICgpID0+ICh7XG4gIGNvbm5lY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgcXVlcnk6IGplc3QuZm4oKSxcbiAgICByZWxlYXNlOiBqZXN0LmZuKClcbiAgfSlcbn0pKTtcblxubGV0IGFwcDtcbmxldCB1c2Vyc1JvdXRlcjtcblxuZGVzY3JpYmUoJ0ludGVncmF0aW9uIFRlc3RzIC0gVXNlciBSZWdpc3RyYXRpb24gYW5kIExvZ2luJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNldCB0ZXN0IGVudmlyb25tZW50XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG4gICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldCc7XG5cbiAgICBhcHAgPSBleHByZXNzKCk7XG4gICAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBSZXNldCBtb2NrcyBiZWZvcmUgZWFjaCB0ZXN0XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgZnJlc2ggcm91dGVyIGZvciBlYWNoIHRlc3RcbiAgICB1c2Vyc1JvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgXG4gICAgLy8gTW9jayByZWdpc3RyYXRpb24gZW5kcG9pbnRcbiAgICB1c2Vyc1JvdXRlci5wb3N0KCcvcmVnaXN0ZXInLCAocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IHsgbmFtZSwgZW1haWwsIHBhc3N3b3JkLCBwYXNzd29yZDIsIGxvY2F0aW9uLCBhZGRyZXNzIH0gPSByZXEuYm9keTtcbiAgICAgIFxuICAgICAgLy8gQmFzaWMgdmFsaWRhdGlvblxuICAgICAgaWYgKCFuYW1lIHx8ICFlbWFpbCB8fCAhcGFzc3dvcmQgfHwgIXBhc3N3b3JkMiB8fCAhbG9jYXRpb24gfHwgIWFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdBbGwgZmllbGRzIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChwYXNzd29yZCAhPT0gcGFzc3dvcmQyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnUGFzc3dvcmRzIGRvIG5vdCBtYXRjaCcgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE1vY2sgc3VjY2Vzc2Z1bCByZWdpc3RyYXRpb25cbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgbWVzc2FnZTogJ1VzZXIgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHknXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBNb2NrIGxvZ2luIGVuZHBvaW50XG4gICAgdXNlcnNSb3V0ZXIucG9zdCgnL2xvZ2luJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG4gICAgICBcbiAgICAgIGlmICghZW1haWwgfHwgIXBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnRW1haWwgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE1vY2sgc3VjY2Vzc2Z1bCBsb2dpblxuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICB0b2tlbjogJ21vY2stand0LXRva2VuLScgKyBEYXRlLm5vdygpLFxuICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgbmFtZTogJ0ludGVncmF0aW9uIFRlc3QgVXNlcicsXG4gICAgICAgICAgZW1haWw6IGVtYWlsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIENsZWFyIGFueSBleGlzdGluZyByb3V0ZXMgYW5kIGFkZCB0aGUgZnJlc2ggcm91dGVyXG4gICAgYXBwLl9yb3V0ZXIuc3RhY2sgPSBhcHAuX3JvdXRlci5zdGFjay5maWx0ZXIobGF5ZXIgPT4gIWxheWVyLnJvdXRlIHx8ICFsYXllci5yb3V0ZS5wYXRoLnN0YXJ0c1dpdGgoJy9hcGkvdXNlcnMnKSk7XG4gICAgYXBwLnVzZSgnL2FwaS91c2VycycsIHVzZXJzUm91dGVyKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbXBsZXRlIFVzZXIgRmxvdycsICgpID0+IHtcbiAgICBjb25zdCB0ZXN0VXNlciA9IHtcbiAgICAgIG5hbWU6ICdJbnRlZ3JhdGlvbiBUZXN0IFVzZXInLFxuICAgICAgZW1haWw6ICdpbnRlZ3JhdGlvbi10ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdHBhc3N3b3JkMTIzJyxcbiAgICAgIHBhc3N3b3JkMjogJ3Rlc3RwYXNzd29yZDEyMycsXG4gICAgICBsb2NhdGlvbjogJzQwLjcxMjgsLTc0LjAwNjAnLFxuICAgICAgYWRkcmVzczogJzEyMyBJbnRlZ3JhdGlvbiBUZXN0IFN0cmVldCwgTmV3IFlvcmssIE5ZJ1xuICAgIH07XG5cbiAgICBpdCgnc2hvdWxkIGNvbXBsZXRlIGZ1bGwgdXNlciByZWdpc3RyYXRpb24gYW5kIGxvZ2luIGZsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBTdGVwIDE6IFJlZ2lzdGVyIGEgbmV3IHVzZXJcbiAgICAgIGNvbnNvbGUubG9nKCfwn6eqIFRlc3RpbmcgdXNlciByZWdpc3RyYXRpb24uLi4nKTtcblxuICAgICAgY29uc3QgcmVnaXN0ZXJSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS91c2Vycy9yZWdpc3RlcicpXG4gICAgICAgIC5zZW5kKHRlc3RVc2VyKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCfinIUgVXNlciByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCcpO1xuXG4gICAgICAvLyBTdGVwIDI6IEF0dGVtcHQgbG9naW4gd2l0aCB0aGUgcmVnaXN0ZXJlZCB1c2VyXG4gICAgICBjb25zb2xlLmxvZygn8J+nqiBUZXN0aW5nIHVzZXIgbG9naW4uLi4nKTtcblxuICAgICAgY29uc3QgbG9naW5SZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKVxuICAgICAgICAucG9zdCgnL2FwaS91c2Vycy9sb2dpbicpXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBlbWFpbDogdGVzdFVzZXIuZW1haWwsXG4gICAgICAgICAgcGFzc3dvcmQ6IHRlc3RVc2VyLnBhc3N3b3JkXG4gICAgICAgIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgbG9naW4gd2FzIHN1Y2Nlc3NmdWxcbiAgICAgIGV4cGVjdChsb2dpblJlc3BvbnNlLmJvZHkudG9rZW4pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QodHlwZW9mIGxvZ2luUmVzcG9uc2UuYm9keS50b2tlbikudG9CZSgnc3RyaW5nJyk7XG4gICAgICBleHBlY3QobG9naW5SZXNwb25zZS5ib2R5LnVzZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobG9naW5SZXNwb25zZS5ib2R5LnVzZXIuZW1haWwpLnRvQmUodGVzdFVzZXIuZW1haWwpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn4pyFIFVzZXIgbG9naW4gc3VjY2Vzc2Z1bCcpO1xuICAgICAgY29uc29sZS5sb2coJ/Cfjp/vuI8gIEpXVCBUb2tlbiByZWNlaXZlZDonLCBsb2dpblJlc3BvbnNlLmJvZHkudG9rZW4uc3Vic3RyaW5nKDAsIDIwKSArICcuLi4nKTtcblxuICAgICAgLy8gVmVyaWZ5IHRoZSBmbG93IGNvbXBsZXRlZFxuICAgICAgZXhwZWN0KHJlZ2lzdGVyUmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgICBleHBlY3QocmVnaXN0ZXJSZXNwb25zZS5ib2R5LmlkKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlZ2lzdGVyUmVzcG9uc2UuYm9keS5uYW1lKS50b0JlKHRlc3RVc2VyLm5hbWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgZHVwbGljYXRlIGVtYWlsIHJlZ2lzdHJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENyZWF0ZSBhIG5ldyByb3V0ZXIgc3BlY2lmaWNhbGx5IGZvciB0aGlzIHRlc3RcbiAgICAgIGNvbnN0IGR1cGxpY2F0ZUVtYWlsUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbiAgICAgIFxuICAgICAgZHVwbGljYXRlRW1haWxSb3V0ZXIucG9zdCgnL3JlZ2lzdGVyJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdFbWFpbCBhbHJlYWR5IGV4aXN0cycgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZHVwbGljYXRlRW1haWxSb3V0ZXIucG9zdCgnL2xvZ2luJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgdG9rZW46ICdtb2NrLXRva2VuJywgdXNlcjogeyBpZDogMSwgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9IH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlcGxhY2UgdGhlIGV4aXN0aW5nIHJvdXRlciBmb3IgdGhpcyB0ZXN0XG4gICAgICBhcHAuX3JvdXRlci5zdGFjayA9IGFwcC5fcm91dGVyLnN0YWNrLmZpbHRlcihsYXllciA9PiAhbGF5ZXIucm91dGUgfHwgIWxheWVyLnJvdXRlLnBhdGguc3RhcnRzV2l0aCgnL2FwaS91c2VycycpKTtcbiAgICAgIGFwcC51c2UoJy9hcGkvdXNlcnMnLCBkdXBsaWNhdGVFbWFpbFJvdXRlcik7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3VzZXJzL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQodGVzdFVzZXIpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ0VtYWlsIGFscmVhZHkgZXhpc3RzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRVc2VyID0ge1xuICAgICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgICAgLy8gTWlzc2luZyBlbWFpbCwgcGFzc3dvcmQsIGV0Yy5cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgIC5wb3N0KCcvYXBpL3VzZXJzL3JlZ2lzdGVyJylcbiAgICAgICAgLnNlbmQoaW52YWxpZFVzZXIpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ0FsbCBmaWVsZHMgYXJlIHJlcXVpcmVkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHBhc3N3b3JkIGNvbmZpcm1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJXaXRoTWlzbWF0Y2hlZFBhc3N3b3JkcyA9IHtcbiAgICAgICAgLi4udGVzdFVzZXIsXG4gICAgICAgIHBhc3N3b3JkMjogJ2RpZmZlcmVudHBhc3N3b3JkJ1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgLnBvc3QoJy9hcGkvdXNlcnMvcmVnaXN0ZXInKVxuICAgICAgICAuc2VuZCh1c2VyV2l0aE1pc21hdGNoZWRQYXNzd29yZHMpXG4gICAgICAgIC5leHBlY3QoNDAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZXJyb3IpLnRvQmUoJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2gnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBSUE7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTztFQUNsQ0MsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO0lBQ25DQyxLQUFLLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDaEJHLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDbkIsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBQUMsU0FBQUosWUFBQTtFQUFBO0lBQUFHO0VBQUEsSUFBQUssT0FBQTtFQUFBUixXQUFBLEdBQUFBLENBQUEsS0FBQUcsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVZKLE1BQU1NLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDekMsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsV0FBVyxDQUFDO0FBVXBDLElBQUlJLEdBQUc7QUFDUCxJQUFJQyxXQUFXO0FBRWZDLFFBQVEsQ0FBQyxpREFBaUQsRUFBRSxNQUFNO0VBQ2hFQyxTQUFTLENBQUMsWUFBWTtJQUNwQjtJQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLE1BQU07SUFDN0JGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxVQUFVLEdBQUcsYUFBYTtJQUV0Q1AsR0FBRyxHQUFHSCxPQUFPLENBQUMsQ0FBQztJQUNmRyxHQUFHLENBQUNRLEdBQUcsQ0FBQ1YsVUFBVSxD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