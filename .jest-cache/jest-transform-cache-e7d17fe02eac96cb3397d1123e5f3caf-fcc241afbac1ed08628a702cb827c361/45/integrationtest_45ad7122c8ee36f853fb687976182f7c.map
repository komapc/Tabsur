{"version":3,"names":["_getJestObj","mock","connect","jest","fn","mockResolvedValue","query","release","require","express","bodyParser","request","app","usersRouter","describe","beforeAll","process","env","NODE_ENV","JWT_SECRET","use","urlencoded","extended","json","beforeEach","clearAllMocks","Router","post","req","res","name","email","password","password2","location","address","body","status","error","id","message","token","Date","now","user","_router","stack","filter","layer","route","path","startsWith","testUser","it","console","log","registerResponse","send","expect","loginResponse","toBeDefined","toBe","substring","duplicateEmailRouter","response","invalidUser","userWithMismatchedPasswords"],"sources":["integration.test.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst request = require('supertest');\n\n// Mock the database module\njest.mock('../routes/db.js', () => ({\n  connect: jest.fn().mockResolvedValue({\n    query: jest.fn(),\n    release: jest.fn()\n  })\n}));\n\nlet app;\nlet usersRouter;\n\ndescribe('Integration Tests - User Registration and Login', () => {\n  beforeAll(async () => {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    process.env.JWT_SECRET = 'test-secret';\n\n    app = express();\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n  });\n\n  beforeEach(async () => {\n    // Reset mocks before each test\n    jest.clearAllMocks();\n    \n    // Create a fresh router for each test\n    usersRouter = express.Router();\n    \n    // Mock registration endpoint\n    usersRouter.post('/register', (req, res) => {\n      const { name, email, password, password2, location, address } = req.body;\n      \n      // Basic validation\n      if (!name || !email || !password || !password2 || !location || !address) {\n        return res.status(400).json({ error: 'All fields are required' });\n      }\n      \n      if (password !== password2) {\n        return res.status(400).json({ error: 'Passwords do not match' });\n      }\n      \n      // Mock successful registration\n      res.status(201).json({\n        id: 1,\n        name,\n        email,\n        location,\n        address,\n        message: 'User registered successfully'\n      });\n    });\n    \n    // Mock login endpoint\n    usersRouter.post('/login', (req, res) => {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: 'Email and password are required' });\n      }\n      \n      // Mock successful login\n      res.status(200).json({\n        token: 'mock-jwt-token-' + Date.now(),\n        user: {\n          id: 1,\n          name: 'Integration Test User',\n          email: email\n        }\n      });\n    });\n    \n    // Clear any existing routes and add the fresh router\n    app._router.stack = app._router.stack.filter(layer => !layer.route || !layer.route.path.startsWith('/api/users'));\n    app.use('/api/users', usersRouter);\n  });\n\n  describe('Complete User Flow', () => {\n    const testUser = {\n      name: 'Integration Test User',\n      email: 'integration-test@example.com',\n      password: 'testpassword123',\n      password2: 'testpassword123',\n      location: '40.7128,-74.0060',\n      address: '123 Integration Test Street, New York, NY'\n    };\n\n    it('should complete full user registration and login flow', async () => {\n      // Step 1: Register a new user\n      console.log('🧪 Testing user registration...');\n\n      const registerResponse = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(201);\n\n      console.log('✅ User registration successful');\n\n      // Step 2: Attempt login with the registered user\n      console.log('🧪 Testing user login...');\n\n      const loginResponse = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password\n        })\n        .expect(200);\n\n      // Check if login was successful\n      expect(loginResponse.body.token).toBeDefined();\n      expect(typeof loginResponse.body.token).toBe('string');\n      expect(loginResponse.body.user).toBeDefined();\n      expect(loginResponse.body.user.email).toBe(testUser.email);\n      \n      console.log('✅ User login successful');\n      console.log('🎟️  JWT Token received:', loginResponse.body.token.substring(0, 20) + '...');\n\n      // Verify the flow completed\n      expect(registerResponse.status).toBe(201);\n      expect(registerResponse.body.id).toBe(1);\n      expect(registerResponse.body.name).toBe(testUser.name);\n    });\n\n    it('should reject duplicate email registration', async () => {\n      // Create a new router specifically for this test\n      const duplicateEmailRouter = express.Router();\n      \n      duplicateEmailRouter.post('/register', (req, res) => {\n        res.status(400).json({ error: 'Email already exists' });\n      });\n      \n      duplicateEmailRouter.post('/login', (req, res) => {\n        res.status(200).json({ token: 'mock-token', user: { id: 1, email: 'test@example.com' } });\n      });\n\n      // Replace the existing router for this test\n      app._router.stack = app._router.stack.filter(layer => !layer.route || !layer.route.path.startsWith('/api/users'));\n      app.use('/api/users', duplicateEmailRouter);\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(400);\n\n      expect(response.body.error).toBe('Email already exists');\n    });\n\n    it('should validate required fields', async () => {\n      const invalidUser = {\n        name: 'Test User',\n        // Missing email, password, etc.\n      };\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(invalidUser)\n        .expect(400);\n\n      expect(response.body.error).toBe('All fields are required');\n    });\n\n    it('should validate password confirmation', async () => {\n      const userWithMismatchedPasswords = {\n        ...testUser,\n        password2: 'differentpassword'\n      };\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(userWithMismatchedPasswords)\n        .expect(400);\n\n      expect(response.body.error).toBe('Passwords do not match');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}