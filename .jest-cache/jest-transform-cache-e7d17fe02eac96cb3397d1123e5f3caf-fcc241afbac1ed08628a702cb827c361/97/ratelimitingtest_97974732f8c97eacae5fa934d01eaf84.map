{"version":3,"names":["request","require","express","bodyParser","rateLimit","createApiLimiter","windowMs","max","standardHeaders","legacyHeaders","keyGenerator","req","headers","ip","message","error","retryAfter","Math","ceil","handler","res","status","json","createAuthLimiter","createUploadLimiter","createMealCreationLimiter","createSearchLimiter","describe","app","beforeEach","use","set","post","get","it","i","expect","response","body","toBe","toContain","toBeDefined","ip1","ip2"],"sources":["rate-limiting.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst rateLimit = require('express-rate-limit');\n\n// Create fresh rate limiter instances for each test\nconst createApiLimiter = () => rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => {\n    // Handle forwarded IP headers for testing\n    return req.headers['x-forwarded-for'] || req.ip || 'test-ip';\n  },\n  message: {\n    error: 'Too many requests',\n    message: 'Rate limit exceeded. Please try again later.',\n    retryAfter: Math.ceil(15 * 60 / 1000)\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      error: 'Too many requests',\n      message: 'Rate limit exceeded. Please try again later.',\n      retryAfter: Math.ceil(15 * 60 / 1000)\n    });\n  }\n});\n\nconst createAuthLimiter = () => rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => req.ip || 'test-ip',\n  message: {\n    error: 'Too many authentication attempts',\n    message: 'Too many login attempts. Please try again later.',\n    retryAfter: Math.ceil(15 * 60 / 1000)\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      error: 'Too many authentication attempts',\n      message: 'Too many login attempts. Please try again later.',\n      retryAfter: Math.ceil(15 * 60 / 1000)\n    });\n  }\n});\n\nconst createUploadLimiter = () => rateLimit({\n  windowMs: 60 * 60 * 1000,\n  max: 10,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => req.ip || 'test-ip',\n  message: {\n    error: 'Too many file uploads',\n    message: 'Upload limit exceeded. Please try again later.',\n    retryAfter: Math.ceil(60 * 60 / 1000)\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      error: 'Too many file uploads',\n      message: 'Upload limit exceeded. Please try again later.',\n      retryAfter: Math.ceil(60 * 60 / 1000)\n    });\n  }\n});\n\nconst createMealCreationLimiter = () => rateLimit({\n  windowMs: 24 * 60 * 60 * 1000,\n  max: 20,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => req.ip || 'test-ip',\n  message: {\n    error: 'Too many meal creations',\n    message: 'Daily meal creation limit exceeded. Please try again tomorrow.',\n    retryAfter: Math.ceil(24 * 60 * 60 / 1000)\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      error: 'Too many meal creations',\n      message: 'Daily meal creation limit exceeded. Please try again tomorrow.',\n      retryAfter: Math.ceil(24 * 60 * 60 / 1000)\n    });\n  }\n});\n\nconst createSearchLimiter = () => rateLimit({\n  windowMs: 60 * 60 * 1000,\n  max: 50,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => req.ip || 'test-ip',\n  message: {\n    error: 'Too many searches',\n    message: 'Search limit exceeded. Please try again later.',\n    retryAfter: Math.ceil(60 * 60 / 1000)\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      error: 'Too many searches',\n      message: 'Search limit exceeded. Please try again later.',\n      retryAfter: Math.ceil(60 * 60 / 1000)\n    });\n  }\n});\n\n\ndescribe('Rate Limiting Middleware', () => {\n  let app;\n\n  beforeEach(() => {\n    app = express();\n    app.use(bodyParser.json());\n\n    // Set trust proxy to handle X-Forwarded-For headers in tests\n    app.set('trust proxy', true);\n\n\n    // Test endpoints for different rate limiters\n    app.post('/api/test', createApiLimiter(), (req, res) => {\n      res.json({ message: 'API endpoint' });\n    });\n\n    app.post('/auth/login', createAuthLimiter(), (req, res) => {\n      res.json({ message: 'Login endpoint' });\n    });\n\n    app.post('/upload', createUploadLimiter(), (req, res) => {\n      res.json({ message: 'Upload endpoint' });\n    });\n\n    app.post('/meals', createMealCreationLimiter(), (req, res) => {\n      res.json({ message: 'Meal creation endpoint' });\n    });\n\n    app.get('/search', createSearchLimiter(), (req, res) => {\n      res.json({ message: 'Search endpoint' });\n    });\n  });\n\n  describe('API Rate Limiter', () => {\n    it('should allow requests within limit', async () => {\n      // Make 100 requests (within limit)\n      for (let i = 0; i < 100; i++) {\n        await request(app)\n          .post('/api/test')\n          .expect(200);\n      }\n    });\n\n    it('should block requests after limit exceeded', async () => {\n      // Make 99 requests (just under limit)\n      for (let i = 0; i < 99; i++) {\n        await request(app)\n          .post('/api/test')\n          .expect(200);\n      }\n\n      // 100th request should succeed (at limit)\n      await request(app)\n        .post('/api/test')\n        .expect(200);\n\n      // 101st request should be blocked\n      const response = await request(app)\n        .post('/api/test')\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many requests');\n      expect(response.body.message).toContain('Rate limit exceeded');\n    });\n\n    it('should include rate limit headers', async () => {\n      const response = await request(app)\n        .post('/api/test')\n        .expect(200);\n\n      expect(response.headers['ratelimit-limit']).toBeDefined();\n      expect(response.headers['ratelimit-remaining']).toBeDefined();\n      expect(response.headers['ratelimit-reset']).toBeDefined();\n    });\n  });\n\n  describe('Authentication Rate Limiter', () => {\n    it('should allow 5 login attempts within 15 minutes', async () => {\n      // Make 5 requests (within limit)\n      for (let i = 0; i < 5; i++) {\n        await request(app)\n          .post('/auth/login')\n          .expect(200);\n      }\n    });\n\n    it('should block login attempts after limit exceeded', async () => {\n      // Make 4 requests (just under limit)\n      for (let i = 0; i < 4; i++) {\n        await request(app)\n          .post('/auth/login')\n          .expect(200);\n      }\n\n      // 5th request should succeed (at limit)\n      await request(app)\n        .post('/auth/login')\n        .expect(200);\n\n      // 6th request should be blocked\n      const response = await request(app)\n        .post('/auth/login')\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many authentication attempts');\n      expect(response.body.message).toContain('Too many login attempts');\n    });\n  });\n\n  describe('Upload Rate Limiter', () => {\n    it('should allow uploads within limit', async () => {\n      // Make 10 requests (within limit)\n      for (let i = 0; i < 10; i++) {\n        await request(app)\n          .post('/upload')\n          .expect(200);\n      }\n    });\n\n    it('should block uploads after limit exceeded', async () => {\n      // Make 9 requests (just under limit)\n      for (let i = 0; i < 9; i++) {\n        await request(app)\n          .post('/upload')\n          .expect(200);\n      }\n\n      // 10th request should succeed (at limit)\n      await request(app)\n        .post('/upload')\n        .expect(200);\n\n      // 11th request should be blocked\n      const response = await request(app)\n        .post('/upload')\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many file uploads');\n      expect(response.body.message).toContain('Upload limit exceeded');\n    });\n  });\n\n  describe('Meal Creation Rate Limiter', () => {\n    it('should allow meal creations within daily limit', async () => {\n      // Make 20 requests (within limit)\n      for (let i = 0; i < 20; i++) {\n        await request(app)\n          .post('/meals')\n          .expect(200);\n      }\n    });\n\n    it('should block meal creations after daily limit exceeded', async () => {\n      // Make 19 requests (just under limit)\n      for (let i = 0; i < 19; i++) {\n        await request(app)\n          .post('/meals')\n          .expect(200);\n      }\n\n      // 20th request should succeed (at limit)\n      await request(app)\n        .post('/meals')\n        .expect(200);\n\n      // 21st request should be blocked\n      const response = await request(app)\n        .post('/meals')\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many meal creations');\n      expect(response.body.message).toContain('Daily meal creation limit exceeded');\n    });\n  });\n\n  describe('Search Rate Limiter', () => {\n    it('should allow searches within hourly limit', async () => {\n      // Make 50 requests (within limit)\n      for (let i = 0; i < 50; i++) {\n        await request(app)\n          .get('/search')\n          .expect(200);\n      }\n    });\n\n    it('should block searches after hourly limit exceeded', async () => {\n      // Make 49 requests (just under limit)\n      for (let i = 0; i < 49; i++) {\n        await request(app)\n          .get('/search')\n          .expect(200);\n      }\n\n      // 50th request should succeed (at limit)\n      await request(app)\n        .get('/search')\n        .expect(200);\n\n      // 51st request should be blocked\n      const response = await request(app)\n        .get('/search')\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many searches');\n      expect(response.body.message).toContain('Search limit exceeded');\n    });\n  });\n\n  describe('Rate Limit Headers', () => {\n    it('should include retry-after header in rate limit responses', async () => {\n      // Exceed rate limit first\n      for (let i = 0; i < 101; i++) {\n        await request(app)\n          .post('/api/test');\n      }\n\n      const response = await request(app)\n        .post('/api/test')\n        .expect(429);\n\n      expect(response.body.retryAfter).toBeDefined();\n      expect(typeof response.body.retryAfter).toBe('number');\n    });\n  });\n\n  describe('Different IP Addresses', () => {\n    it('should track rate limits per IP address', async () => {\n      // Simulate different IPs by setting X-Forwarded-For header\n      const ip1 = '192.168.1.1';\n      const ip2 = '192.168.1.2';\n\n      // IP1 makes 99 requests (just under limit)\n      for (let i = 0; i < 99; i++) {\n        await request(app)\n          .post('/api/test')\n          .set('X-Forwarded-For', ip1)\n          .expect(200);\n      }\n\n      // IP1 makes 100th request (at limit)\n      await request(app)\n        .post('/api/test')\n        .set('X-Forwarded-For', ip1)\n        .expect(200);\n\n      // IP2 should still be able to make requests\n      await request(app)\n        .post('/api/test')\n        .set('X-Forwarded-For', ip2)\n        .expect(200);\n\n      // IP1 should be blocked\n      const response = await request(app)\n        .post('/api/test')\n        .set('X-Forwarded-For', ip1)\n        .expect(429);\n\n      expect(response.body.error).toBe('Too many requests');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}