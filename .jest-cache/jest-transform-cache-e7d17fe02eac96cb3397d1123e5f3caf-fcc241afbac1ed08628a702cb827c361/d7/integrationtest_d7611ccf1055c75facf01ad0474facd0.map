{"version":3,"names":["_getJestObj","mock","connect","jest","fn","mockResolvedValue","query","release","genSalt","hash","compare","sign","mockReturnValue","require","request","express","bodyParser","app","describe","beforeAll","process","env","NODE_ENV","JWT_SECRET","users","use","urlencoded","extended","json","beforeEach","clearAllMocks","testUser","name","email","password","password2","location","address","it","pool","mockClient","mockResolvedValueOnce","rows","id","console","log","registerResponse","post","send","expect","loginResponse","status","body","token","toBeDefined","toBe","substring","toHaveBeenCalled","mockRejectedValueOnce","Error","response","error"],"sources":["integration.test.js"],"sourcesContent":["const request = require('supertest');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// Mock database pool\njest.mock('../routes/db.js', () => ({\n  connect: jest.fn().mockResolvedValue({\n    query: jest.fn(),\n    release: jest.fn()\n  })\n}));\n\n// Mock bcrypt\njest.mock('bcryptjs', () => ({\n  genSalt: jest.fn().mockResolvedValue('mocksalt'),\n  hash: jest.fn().mockResolvedValue('mockhash'),\n  compare: jest.fn().mockResolvedValue(true)\n}));\n\n// Mock JWT\njest.mock('jsonwebtoken', () => ({\n  sign: jest.fn().mockReturnValue('mock.jwt.token')\n}));\n\nlet app;\n\ndescribe('Integration Tests - User Registration and Login', () => {\n  beforeAll(async () => {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    process.env.JWT_SECRET = 'test-secret';\n\n    // Import app after setting environment\n    const users = require('../routes/api/users');\n\n    app = express();\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    app.use('/api/users', users);\n  });\n\n  beforeEach(async () => {\n    // Reset mocks before each test\n    jest.clearAllMocks();\n  });\n\n  describe('Complete User Flow', () => {\n    const testUser = {\n      name: 'Integration Test User',\n      email: 'integration-test@example.com',\n      password: 'testpassword123',\n      password2: 'testpassword123',\n      location: '40.7128,-74.0060',\n      address: '123 Integration Test Street, New York, NY'\n    };\n\n    it('should complete full user registration and login flow', async () => {\n      // Mock successful registration\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, ...testUser }]\n      });\n\n      // Step 1: Register a new user\n      console.log('🧪 Testing user registration...');\n\n      const registerResponse = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(201);\n\n      console.log('✅ User registration successful');\n\n      // Step 2: Attempt login with the registered user\n      console.log('🧪 Testing user login...');\n\n      // Mock successful login query\n      mockClient.query.mockResolvedValueOnce({\n        rows: [{ id: 1, name: testUser.name, password: 'mockhash' }]\n      });\n\n      const loginResponse = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password\n        });\n\n      // Check if login was successful\n      if (loginResponse.status === 200) {\n        expect(loginResponse.body.token).toBeDefined();\n        expect(typeof loginResponse.body.token).toBe('string');\n        console.log('✅ User login successful');\n        console.log('🎟️  JWT Token received:', loginResponse.body.token.substring(0, 20) + '...');\n      } else {\n        console.log('❌ Login failed with status:', loginResponse.status);\n        console.log('Response body:', loginResponse.body);\n      }\n\n      // Verify the flow completed\n      expect(registerResponse.status).toBe(201);\n      expect(mockClient.query).toHaveBeenCalled();\n    });\n\n    it('should reject duplicate email registration', async () => {\n      const pool = require('../routes/db.js');\n      const mockClient = await pool.connect();\n      \n      // Mock duplicate email error\n      mockClient.query.mockRejectedValueOnce(new Error('duplicate key value violates unique constraint'));\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(400);\n\n      expect(response.body.error).toBeDefined();\n      expect(mockClient.query).toHaveBeenCalled();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}