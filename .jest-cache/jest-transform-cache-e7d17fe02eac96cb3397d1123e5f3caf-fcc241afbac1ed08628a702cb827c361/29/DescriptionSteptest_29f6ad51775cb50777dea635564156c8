6c9c776c5cc44f573ff93a85904a4a8d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _DescriptionStep = _interopRequireDefault(require("../DescriptionStep"));
var _jsxRuntime = require("react/jsx-runtime");
describe('DescriptionStep', () => {
  const mockUpdate = jest.fn();
  const mockForm = {
    description: 'Test description'
  };
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('renders without crashing', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));

    // Check for the heading text specifically
    expect(_react2.screen.getByRole('heading', {
      level: 3
    })).toHaveTextContent('Description');
    expect(_react2.screen.getByPlaceholderText('Describe the meal')).toBeInTheDocument();
    expect(_react2.screen.getByLabelText('Description')).toBeInTheDocument();
  });
  it('displays the current description value', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    expect(textarea.value).toBe('Test description');
  });
  it('calls update function when text changes', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    // Simulate a real change event
    _react2.fireEvent.change(textarea, {
      target: {
        value: 'New description',
        id: 'description'
      }
    });

    // The update function should be called with the event target (DOM element)
    expect(mockUpdate).toHaveBeenCalledWith(textarea);
  });
  it('has correct Material-UI props', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    // Material-UI v7 uses rows as a prop, not attribute
    expect(textarea).toHaveAttribute('rows', '4');
  });
  it('has proper styling classes', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));

    // The wizard-description class is applied to the FormControl wrapper, not the textarea
    const formControl = _react2.screen.getByLabelText('Description').closest('.MuiFormControl-root');
    expect(formControl).toHaveClass('wizard-description');
  });
  it('handles empty description', () => {
    const emptyForm = {
      description: ''
    };
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: emptyForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    expect(textarea.value).toBe('');
  });
  it('updates description correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    const newValue = 'Updated meal description';
    _react2.fireEvent.change(textarea, {
      target: {
        value: newValue,
        id: 'description'
      }
    });

    // The update function should be called with the DOM element
    expect(mockUpdate).toHaveBeenCalledWith(textarea);
  });
  it('maintains proper layout structure', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));

    // Check that the component has the expected structure
    expect(_react2.screen.getByRole('heading', {
      level: 3
    })).toHaveTextContent('Description');
    expect(_react2.screen.getByRole('textbox')).toBeInTheDocument();
  });
  it('has accessible label and placeholder', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    expect(textarea).toHaveAttribute('placeholder', 'Describe the meal');
    // Material-UI automatically creates the label association, no need for aria-label
  });
  it('renders with proper Grid and Box layout', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));

    // Check that Material-UI Grid and Box components are used
    const gridContainer = _react2.screen.getByLabelText('Description').closest('.MuiGrid-container');
    expect(gridContainer).toBeInTheDocument();
  });
  it('has multiline textarea', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DescriptionStep.default, {
      update: mockUpdate,
      form: mockForm
    }));
    const textarea = _react2.screen.getByLabelText('Description');
    // Check that the textarea has the multiline class
    expect(textarea).toHaveClass('MuiInputBase-inputMultiline');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfRGVzY3JpcHRpb25TdGVwIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsIm1vY2tVcGRhdGUiLCJqZXN0IiwiZm4iLCJtb2NrRm9ybSIsImRlc2NyaXB0aW9uIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJ1cGRhdGUiLCJmb3JtIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlSb2xlIiwibGV2ZWwiLCJ0b0hhdmVUZXh0Q29udGVudCIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJnZXRCeUxhYmVsVGV4dCIsInRleHRhcmVhIiwidmFsdWUiLCJ0b0JlIiwiZmlyZUV2ZW50IiwiY2hhbmdlIiwidGFyZ2V0IiwiaWQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvSGF2ZUF0dHJpYnV0ZSIsImZvcm1Db250cm9sIiwiY2xvc2VzdCIsInRvSGF2ZUNsYXNzIiwiZW1wdHlGb3JtIiwibmV3VmFsdWUiLCJncmlkQ29udGFpbmVyIl0sInNvdXJjZXMiOlsiRGVzY3JpcHRpb25TdGVwLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBEZXNjcmlwdGlvblN0ZXAgZnJvbSAnLi4vRGVzY3JpcHRpb25TdGVwJztcblxuZGVzY3JpYmUoJ0Rlc2NyaXB0aW9uU3RlcCcsICgpID0+IHtcbiAgY29uc3QgbW9ja1VwZGF0ZSA9IGplc3QuZm4oKTtcbiAgY29uc3QgbW9ja0Zvcm0gPSB7XG4gICAgZGVzY3JpcHRpb246ICdUZXN0IGRlc2NyaXB0aW9uJ1xuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RGVzY3JpcHRpb25TdGVwIHVwZGF0ZT17bW9ja1VwZGF0ZX0gZm9ybT17bW9ja0Zvcm19IC8+KTtcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgdGhlIGhlYWRpbmcgdGV4dCBzcGVjaWZpY2FsbHlcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbGV2ZWw6IDMgfSkpLnRvSGF2ZVRleHRDb250ZW50KCdEZXNjcmlwdGlvbicpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0Rlc2NyaWJlIHRoZSBtZWFsJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnRGVzY3JpcHRpb24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRoZSBjdXJyZW50IGRlc2NyaXB0aW9uIHZhbHVlJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RGVzY3JpcHRpb25TdGVwIHVwZGF0ZT17bW9ja1VwZGF0ZX0gZm9ybT17bW9ja0Zvcm19IC8+KTtcbiAgICBcbiAgICBjb25zdCB0ZXh0YXJlYSA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnRGVzY3JpcHRpb24nKTtcbiAgICBleHBlY3QodGV4dGFyZWEudmFsdWUpLnRvQmUoJ1Rlc3QgZGVzY3JpcHRpb24nKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIHVwZGF0ZSBmdW5jdGlvbiB3aGVuIHRleHQgY2hhbmdlcycsICgpID0+IHtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e21vY2tGb3JtfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0Rlc2NyaXB0aW9uJyk7XG4gICAgLy8gU2ltdWxhdGUgYSByZWFsIGNoYW5nZSBldmVudFxuICAgIGZpcmVFdmVudC5jaGFuZ2UodGV4dGFyZWEsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnTmV3IGRlc2NyaXB0aW9uJywgaWQ6ICdkZXNjcmlwdGlvbicgfSB9KTtcbiAgICBcbiAgICAvLyBUaGUgdXBkYXRlIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgZXZlbnQgdGFyZ2V0IChET00gZWxlbWVudClcbiAgICBleHBlY3QobW9ja1VwZGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgodGV4dGFyZWEpO1xuICB9KTtcblxuICBpdCgnaGFzIGNvcnJlY3QgTWF0ZXJpYWwtVUkgcHJvcHMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxEZXNjcmlwdGlvblN0ZXAgdXBkYXRlPXttb2NrVXBkYXRlfSBmb3JtPXttb2NrRm9ybX0gLz4pO1xuICAgIFxuICAgIGNvbnN0IHRleHRhcmVhID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdEZXNjcmlwdGlvbicpO1xuICAgIC8vIE1hdGVyaWFsLVVJIHY3IHVzZXMgcm93cyBhcyBhIHByb3AsIG5vdCBhdHRyaWJ1dGVcbiAgICBleHBlY3QodGV4dGFyZWEpLnRvSGF2ZUF0dHJpYnV0ZSgncm93cycsICc0Jyk7XG4gIH0pO1xuXG4gIGl0KCdoYXMgcHJvcGVyIHN0eWxpbmcgY2xhc3NlcycsICgpID0+IHtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e21vY2tGb3JtfSAvPik7XG4gICAgXG4gICAgLy8gVGhlIHdpemFyZC1kZXNjcmlwdGlvbiBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBGb3JtQ29udHJvbCB3cmFwcGVyLCBub3QgdGhlIHRleHRhcmVhXG4gICAgY29uc3QgZm9ybUNvbnRyb2wgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0Rlc2NyaXB0aW9uJykuY2xvc2VzdCgnLk11aUZvcm1Db250cm9sLXJvb3QnKTtcbiAgICBleHBlY3QoZm9ybUNvbnRyb2wpLnRvSGF2ZUNsYXNzKCd3aXphcmQtZGVzY3JpcHRpb24nKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgZW1wdHkgZGVzY3JpcHRpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgZW1wdHlGb3JtID0geyBkZXNjcmlwdGlvbjogJycgfTtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e2VtcHR5Rm9ybX0gLz4pO1xuICAgIFxuICAgIGNvbnN0IHRleHRhcmVhID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdEZXNjcmlwdGlvbicpO1xuICAgIGV4cGVjdCh0ZXh0YXJlYS52YWx1ZSkudG9CZSgnJyk7XG4gIH0pO1xuXG4gIGl0KCd1cGRhdGVzIGRlc2NyaXB0aW9uIGNvcnJlY3RseScsICgpID0+IHtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e21vY2tGb3JtfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0Rlc2NyaXB0aW9uJyk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSAnVXBkYXRlZCBtZWFsIGRlc2NyaXB0aW9uJztcbiAgICBcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHRleHRhcmVhLCB7IHRhcmdldDogeyB2YWx1ZTogbmV3VmFsdWUsIGlkOiAnZGVzY3JpcHRpb24nIH0gfSk7XG4gICAgXG4gICAgLy8gVGhlIHVwZGF0ZSBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIERPTSBlbGVtZW50XG4gICAgZXhwZWN0KG1vY2tVcGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRleHRhcmVhKTtcbiAgfSk7XG5cbiAgaXQoJ21haW50YWlucyBwcm9wZXIgbGF5b3V0IHN0cnVjdHVyZScsICgpID0+IHtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e21vY2tGb3JtfSAvPik7XG4gICAgXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgY29tcG9uZW50IGhhcyB0aGUgZXhwZWN0ZWQgc3RydWN0dXJlXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IGxldmVsOiAzIH0pKS50b0hhdmVUZXh0Q29udGVudCgnRGVzY3JpcHRpb24nKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgndGV4dGJveCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFzIGFjY2Vzc2libGUgbGFiZWwgYW5kIHBsYWNlaG9sZGVyJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RGVzY3JpcHRpb25TdGVwIHVwZGF0ZT17bW9ja1VwZGF0ZX0gZm9ybT17bW9ja0Zvcm19IC8+KTtcbiAgICBcbiAgICBjb25zdCB0ZXh0YXJlYSA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgnRGVzY3JpcHRpb24nKTtcbiAgICBleHBlY3QodGV4dGFyZWEpLnRvSGF2ZUF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCAnRGVzY3JpYmUgdGhlIG1lYWwnKTtcbiAgICAvLyBNYXRlcmlhbC1VSSBhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgdGhlIGxhYmVsIGFzc29jaWF0aW9uLCBubyBuZWVkIGZvciBhcmlhLWxhYmVsXG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHdpdGggcHJvcGVyIEdyaWQgYW5kIEJveCBsYXlvdXQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxEZXNjcmlwdGlvblN0ZXAgdXBkYXRlPXttb2NrVXBkYXRlfSBmb3JtPXttb2NrRm9ybX0gLz4pO1xuICAgIFxuICAgIC8vIENoZWNrIHRoYXQgTWF0ZXJpYWwtVUkgR3JpZCBhbmQgQm94IGNvbXBvbmVudHMgYXJlIHVzZWRcbiAgICBjb25zdCBncmlkQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdEZXNjcmlwdGlvbicpLmNsb3Nlc3QoJy5NdWlHcmlkLWNvbnRhaW5lcicpO1xuICAgIGV4cGVjdChncmlkQ29udGFpbmVyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFzIG11bHRpbGluZSB0ZXh0YXJlYScsICgpID0+IHtcbiAgICByZW5kZXIoPERlc2NyaXB0aW9uU3RlcCB1cGRhdGU9e21vY2tVcGRhdGV9IGZvcm09e21vY2tGb3JtfSAvPik7XG4gICAgXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0Rlc2NyaXB0aW9uJyk7XG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgdGV4dGFyZWEgaGFzIHRoZSBtdWx0aWxpbmUgY2xhc3NcbiAgICBleHBlY3QodGV4dGFyZWEpLnRvSGF2ZUNsYXNzKCdNdWlJbnB1dEJhc2UtaW5wdXRNdWx0aWxpbmUnKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsZ0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFpRCxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFakRJLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNO0VBQ2hDLE1BQU1DLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUM1QixNQUFNQyxRQUFRLEdBQUc7SUFDZkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUVEQyxVQUFVLENBQUMsTUFBTTtJQUNmSixJQUFJLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtJQUNuQyxJQUFBQyxjQUFNLGVBQUMsSUFBQVYsV0FBQSxDQUFBVyxHQUFBLEVBQUNaLGdCQUFBLENBQUFhLE9BQWU7TUFBQ0MsTUFBTSxFQUFFWCxVQUFXO01BQUNZLElBQUksRUFBRVQ7SUFBUyxDQUFFLENBQUMsQ0FBQzs7SUFFL0Q7SUFDQVUsTUFB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