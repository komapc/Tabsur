69b4adb44836cae36600fc3619d23fc2
"use strict";

const fcm = require('../firebaseCloudMessages');
const pool = require('../db.js');
const pushNotification = (notification, registration_ids) => {
  return fcm.sendNotification(JSON.stringify({
    notification: notification,
    'registration_ids': registration_ids !== null && registration_ids.length > 0 ? registration_ids.split(';') : ''
  })).then(response => {
    console.log(JSON.stringify(`Got a response from fcm: ${JSON.stringify(response)}`));
    return response;
  }).catch(error => {
    console.error(`Error in sendNotification: ${JSON.stringify(error)}`);
    return error;
  }).finally(() => {
    console.log('pushNotification done.');
  });
};
const addNotificationToDB = async message => {
  //example of param:
  // const message =
  // {
  //   title: 'Attend',
  //   body:  'A user wants to join your meal',
  //   icon: 'resources/Message-Bubble-icon.png',
  //   click_action: '/Meals/',
  //   receiver: attend.user_id,
  //   meal_id:  attend.meal_id,
  //   sender: -1,
  //   type: 5
  // }

  const query = `
  INSERT INTO notifications (meal_id, receiver, message_text, sender, note_type, 
        click_action, icon, title) 
      VALUES (
       $1, $2, $3, $4, $5, $6, $7, $8)

    RETURNING (
            SELECT array_to_string(array_agg(token),';') 
            AS tokens 
            FROM user_tokens
            WHERE user_id=$2 
          )
    `;
  const client = await pool.connect();
  console.log(`Connected.`);
  return client.query(query, [message.meal_id, message.receiver, message.body, message.sender, message.type, message.click_action, message.icon, message.title]).then(resp => {
    console.log(`Message inserted successfully.`);
    console.log(`Fetched ${resp.rows?.length || 0} notification tokens`);
    return resp;
  }).catch(error => {
    console.error(`error: ${JSON.stringify(error)}`);
    return error;
  }).finally(() => {
    client.release();
  });
};

//add notificatin/message to the DB + push
const addNotification = async notification => {
  return addNotificationToDB(notification).then(resp => {
    const tokens = resp.rows[0].tokens;
    console.log(`Prepared ${tokens?.length || 0} tokens for push`);
    return pushNotification(notification, tokens).then(answer => {
      console.log(`Answer: ${JSON.stringify(answer)}.`);
      return answer;
    }).catch(error => {
      console.error(`pushNotification failed: ${JSON.stringify(error)}.`);
    });
  }).catch(error => {
    console.error(`addNotificationToDB failed: ${JSON.stringify(error)}.`);
  });
};
module.exports = addNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmY20iLCJyZXF1aXJlIiwicG9vbCIsInB1c2hOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb24iLCJyZWdpc3RyYXRpb25faWRzIiwic2VuZE5vdGlmaWNhdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJsZW5ndGgiLCJzcGxpdCIsInRoZW4iLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVycm9yIiwiZmluYWxseSIsImFkZE5vdGlmaWNhdGlvblRvREIiLCJtZXNzYWdlIiwicXVlcnkiLCJjbGllbnQiLCJjb25uZWN0IiwibWVhbF9pZCIsInJlY2VpdmVyIiwiYm9keSIsInNlbmRlciIsInR5cGUiLCJjbGlja19hY3Rpb24iLCJpY29uIiwidGl0bGUiLCJyZXNwIiwicm93cyIsInJlbGVhc2UiLCJhZGROb3RpZmljYXRpb24iLCJ0b2tlbnMiLCJhbnN3ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibm90aWZpY2F0aW9uc1B1c2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmNtID0gcmVxdWlyZSgnLi4vZmlyZWJhc2VDbG91ZE1lc3NhZ2VzJyk7XG5jb25zdCBwb29sID0gcmVxdWlyZSgnLi4vZGIuanMnKTtcblxuY29uc3QgcHVzaE5vdGlmaWNhdGlvbiA9IChub3RpZmljYXRpb24sIHJlZ2lzdHJhdGlvbl9pZHMpID0+IHtcbiAgcmV0dXJuIGZjbS5zZW5kTm90aWZpY2F0aW9uKEpTT04uc3RyaW5naWZ5KHtcbiAgICBub3RpZmljYXRpb246IG5vdGlmaWNhdGlvbixcbiAgICAncmVnaXN0cmF0aW9uX2lkcyc6IHJlZ2lzdHJhdGlvbl9pZHMgIT09IG51bGwgJiYgcmVnaXN0cmF0aW9uX2lkcy5sZW5ndGggPiAwID8gcmVnaXN0cmF0aW9uX2lkcy5zcGxpdCgnOycpIDogJydcbiAgfSkpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYEdvdCBhIHJlc3BvbnNlIGZyb20gZmNtOiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX1gKSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gc2VuZE5vdGlmaWNhdGlvbjogJHtKU09OLnN0cmluZ2lmeShlcnJvcil9YCk7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncHVzaE5vdGlmaWNhdGlvbiBkb25lLicpO1xuICAgIH0pO1xufTtcblxuY29uc3QgYWRkTm90aWZpY2F0aW9uVG9EQiA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG5cbiAgLy9leGFtcGxlIG9mIHBhcmFtOlxuICAvLyBjb25zdCBtZXNzYWdlID1cbiAgLy8ge1xuICAvLyAgIHRpdGxlOiAnQXR0ZW5kJyxcbiAgLy8gICBib2R5OiAgJ0EgdXNlciB3YW50cyB0byBqb2luIHlvdXIgbWVhbCcsXG4gIC8vICAgaWNvbjogJ3Jlc291cmNlcy9NZXNzYWdlLUJ1YmJsZS1pY29uLnBuZycsXG4gIC8vICAgY2xpY2tfYWN0aW9uOiAnL01lYWxzLycsXG4gIC8vICAgcmVjZWl2ZXI6IGF0dGVuZC51c2VyX2lkLFxuICAvLyAgIG1lYWxfaWQ6ICBhdHRlbmQubWVhbF9pZCxcbiAgLy8gICBzZW5kZXI6IC0xLFxuICAvLyAgIHR5cGU6IDVcbiAgLy8gfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gYFxuICBJTlNFUlQgSU5UTyBub3RpZmljYXRpb25zIChtZWFsX2lkLCByZWNlaXZlciwgbWVzc2FnZV90ZXh0LCBzZW5kZXIsIG5vdGVfdHlwZSwgXG4gICAgICAgIGNsaWNrX2FjdGlvbiwgaWNvbiwgdGl0bGUpIFxuICAgICAgVkFMVUVTIChcbiAgICAgICAkMSwgJDIsICQzLCAkNCwgJDUsICQ2LCAkNywgJDgpXG5cbiAgICBSRVRVUk5JTkcgKFxuICAgICAgICAgICAgU0VMRUNUIGFycmF5X3RvX3N0cmluZyhhcnJheV9hZ2codG9rZW4pLCc7JykgXG4gICAgICAgICAgICBBUyB0b2tlbnMgXG4gICAgICAgICAgICBGUk9NIHVzZXJfdG9rZW5zXG4gICAgICAgICAgICBXSEVSRSB1c2VyX2lkPSQyIFxuICAgICAgICAgIClcbiAgICBgO1xuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcbiAgY29uc29sZS5sb2coYENvbm5lY3RlZC5gKTtcbiAgcmV0dXJuIGNsaWVudC5xdWVyeShxdWVyeSxcbiAgICBbbWVzc2FnZS5tZWFsX2lkLFxuICAgICAgbWVzc2FnZS5yZWNlaXZlcixcbiAgICAgIG1lc3NhZ2UuYm9keSxcbiAgICAgIG1lc3NhZ2Uuc2VuZGVyLFxuICAgICAgbWVzc2FnZS50eXBlLFxuICAgICAgbWVzc2FnZS5jbGlja19hY3Rpb24sXG4gICAgICBtZXNzYWdlLmljb24sXG4gICAgICBtZXNzYWdlLnRpdGxlXG4gICAgXSlcbiAgICAudGhlbihyZXNwID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBNZXNzYWdlIGluc2VydGVkIHN1Y2Nlc3NmdWxseS5gKTtcbiAgICAgIGNvbnNvbGUubG9nKGBGZXRjaGVkICR7cmVzcC5yb3dzPy5sZW5ndGggfHwgMH0gbm90aWZpY2F0aW9uIHRva2Vuc2ApO1xuICAgICAgcmV0dXJuIHJlc3A7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgZXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoZXJyb3IpfWApO1xuICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgICB9KTtcbn07XG5cbi8vYWRkIG5vdGlmaWNhdGluL21lc3NhZ2UgdG8gdGhlIERCICsgcHVzaFxuY29uc3QgYWRkTm90aWZpY2F0aW9uID0gYXN5bmMgKG5vdGlmaWNhdGlvbikgPT4ge1xuICByZXR1cm4gYWRkTm90aWZpY2F0aW9uVG9EQihub3RpZmljYXRpb24pXG4gICAgLnRoZW4ocmVzcCA9PiB7XG4gICAgICBjb25zdCB0b2tlbnMgPSByZXNwLnJvd3NbMF0udG9rZW5zO1xuICAgICAgY29uc29sZS5sb2coYFByZXBhcmVkICR7dG9rZW5zPy5sZW5ndGggfHwgMH0gdG9rZW5zIGZvciBwdXNoYCk7XG4gICAgICByZXR1cm4gcHVzaE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHRva2VucylcbiAgICAgICAgLnRoZW4oYW5zd2VyID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgQW5zd2VyOiAke0pTT04uc3RyaW5naWZ5KGFuc3dlcil9LmApO1xuICAgICAgICAgIHJldHVybiBhbnN3ZXI7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgcHVzaE5vdGlmaWNhdGlvbiBmYWlsZWQ6ICR7SlNPTi5zdHJpbmdpZnkoZXJyb3IpfS5gKTtcbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihgYWRkTm90aWZpY2F0aW9uVG9EQiBmYWlsZWQ6ICR7SlNPTi5zdHJpbmdpZnkoZXJyb3IpfS5gKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkTm90aWZpY2F0aW9uOyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUMvQyxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFaEMsTUFBTUUsZ0JBQWdCLEdBQUdBLENBQUNDLFlBQVksRUFBRUMsZ0JBQWdCLEtBQUs7RUFDM0QsT0FBT0wsR0FBRyxDQUFDTSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUM7SUFDekNKLFlBQVksRUFBRUEsWUFBWTtJQUMxQixrQkFBa0IsRUFBRUMsZ0JBQWdCLEtBQUssSUFB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