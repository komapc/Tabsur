7e067d04d9d1f0e1ced7fc3d25712a6b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _MapLocationSelector = _interopRequireDefault(require("./../MapLocationSelector"));
var _material = require("@mui/material");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const LocationStep = props => {
  const [showMap, setMapVisibility] = (0, _react.useState)(false);
  const [address, setAddress] = (0, _react.useState)(props.location);
  const defaultLocationConst = {
    lng: 34.808,
    lat: 32.09
  };
  const [defaultLocation, updateDefaultLocation] = (0, _react.useState)(defaultLocationConst);
  const onLocationUpdate = ({
    address,
    location
  }) => {
    props.update({
      "id": "address",
      "value": address
    });
    props.update({
      "id": "location",
      "value": location
    });
    console.log(`onLocationUpdate: ${address}; location: ${JSON.stringify(location)}`);
    setAddress(address);
    updateDefaultLocation(location);
  };
  const onMapExit = e => {
    console.log(`Exit map clicked: ${showMap}.`);
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    setMapVisibility(false);
  };
  const onChange = e => {
    props.update(e.target);
    onMapExit();
  };
  const onAddressClickHandle = e => {
    e.target.blur();
    e.preventDefault();
    e.stopPropagation();
    setMapVisibility(true);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Grid, {
      container: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
        style: {
          marginLeft: "40px"
        },
        display: showMap ? 'none' : 'block',
        children: "Meal Location"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
        m: 2,
        p: 2,
        width: 1,
        display: showMap ? 'none' : 'block',
        onClick: onAddressClickHandle,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.TextField, {
          width: 1,
          fullWidth: true,
          variant: "outlined",
          onChange: onChange,
          value: props.form.address,
          error: props.form.address.trim() === "",
          id: "address",
          label: "Location",
          placeholder: "Address",
          helperText: props.form.address.trim() === "" ? "Empty" : ""
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: 'createMealMap',
        hidden: !showMap,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MapLocationSelector.default, {
          handleLocationUpdate: onLocationUpdate,
          defaultLocation: defaultLocation,
          address: address,
          handleExit: onMapExit,
          zoom: 10
        })
      })]
    })
  });
};
var _default = exports.default = LocationStep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfTWFwTG9jYXRpb25TZWxlY3RvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbWF0ZXJpYWwiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkxvY2F0aW9uU3RlcCIsInByb3BzIiwic2hvd01hcCIsInNldE1hcFZpc2liaWxpdHkiLCJ1c2VTdGF0ZSIsImFkZHJlc3MiLCJzZXRBZGRyZXNzIiwibG9jYXRpb24iLCJkZWZhdWx0TG9jYXRpb25Db25zdCIsImxuZyIsImxhdCIsImRlZmF1bHRMb2NhdGlvbiIsInVwZGF0ZURlZmF1bHRMb2NhdGlvbiIsIm9uTG9jYXRpb25VcGRhdGUiLCJ1cGRhdGUiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uTWFwRXhpdCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJvbkFkZHJlc3NDbGlja0hhbmRsZSIsImJsdXIiLCJqc3giLCJGcmFnbWVudCIsImNoaWxkcmVuIiwianN4cyIsIkdyaWQiLCJjb250YWluZXIiLCJzdHlsZSIsIm1hcmdpbkxlZnQiLCJkaXNwbGF5IiwiQm94IiwibSIsInAiLCJ3aWR0aCIsIm9uQ2xpY2siLCJUZXh0RmllbGQiLCJmdWxsV2lkdGgiLCJ2YXJpYW50IiwidmFsdWUiLCJmb3JtIiwiZXJyb3IiLCJ0cmltIiwiaWQiLCJsYWJlbCIsInBsYWNlaG9sZGVyIiwiaGVscGVyVGV4dCIsImNsYXNzTmFtZSIsImhpZGRlbiIsImhhbmRsZUxvY2F0aW9uVXBkYXRlIiwiaGFuZGxlRXhpdCIsInpvb20iLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJMb2NhdGlvblN0ZXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IE1hcExvY2F0aW9uU2VsZWN0b3IgZnJvbSBcIi4vLi4vTWFwTG9jYXRpb25TZWxlY3RvclwiO1xuaW1wb3J0IHsgVGV4dEZpZWxkLCBHcmlkLCBCb3ggfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmNvbnN0IExvY2F0aW9uU3RlcCA9IHByb3BzID0+IHtcbiAgY29uc3QgW3Nob3dNYXAsIHNldE1hcFZpc2liaWxpdHldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWRkcmVzcywgc2V0QWRkcmVzc10gPSB1c2VTdGF0ZShwcm9wcy5sb2NhdGlvbik7XG4gIGNvbnN0IGRlZmF1bHRMb2NhdGlvbkNvbnN0ID0geyBsbmc6IDM0LjgwOCwgbGF0OiAzMi4wOSB9O1xuXG4gIGNvbnN0IFtkZWZhdWx0TG9jYXRpb24sIHVwZGF0ZURlZmF1bHRMb2NhdGlvbl0gPSB1c2VTdGF0ZShkZWZhdWx0TG9jYXRpb25Db25zdCk7XG4gIGNvbnN0IG9uTG9jYXRpb25VcGRhdGUgPSAoeyBhZGRyZXNzLCBsb2NhdGlvbiB9KSA9PiB7XG4gICAgcHJvcHMudXBkYXRlKHsgXCJpZFwiOiBcImFkZHJlc3NcIiwgXCJ2YWx1ZVwiOiBhZGRyZXNzIH0pO1xuICAgIHByb3BzLnVwZGF0ZSh7IFwiaWRcIjogXCJsb2NhdGlvblwiLCBcInZhbHVlXCI6IGxvY2F0aW9uIH0pO1xuICAgIGNvbnNvbGUubG9nKGBvbkxvY2F0aW9uVXBkYXRlOiAke2FkZHJlc3N9OyBsb2NhdGlvbjogJHtKU09OLnN0cmluZ2lmeShsb2NhdGlvbil9YCk7XG4gICAgc2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICB1cGRhdGVEZWZhdWx0TG9jYXRpb24obG9jYXRpb24pO1xuICB9O1xuXG4gIGNvbnN0IG9uTWFwRXhpdCA9IChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coYEV4aXQgbWFwIGNsaWNrZWQ6ICR7c2hvd01hcH0uYCk7XG4gICAgaWYgKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIHNldE1hcFZpc2liaWxpdHkoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gZSA9PiB7XG4gICAgcHJvcHMudXBkYXRlKGUudGFyZ2V0KTtcbiAgICBvbk1hcEV4aXQoKTtcbiAgfTtcblxuICBjb25zdCBvbkFkZHJlc3NDbGlja0hhbmRsZSA9IGUgPT4ge1xuICAgIGUudGFyZ2V0LmJsdXIoKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBzZXRNYXBWaXNpYmlsaXR5KHRydWUpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZGRyZXNzKi99XG4gICAgICB7LyogPGltZyBjbGFzc05hbWU9XCJtZWFsLWluZm8tbG9jYXRpb24taWNvbnNcIiBzcmM9e2xvY2F0aW9uSWNvbn0gYWx0PVwibG9jYXRpb25cIiAvPiAqL31cbiAgICAgIDxHcmlkIGNvbnRhaW5lcj5cbiAgICAgICAgPGgzIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiNDBweFwiIH19IGRpc3BsYXk9e3Nob3dNYXAgPyAnbm9uZScgOiAnYmxvY2snfSA+TWVhbCBMb2NhdGlvbjwvaDM+XG4gICAgICAgIDxCb3ggbT17Mn0gcD17Mn0gd2lkdGg9ezF9IGRpc3BsYXk9e3Nob3dNYXAgPyAnbm9uZScgOiAnYmxvY2snfSBvbkNsaWNrPXtvbkFkZHJlc3NDbGlja0hhbmRsZX0gPlxuICAgICAgICAgIDxUZXh0RmllbGQgd2lkdGg9ezF9IGZ1bGxXaWR0aCB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgdmFsdWU9e3Byb3BzLmZvcm0uYWRkcmVzc31cbiAgICAgICAgICAgIGVycm9yPXtwcm9wcy5mb3JtLmFkZHJlc3MudHJpbSgpID09PSBcIlwifVxuICAgICAgICAgICAgaWQ9XCJhZGRyZXNzXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTG9jYXRpb25cIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBZGRyZXNzXCJcbiAgICAgICAgICAgIGhlbHBlclRleHQ9e3Byb3BzLmZvcm0uYWRkcmVzcy50cmltKCkgPT09IFwiXCIgPyBcIkVtcHR5XCIgOiBcIlwifVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQm94ID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eydjcmVhdGVNZWFsTWFwJ30gaGlkZGVuPXshc2hvd01hcH0+XG4gICAgICAgICAgPE1hcExvY2F0aW9uU2VsZWN0b3JcbiAgICAgICAgICAgIGhhbmRsZUxvY2F0aW9uVXBkYXRlPXtvbkxvY2F0aW9uVXBkYXRlfVxuICAgICAgICAgICAgZGVmYXVsdExvY2F0aW9uPXtkZWZhdWx0TG9jYXRpb259XG4gICAgICAgICAgICBhZGRyZXNzPXthZGRyZXNzfVxuICAgICAgICAgICAgaGFuZGxlRXhpdD17b25NYXBFeGl0fVxuICAgICAgICAgICAgem9vbT17MTB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0dyaWQ+XG4gICAgPC8+XG4gICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgTG9jYXRpb25TdGVwOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLG9CQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxTQUFBLEdBQUFILE9BQUE7QUFBcUQsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQUQsd0JBQUFNLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEs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