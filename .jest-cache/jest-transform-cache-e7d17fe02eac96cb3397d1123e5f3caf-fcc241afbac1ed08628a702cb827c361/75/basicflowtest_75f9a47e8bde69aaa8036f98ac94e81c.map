{"version":3,"names":["describe","beforeEach","window","localStorage","clear","sessionStorage","test","expect","toBe","validateEmail","email","emailRegex","validatePassword","password","Boolean","length","undefined","navigationState","currentTab","tabs","navigateToTab","index","getNextTab","current","getPreviousTab","validateMeal","meal","name","description","date","time","location","maxAttendees","validMeal","invalidMeal","validateMealDate","dateString","mealDate","Date","today","setHours","toISOString","split","tomorrow","setDate","getDate","tomorrowString","yesterday","yesterdayString","validateUser","user","validUser","invalidUser","validateEmailFormat","sanitizeInput","input","replace","trim","cleanInput","maliciousInput","emptyInput","validateToken","token","parts","validToken","invalidToken","emptyToken","buildApiUrl","baseUrl","endpoint","params","url","URL","Object","keys","forEach","key","searchParams","append","toString","search","limit","expectedUrl","handleApiError","error","response","type","status","message","data","request","apiError","networkError","unknownError","getBreakpoint","width","loadingStates","idle","loading","success","updateLoadingState","currentState","action","state","userFlow","steps","currentStep","completed","nextStep","flow","completeStep","stepIndex","push","getProgress","toHaveLength","toContain"],"sources":["basic-flow.test.js"],"sourcesContent":["/**\n * 🧪 Basic E2E Flow Tests for Tabsur App\n *\n * This test suite covers basic user flows:\n * - User registration and login\n * - Basic navigation\n * - Error handling\n */\n\ndescribe('🧪 Basic Tabsur App Flow Tests', () => {\n  beforeEach(() => {\n    // Clear any stored data\n    if (typeof window !== 'undefined') {\n      localStorage.clear();\n      sessionStorage.clear();\n    }\n  });\n\n  describe('🔐 Basic Authentication Flow', () => {\n    test('✅ App can start without crashing', () => {\n      // Basic test to ensure the test environment works\n      expect(true).toBe(true);\n    });\n\n    test('✅ Basic form validation works', () => {\n      // Test basic form validation logic\n      const validateEmail = (email) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n      };\n\n      expect(validateEmail('test@example.com')).toBe(true);\n      expect(validateEmail('invalid-email')).toBe(false);\n      expect(validateEmail('')).toBe(false);\n    });\n\n    test('✅ Password validation works', () => {\n      // Test password validation logic\n      const validatePassword = (password) => {\n        return Boolean(password && password.length >= 6);\n      };\n\n      expect(validatePassword('password123')).toBe(true);\n      expect(validatePassword('123')).toBe(false);\n      expect(validatePassword('')).toBe(false);\n      expect(validatePassword(null)).toBe(false);\n      expect(validatePassword(undefined)).toBe(false);\n    });\n  });\n\n  describe('🧭 Basic Navigation Logic', () => {\n    test('✅ Navigation state management works', () => {\n      // Test basic navigation state logic\n      const navigationState = {\n        currentTab: 0,\n        tabs: ['meals', 'profile', 'my-meals', 'chat']\n      };\n\n      const navigateToTab = (index) => {\n        if (index >= 0 && index < navigationState.tabs.length) {\n          navigationState.currentTab = index;\n          return true;\n        }\n        return false;\n      };\n\n      expect(navigateToTab(1)).toBe(true);\n      expect(navigationState.currentTab).toBe(1);\n      expect(navigateToTab(5)).toBe(false);\n      expect(navigationState.currentTab).toBe(1); // Should not change\n    });\n\n    test('✅ Tab switching logic works', () => {\n      // Test tab switching logic\n      const tabs = ['meals', 'profile', 'my-meals', 'chat'];\n      const currentTab = 0;\n\n      const getNextTab = (current) => {\n        return (current + 1) % tabs.length;\n      };\n\n      const getPreviousTab = (current) => {\n        return current === 0 ? tabs.length - 1 : current - 1;\n      };\n\n      expect(getNextTab(0)).toBe(1);\n      expect(getNextTab(3)).toBe(0);\n      expect(getPreviousTab(0)).toBe(3);\n      expect(getPreviousTab(2)).toBe(1);\n    });\n  });\n\n  describe('🍽️ Basic Meal Logic', () => {\n    test('✅ Meal data validation works', () => {\n      // Test meal data validation\n      const validateMeal = (meal) => {\n        return Boolean(meal.name &&\n               meal.description &&\n               meal.date &&\n               meal.time &&\n               meal.location &&\n               meal.maxAttendees > 0);\n      };\n\n      const validMeal = {\n        name: 'Test Meal',\n        description: 'A delicious test meal',\n        date: '2025-08-20',\n        time: '19:00',\n        location: 'Test Location',\n        maxAttendees: 5\n      };\n\n      const invalidMeal = {\n        name: 'Test Meal',\n        description: '',\n        date: '2025-08-20',\n        time: '19:00',\n        location: 'Test Location',\n        maxAttendees: -1\n      };\n\n      expect(validateMeal(validMeal)).toBe(true);\n      expect(validateMeal(invalidMeal)).toBe(false);\n    });\n\n    test('✅ Meal date validation works', () => {\n      // Test meal date validation\n      const validateMealDate = (dateString) => {\n        const mealDate = new Date(dateString);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n\n        return mealDate >= today;\n      };\n\n      const today = new Date().toISOString().split('T')[0];\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const tomorrowString = tomorrow.toISOString().split('T')[0];\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toISOString().split('T')[0];\n\n      expect(validateMealDate(today)).toBe(true);\n      expect(validateMealDate(tomorrowString)).toBe(true);\n      expect(validateMealDate(yesterdayString)).toBe(false);\n    });\n  });\n\n  describe('👤 Basic User Logic', () => {\n    test('✅ User data validation works', () => {\n      // Test user data validation\n      const validateUser = (user) => {\n        return user.name &&\n               user.email &&\n               user.password &&\n               user.name.length >= 2 &&\n               user.password.length >= 6;\n      };\n\n      const validUser = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const invalidUser = {\n        name: 'T',\n        email: 'invalid-email',\n        password: '123'\n      };\n\n      expect(validateUser(validUser)).toBe(true);\n      expect(validateUser(invalidUser)).toBe(false);\n    });\n\n    test('✅ Email format validation works', () => {\n      // Test email format validation\n      const validateEmailFormat = (email) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n      };\n\n      expect(validateEmailFormat('test@example.com')).toBe(true);\n      expect(validateEmailFormat('user.name@domain.co.uk')).toBe(true);\n      expect(validateEmailFormat('invalid-email')).toBe(false);\n      expect(validateEmailFormat('test@')).toBe(false);\n      expect(validateEmailFormat('@domain.com')).toBe(false);\n      expect(validateEmailFormat('')).toBe(false);\n    });\n  });\n\n  describe('🔒 Basic Security Logic', () => {\n    test('✅ Input sanitization works', () => {\n      // Test basic input sanitization\n      const sanitizeInput = (input) => {\n        if (typeof input !== 'string') return '';\n\n        // Remove script tags and dangerous content\n        return input\n          .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n          .replace(/javascript:/gi, '')\n          .replace(/on\\w+\\s*=/gi, '')\n          .trim();\n      };\n\n      const cleanInput = 'Hello World';\n      const maliciousInput = '<script>alert(\"xss\")</script>Hello World';\n      const emptyInput = '';\n\n      expect(sanitizeInput(cleanInput)).toBe('Hello World');\n      expect(sanitizeInput(maliciousInput)).toBe('Hello World');\n      expect(sanitizeInput(emptyInput)).toBe('');\n      expect(sanitizeInput(null)).toBe('');\n      expect(sanitizeInput(undefined)).toBe('');\n    });\n\n    test('✅ JWT token validation works', () => {\n      // Test JWT token validation logic\n      const validateToken = (token) => {\n        if (!token || typeof token !== 'string') return false;\n\n        // Basic JWT format validation (header.payload.signature)\n        const parts = token.split('.');\n        return parts.length === 3;\n      };\n\n      const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n      const invalidToken = 'invalid-token';\n      const emptyToken = '';\n\n      expect(validateToken(validToken)).toBe(true);\n      expect(validateToken(invalidToken)).toBe(false);\n      expect(validateToken(emptyToken)).toBe(false);\n      expect(validateToken(null)).toBe(false);\n      expect(validateToken(undefined)).toBe(false);\n    });\n  });\n\n  describe('🌐 Basic API Logic', () => {\n    test('✅ API endpoint construction works', () => {\n      // Test API endpoint construction\n      const buildApiUrl = (baseUrl, endpoint, params = {}) => {\n        const url = new URL(endpoint, baseUrl);\n\n        Object.keys(params).forEach(key => {\n          if (params[key] !== null && params[key] !== undefined) {\n            url.searchParams.append(key, params[key]);\n          }\n        });\n\n        return url.toString();\n      };\n\n      const baseUrl = 'https://api.bemyguest.dedyn.io';\n      const endpoint = '/api/meals';\n      const params = { search: 'pizza', limit: 10 };\n\n      const expectedUrl = 'https://api.bemyguest.dedyn.io/api/meals?search=pizza&limit=10';\n      expect(buildApiUrl(baseUrl, endpoint, params)).toBe(expectedUrl);\n    });\n\n    test('✅ Error handling logic works', () => {\n      // Test error handling logic\n      const handleApiError = (error) => {\n        if (error.response) {\n          // Server responded with error status\n          return {\n            type: 'API_ERROR',\n            status: error.response.status,\n            message: error.response.data?.message || 'API Error',\n            data: error.response.data\n          };\n        } else if (error.request) {\n          // Request made but no response\n          return {\n            type: 'NETWORK_ERROR',\n            message: 'Network Error - No response received',\n            request: error.request\n          };\n        } else {\n          // Something else happened\n          return {\n            type: 'UNKNOWN_ERROR',\n            message: error.message || 'Unknown error occurred',\n            error: error\n          };\n        }\n      };\n\n      const apiError = {\n        response: {\n          status: 400,\n          data: { message: 'Bad Request' }\n        }\n      };\n\n      const networkError = {\n        request: {},\n        message: 'Network Error'\n      };\n\n      const unknownError = {\n        message: 'Something went wrong'\n      };\n\n      expect(handleApiError(apiError).type).toBe('API_ERROR');\n      expect(handleApiError(apiError).status).toBe(400);\n      expect(handleApiError(networkError).type).toBe('NETWORK_ERROR');\n      expect(handleApiError(unknownError).type).toBe('UNKNOWN_ERROR');\n    });\n  });\n\n  describe('📱 Basic UI Logic', () => {\n    test('✅ Responsive breakpoint logic works', () => {\n      // Test responsive breakpoint logic\n      const getBreakpoint = (width) => {\n        if (width < 576) return 'xs';\n        if (width < 768) return 'sm';\n        if (width < 992) return 'md';\n        if (width < 1200) return 'lg';\n        return 'xl';\n      };\n\n      expect(getBreakpoint(375)).toBe('xs');\n      expect(getBreakpoint(576)).toBe('sm');\n      expect(getBreakpoint(768)).toBe('md');\n      expect(getBreakpoint(992)).toBe('lg');\n      expect(getBreakpoint(1200)).toBe('xl');\n      expect(getBreakpoint(1920)).toBe('xl');\n    });\n\n    test('✅ Loading state management works', () => {\n      // Test loading state management\n      const loadingStates = {\n        idle: 'idle',\n        loading: 'loading',\n        success: 'success',\n        error: 'error'\n      };\n\n      const updateLoadingState = (currentState, action) => {\n        switch (action) {\n        case 'START_LOADING':\n          return loadingStates.loading;\n        case 'LOADING_SUCCESS':\n          return loadingStates.success;\n        case 'LOADING_ERROR':\n          return loadingStates.error;\n        case 'RESET':\n          return loadingStates.idle;\n        default:\n          return currentState;\n        }\n      };\n\n      let state = loadingStates.idle;\n\n      state = updateLoadingState(state, 'START_LOADING');\n      expect(state).toBe(loadingStates.loading);\n\n      state = updateLoadingState(state, 'LOADING_SUCCESS');\n      expect(state).toBe(loadingStates.success);\n\n      state = updateLoadingState(state, 'RESET');\n      expect(state).toBe(loadingStates.idle);\n    });\n  });\n\n  describe('🔄 Integration Flow Logic', () => {\n    test('✅ Complete user flow logic works', () => {\n      // Test complete user flow logic\n      const userFlow = {\n        steps: ['register', 'login', 'create-meal', 'view-profile'],\n        currentStep: 0,\n        completed: []\n      };\n\n      const nextStep = (flow) => {\n        if (flow.currentStep < flow.steps.length - 1) {\n          flow.currentStep++;\n          return true;\n        }\n        return false;\n      };\n\n      const completeStep = (flow, stepIndex) => {\n        if (stepIndex >= 0 && stepIndex < flow.steps.length) {\n          flow.completed.push(flow.steps[stepIndex]);\n          return true;\n        }\n        return false;\n      };\n\n      const getProgress = (flow) => {\n        return (flow.completed.length / flow.steps.length) * 100;\n      };\n\n      // Simulate user flow\n      expect(userFlow.currentStep).toBe(0);\n      expect(userFlow.completed).toHaveLength(0);\n      expect(getProgress(userFlow)).toBe(0);\n\n      // Complete first step\n      expect(completeStep(userFlow, 0)).toBe(true);\n      expect(userFlow.completed).toContain('register');\n      expect(getProgress(userFlow)).toBe(25);\n\n      // Move to next step\n      expect(nextStep(userFlow)).toBe(true);\n      expect(userFlow.currentStep).toBe(1);\n\n      // Complete more steps\n      completeStep(userFlow, 1);\n      completeStep(userFlow, 2);\n      completeStep(userFlow, 3);\n\n      expect(getProgress(userFlow)).toBe(100);\n      expect(userFlow.completed).toHaveLength(4);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}