324da7f3817b97f0bfce034afa6ff21c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _material = require("@mui/material");
var _iconsMaterial = require("@mui/icons-material");
var _jsxRuntime = require("react/jsx-runtime");
class ErrorBoundary extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null
    };
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI
    return {
      hasError: true
    };
  }
  componentDidCatch(error, errorInfo) {
    // Log error details
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    this.setState({
      error: error,
      errorInfo: errorInfo
    });

    // Report error to monitoring service (when available)
    if (window.reportError) {
      window.reportError(error, errorInfo);
    }
  }
  handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null
    });
  };
  render() {
    if (this.state.hasError) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "50vh",
        p: 3,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Paper, {
          elevation: 3,
          sx: {
            p: 4,
            textAlign: 'center',
            maxWidth: 500,
            width: '100%'
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_iconsMaterial.ErrorOutline, {
            sx: {
              fontSize: 64,
              color: 'error.main',
              mb: 2
            }
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            variant: "h5",
            gutterBottom: true,
            children: "Something went wrong"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            variant: "body1",
            color: "text.secondary",
            paragraph: true,
            children: "We're sorry, but something unexpected happened. Please refresh the page or try again."
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "contained",
            color: "primary",
            onClick: () => window.location.reload(),
            sx: {
              mr: 2
            },
            children: "Refresh Page"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "outlined",
            onClick: this.handleRetry,
            children: "Try Again"
          }), process.env.NODE_ENV === 'development' && this.state.error && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
            mt: 3,
            textAlign: "left",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
              variant: "subtitle2",
              color: "error",
              children: "Error Details (Development Only):"
            }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("pre", {
              style: {
                fontSize: '12px',
                backgroundColor: '#f5f5f5',
                padding: '8px',
                borderRadius: '4px',
                overflow: 'auto',
                maxHeight: '200px'
              },
              children: [this.state.error.toString(), this.state.errorInfo.componentStack]
            })]
          })]
        })
      });
    }
    return this.props.children;
  }
}
var _default = exports.default = ErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,