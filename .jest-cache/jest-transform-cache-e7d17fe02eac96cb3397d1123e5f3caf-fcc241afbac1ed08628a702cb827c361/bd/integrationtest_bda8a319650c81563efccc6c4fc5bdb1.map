{"version":3,"names":["_getJestObj","mock","connect","jest","fn","mockResolvedValue","query","release","express","require","router","Router","post","req","res","name","email","password","password2","location","address","body","status","json","error","id","message","token","Date","now","user","bodyParser","request","app","describe","beforeAll","process","env","NODE_ENV","JWT_SECRET","users","use","urlencoded","extended","beforeEach","clearAllMocks","testUser","it","console","log","registerResponse","send","expect","loginResponse","toBeDefined","toBe","substring","originalRegister","stack","find","layer","route","path","filter","response","invalidUser","userWithMismatchedPasswords"],"sources":["integration.test.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst request = require('supertest');\n\n// Mock the database module\njest.mock('../routes/db.js', () => ({\n  connect: jest.fn().mockResolvedValue({\n    query: jest.fn(),\n    release: jest.fn()\n  })\n}));\n\n// Mock the users route module\njest.mock('../routes/api/users', () => {\n  const express = require('express');\n  const router = express.Router();\n  \n  // Mock registration endpoint\n  router.post('/register', (req, res) => {\n    const { name, email, password, password2, location, address } = req.body;\n    \n    // Basic validation\n    if (!name || !email || !password || !password2 || !location || !address) {\n      return res.status(400).json({ error: 'All fields are required' });\n    }\n    \n    if (password !== password2) {\n      return res.status(400).json({ error: 'Passwords do not match' });\n    }\n    \n    // Mock successful registration\n    res.status(201).json({\n      id: 1,\n      name,\n      email,\n      location,\n      address,\n      message: 'User registered successfully'\n    });\n  });\n  \n  // Mock login endpoint\n  router.post('/login', (req, res) => {\n    const { email, password } = req.body;\n    \n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password are required' });\n    }\n    \n    // Mock successful login\n    res.status(200).json({\n      token: 'mock-jwt-token-' + Date.now(),\n      user: {\n        id: 1,\n        name: 'Integration Test User',\n        email: email\n      }\n    });\n  });\n  \n  return router;\n});\n\nlet app;\n\ndescribe('Integration Tests - User Registration and Login', () => {\n  beforeAll(async () => {\n    // Set test environment\n    process.env.NODE_ENV = 'test';\n    process.env.JWT_SECRET = 'test-secret';\n\n    // Import app after setting environment\n    const users = require('../routes/api/users');\n\n    app = express();\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    app.use('/api/users', users);\n  });\n\n  beforeEach(async () => {\n    // Reset mocks before each test\n    jest.clearAllMocks();\n  });\n\n  describe('Complete User Flow', () => {\n    const testUser = {\n      name: 'Integration Test User',\n      email: 'integration-test@example.com',\n      password: 'testpassword123',\n      password2: 'testpassword123',\n      location: '40.7128,-74.0060',\n      address: '123 Integration Test Street, New York, NY'\n    };\n\n    it('should complete full user registration and login flow', async () => {\n      // Step 1: Register a new user\n      console.log('🧪 Testing user registration...');\n\n      const registerResponse = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(201);\n\n      console.log('✅ User registration successful');\n\n      // Step 2: Attempt login with the registered user\n      console.log('🧪 Testing user login...');\n\n      const loginResponse = await request(app)\n        .post('/api/users/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password\n        })\n        .expect(200);\n\n      // Check if login was successful\n      expect(loginResponse.body.token).toBeDefined();\n      expect(typeof loginResponse.body.token).toBe('string');\n      expect(loginResponse.body.user).toBeDefined();\n      expect(loginResponse.body.user.email).toBe(testUser.email);\n      \n      console.log('✅ User login successful');\n      console.log('🎟️  JWT Token received:', loginResponse.body.token.substring(0, 20) + '...');\n\n      // Verify the flow completed\n      expect(registerResponse.status).toBe(201);\n      expect(registerResponse.body.id).toBe(1);\n      expect(registerResponse.body.name).toBe(testUser.name);\n    });\n\n    it('should reject duplicate email registration', async () => {\n      // Mock the users route to return duplicate email error\n      const users = require('../routes/api/users');\n      \n      // Override the register endpoint for this test\n      const originalRegister = users.stack.find(layer => layer.route?.path === '/register');\n      if (originalRegister) {\n        users.stack = users.stack.filter(layer => layer !== originalRegister);\n      }\n      \n      users.post('/register', (req, res) => {\n        res.status(400).json({ error: 'Email already exists' });\n      });\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(testUser)\n        .expect(400);\n\n      expect(response.body.error).toBe('Email already exists');\n    });\n\n    it('should validate required fields', async () => {\n      const invalidUser = {\n        name: 'Test User',\n        // Missing email, password, etc.\n      };\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(invalidUser)\n        .expect(400);\n\n      expect(response.body.error).toBe('All fields are required');\n    });\n\n    it('should validate password confirmation', async () => {\n      const userWithMismatchedPasswords = {\n        ...testUser,\n        password2: 'differentpassword'\n      };\n\n      const response = await request(app)\n        .post('/api/users/register')\n        .send(userWithMismatchedPasswords)\n        .expect(400);\n\n      expect(response.body.error).toBe('Passwords do not match');\n    });\n  });\n});"],"mappings":";;AAIA;AACAA,WAAA,GAAKC,IAAI,CAAC,iBAAiB,EAAE,OAAO;EAClCC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IACnCC,KAAK,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC;IAChBG,OAAO,EAAEJ,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AACH,CAAC,CAAC,CAAC;;AAEH;AACAJ,WAAA,GAAKC,IAAI,CAAC,qBAAqB,EAAE,MAAM;EACrC,MAAMO,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;EAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;;EAE/B;EACAD,MAAM,CAACE,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;IACrC,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,QAAQ;MAAEC;IAAQ,CAAC,GAAGP,GAAG,CAACQ,IAAI;;IAExE;IACA,IAAI,CAACN,IAAI,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,SAAS,IAAI,CAACC,QAAQ,IAAI,CAACC,OAAO,EAAE;MACvE,OAAON,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA0B,CAAC,CAAC;IACnE;IAEA,IAAIP,QAAQ,KAAKC,SAAS,EAAE;MAC1B,OAAOJ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAyB,CAAC,CAAC;IAClE;;IAEA;IACAV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBE,EAAE,EAAE,CAAC;MACLV,IAAI;MACJC,KAAK;MACLG,QAAQ;MACRC,OAAO;MACPM,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAhB,MAAM,CAACE,IAAI,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClC,MAAM;MAAEE,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACQ,IAAI;IAEpC,IAAI,CAACL,KAAK,IAAI,CAACC,QAAQ,EAAE;MACvB,OAAOH,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAkC,CAAC,CAAC;IAC3E;;IAEA;IACAV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBI,KAAK,EAAE,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrCC,IAAI,EAAE;QACJL,EAAE,EAAE,CAAC;QACLV,IAAI,EAAE,uBAAuB;QAC7BC,KAAK,EAAEA;MACT;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAON,MAAM;AACf,CAAC,CAAC;AAAC,SAAAV,YAAA;EAAA;IAAAG;EAAA,IAAAM,OAAA;EAAAT,WAAA,GAAAA,CAAA,KAAAG,IAAA;EAAA,OAAAA,IAAA;AAAA;AA7DH,MAAMK,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMsB,UAAU,GAAGtB,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMuB,OAAO,GAAGvB,OAAO,CAAC,WAAW,CAAC;AA6DpC,IAAIwB,GAAG;AAEPC,QAAQ,CAAC,iDAAiD,EAAE,MAAM;EAChEC,SAAS,CAAC,YAAY;IACpB;IACAC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAG,MAAM;IAC7BF,OAAO,CAACC,GAAG,CAACE,UAAU,GAAG,aAAa;;IAEtC;IACA,MAAMC,KAAK,GAAG/B,OAAO,CAAC,qBAAqB,CAAC;IAE5CwB,GAAG,GAAGzB,OAAO,CAAC,CAAC;IACfyB,GAAG,CAACQ,GAAG,CAACV,UAAU,CAACW,UAAU,CAAC;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAC,CAAC;IACnDV,GAAG,CAACQ,GAAG,CAACV,UAAU,CAACR,IAAI,CAAC,CAAC,CAAC;IAC1BU,GAAG,CAACQ,GAAG,CAAC,YAAY,EAAED,KAAK,CAAC;EAC9B,CAAC,CAAC;EAEFI,UAAU,CAAC,YAAY;IACrB;IACAzC,IAAI,CAAC0C,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFX,QAAQ,CAAC,oBAAoB,EAAE,MAAM;IACnC,MAAMY,QAAQ,GAAG;MACf/B,IAAI,EAAE,uBAAuB;MAC7BC,KAAK,EAAE,8BAA8B;MACrCC,QAAQ,EAAE,iBAAiB;MAC3BC,SAAS,EAAE,iBAAiB;MAC5BC,QAAQ,EAAE,kBAAkB;MAC5BC,OAAO,EAAE;IACX,CAAC;IAED2B,EAAE,CAAC,uDAAuD,EAAE,YAAY;MACtE;MACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAE9C,MAAMC,gBAAgB,GAAG,MAAMlB,OAAO,CAACC,GAAG,CAAC,CACxCrB,IAAI,CAAC,qBAAqB,CAAC,CAC3BuC,IAAI,CAACL,QAAQ,CAAC,CACdM,MAAM,CAAC,GAAG,CAAC;MAEdJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;MAE7C;MACAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAEvC,MAAMI,aAAa,GAAG,MAAMrB,OAAO,CAACC,GAAG,CAAC,CACrCrB,IAAI,CAAC,kBAAkB,CAAC,CACxBuC,IAAI,CAAC;QACJnC,KAAK,EAAE8B,QAAQ,CAAC9B,KAAK;QACrBC,QAAQ,EAAE6B,QAAQ,CAAC7B;MACrB,CAAC,CAAC,CACDmC,MAAM,CAAC,GAAG,CAAC;;MAEd;MACAA,MAAM,CAACC,aAAa,CAAChC,IAAI,CAACM,KAAK,CAAC,CAAC2B,WAAW,CAAC,CAAC;MAC9CF,MAAM,CAAC,OAAOC,aAAa,CAAChC,IAAI,CAACM,KAAK,CAAC,CAAC4B,IAAI,CAAC,QAAQ,CAAC;MACtDH,MAAM,CAACC,aAAa,CAAChC,IAAI,CAACS,IAAI,CAAC,CAACwB,WAAW,CAAC,CAAC;MAC7CF,MAAM,CAACC,aAAa,CAAChC,IAAI,CAACS,IAAI,CAACd,KAAK,CAAC,CAACuC,IAAI,CAACT,QAAQ,CAAC9B,KAAK,CAAC;MAE1DgC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,aAAa,CAAChC,IAAI,CAACM,KAAK,CAAC6B,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;;MAE1F;MACAJ,MAAM,CAACF,gBAAgB,CAAC5B,MAAM,CAAC,CAACiC,IAAI,CAAC,GAAG,CAAC;MACzCH,MAAM,CAACF,gBAAgB,CAAC7B,IAAI,CAACI,EAAE,CAAC,CAAC8B,IAAI,CAAC,CAAC,CAAC;MACxCH,MAAM,CAACF,gBAAgB,CAAC7B,IAAI,CAACN,IAAI,CAAC,CAACwC,IAAI,CAACT,QAAQ,CAAC/B,IAAI,CAAC;IACxD,CAAC,CAAC;IAEFgC,EAAE,CAAC,4CAA4C,EAAE,YAAY;MAC3D;MACA,MAAMP,KAAK,GAAG/B,OAAO,CAAC,qBAAqB,CAAC;;MAE5C;MACA,MAAMgD,gBAAgB,GAAGjB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,EAAEC,IAAI,KAAK,WAAW,CAAC;MACrF,IAAIL,gBAAgB,EAAE;QACpBjB,KAAK,CAACkB,KAAK,GAAGlB,KAAK,CAACkB,KAAK,CAACK,MAAM,CAACH,KAAK,IAAIA,KAAK,KAAKH,gBAAgB,CAAC;MACvE;MAEAjB,KAAK,CAAC5B,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;QACpCA,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAuB,CAAC,CAAC;MACzD,CAAC,CAAC;MAEF,MAAMwC,QAAQ,GAAG,MAAMhC,OAAO,CAACC,GAAG,CAAC,CAChCrB,IAAI,CAAC,qBAAqB,CAAC,CAC3BuC,IAAI,CAACL,QAAQ,CAAC,CACdM,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACY,QAAQ,CAAC3C,IAAI,CAACG,KAAK,CAAC,CAAC+B,IAAI,CAAC,sBAAsB,CAAC;IAC1D,CAAC,CAAC;IAEFR,EAAE,CAAC,iCAAiC,EAAE,YAAY;MAChD,MAAMkB,WAAW,GAAG;QAClBlD,IAAI,EAAE;QACN;MACF,CAAC;MAED,MAAMiD,QAAQ,GAAG,MAAMhC,OAAO,CAACC,GAAG,CAAC,CAChCrB,IAAI,CAAC,qBAAqB,CAAC,CAC3BuC,IAAI,CAACc,WAAW,CAAC,CACjBb,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACY,QAAQ,CAAC3C,IAAI,CAACG,KAAK,CAAC,CAAC+B,IAAI,CAAC,yBAAyB,CAAC;IAC7D,CAAC,CAAC;IAEFR,EAAE,CAAC,uCAAuC,EAAE,YAAY;MACtD,MAAMmB,2BAA2B,GAAG;QAClC,GAAGpB,QAAQ;QACX5B,SAAS,EAAE;MACb,CAAC;MAED,MAAM8C,QAAQ,GAAG,MAAMhC,OAAO,CAACC,GAAG,CAAC,CAChCrB,IAAI,CAAC,qBAAqB,CAAC,CAC3BuC,IAAI,CAACe,2BAA2B,CAAC,CACjCd,MAAM,CAAC,GAAG,CAAC;MAEdA,MAAM,CAACY,QAAQ,CAAC3C,IAAI,CAACG,KAAK,CAAC,CAAC+B,IAAI,CAAC,wBAAwB,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}