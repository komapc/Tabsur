# Multi-stage Node.js server Dockerfile - Production & Debug modes
# Build with: docker build --target production -t tabsur-server:prod .
# Build with: docker build --target debug -t tabsur-server:debug .

# Base stage with common dependencies
FROM node:24.4.1-alpine AS base

# Install common packages
RUN apk add --no-cache curl

# Create app directory and user
WORKDIR /app
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies based on target
FROM base AS deps-prod
RUN npm ci --only=production --cache /tmp/.npm && \
    rm -rf /tmp/.npm

FROM base AS deps-debug
RUN npm ci --cache /tmp/.npm && \
    rm -rf /tmp/.npm

# Production stage
FROM base AS production
# Copy production dependencies
COPY --from=deps-prod /app/node_modules ./node_modules

# Copy source code
COPY server.js ./
COPY routes/ ./routes/
COPY config/ ./config/
COPY validation/ ./validation/
COPY middleware/ ./middleware/
COPY .env* ./

# Change ownership and switch user
RUN chown -R nodejs:nodejs /app
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${PORT:-5000}/api/system/health || exit 1

# Expose port
EXPOSE 5000

# Start the server
CMD ["npm", "start"]

# Debug stage
FROM base AS debug
# Copy debug dependencies (including dev tools)
COPY --from=deps-debug /app/node_modules ./node_modules

# Copy source code
COPY server.js ./
COPY routes/ ./routes/
COPY config/ ./config/
COPY validation/ ./validation/
COPY middleware/ ./middleware/
COPY .env* ./

# Install nodemon for development
RUN npm install -g nodemon

# Change ownership and switch user
RUN chown -R nodejs:nodejs /app
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:${PORT:-5000}/health || exit 1

# Expose port
EXPOSE 5000

# Start with nodemon for hot reloading
CMD ["nodemon", "server.js"]
